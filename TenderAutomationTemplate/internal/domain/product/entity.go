// üè• –î–û–ú–ï–ù–ù–ê–Ø –ú–û–î–ï–õ–¨ –¢–û–í–ê–†–ê –ú–ï–î–ò–¶–ò–ù–°–ö–û–ì–û –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø
//
// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä/–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏–∑ —Ç–µ—Ö–∑–∞–¥–∞–Ω–∏–π —Ç–µ–Ω–¥–µ—Ä–æ–≤
// –°–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏ –∏ –∏—Ö –∫–∞—Ç–∞–ª–æ–≥–∞–º–∏

package product

import (
	"errors"
	"fmt"
	"strings"
	"time"
)

// üè• –û–°–ù–û–í–ù–ê–Ø –ú–û–î–ï–õ–¨ –¢–û–í–ê–†–ê
type Product struct {
	// ‚úÖ –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
	ID        uint      `json:"id" db:"id"`
	CreatedAt time.Time `json:"created_at" db:"created_at"`
	UpdatedAt time.Time `json:"updated_at" db:"updated_at"`
	
	// üìÑ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
	Name            string `json:"name" db:"name"`                       // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
	Description     string `json:"description" db:"description"`         // –û–ø–∏—Å–∞–Ω–∏–µ
	Category        ProductCategory `json:"category" db:"category"`       // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
	Subcategory     string `json:"subcategory" db:"subcategory"`         // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
	
	// üîç –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫
	Keywords        []string `json:"keywords" db:"-"`                    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (JSON –≤ –ë–î)
	Synonyms        []string `json:"synonyms" db:"-"`                    // –°–∏–Ω–æ–Ω–∏–º—ã –Ω–∞–∑–≤–∞–Ω–∏—è
	GOST           string   `json:"gost" db:"gost"`                      // –ì–û–°–¢ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç
	ArticleNumber   string   `json:"article_number" db:"article_number"` // –ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
	Barcode         string   `json:"barcode" db:"barcode"`               // –®—Ç—Ä–∏—Ö-–∫–æ–¥
	
	// üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
	Manufacturer    string   `json:"manufacturer" db:"manufacturer"`      // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å
	CountryOfOrigin string   `json:"country_of_origin" db:"country_of_origin"` // –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
	CertificateType string   `json:"certificate_type" db:"certificate_type"`   // –¢–∏–ø —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–ú–ó –†–§, –¢–† –¢–°)
	CertificateNumber string `json:"certificate_number" db:"certificate_number"` // –ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
	CertificateValidUntil *time.Time `json:"certificate_valid_until" db:"certificate_valid_until"` // –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
	
	// üìê –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
	Specifications  map[string]interface{} `json:"specifications" db:"-"` // –¢–µ—Ö—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (JSON –≤ –ë–î)
	Dimensions      *ProductDimensions     `json:"dimensions" db:"-"`     // –†–∞–∑–º–µ—Ä—ã
	Weight          *float64              `json:"weight" db:"weight"`     // –í–µ—Å (–∫–≥)
	PowerConsumption *float64             `json:"power_consumption" db:"power_consumption"` // –ü–æ—Ç—Ä–µ–±–ª—è–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å (–í—Ç)
	
	// üí∞ –¶–µ–Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	AveragePrice    *float64 `json:"average_price" db:"average_price"`     // –°—Ä–µ–¥–Ω—è—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞
	MinPrice        *float64 `json:"min_price" db:"min_price"`             // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞
	MaxPrice        *float64 `json:"max_price" db:"max_price"`             // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞
	LastPriceUpdate *time.Time `json:"last_price_update" db:"last_price_update"` // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
	
	// üîó –°–≤—è–∑–∏ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏
	SupplierProducts []SupplierProduct `json:"supplier_products" db:"-"` // –¢–æ–≤–∞—Ä —É —Ä–∞–∑–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
	
	// ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑
	AIExtracted     bool     `json:"ai_extracted" db:"ai_extracted"`       // –ò–∑–≤–ª–µ—á–µ–Ω –ò–ò –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
	AIConfidence    float64  `json:"ai_confidence" db:"ai_confidence"`     // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
	OriginalText    string   `json:"original_text" db:"original_text"`     // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
	
	// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	TimesFound      int       `json:"times_found" db:"times_found"`         // –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –≤ —Ç–µ–Ω–¥–µ—Ä–∞—Ö
	LastFoundAt     *time.Time `json:"last_found_at" db:"last_found_at"`    // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –Ω–∞–π–¥–µ–Ω
	PopularityScore float64   `json:"popularity_score" db:"popularity_score"` // –ò–Ω–¥–µ–∫—Å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
}

// üìä –ï–ù–£–ú–´ –ò –ö–û–ù–°–¢–ê–ù–¢–´

type ProductCategory string

const (
	CategoryDiagnostic     ProductCategory = "diagnostic"     // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
	CategorySurgical       ProductCategory = "surgical"       // –•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
	CategoryLaboratory     ProductCategory = "laboratory"     // –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
	CategoryReanimation    ProductCategory = "reanimation"    // –†–µ–∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
	CategoryRadiology      ProductCategory = "radiology"      // –†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
	CategoryPhysical       ProductCategory = "physical"       // –§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
	CategoryDental         ProductCategory = "dental"         // –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
	CategoryConsumables    ProductCategory = "consumables"    // –†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
	CategoryFurniture      ProductCategory = "furniture"      // –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –º–µ–±–µ–ª—å
	CategoryOther          ProductCategory = "other"          // –ü—Ä–æ—á–µ–µ
)

// üìê –†–ê–ó–ú–ï–†–´ –¢–û–í–ê–†–ê
type ProductDimensions struct {
	Length float64 `json:"length" db:"length"` // –î–ª–∏–Ω–∞ (—Å–º)
	Width  float64 `json:"width" db:"width"`   // –®–∏—Ä–∏–Ω–∞ (—Å–º)
	Height float64 `json:"height" db:"height"` // –í—ã—Å–æ—Ç–∞ (—Å–º)
}

// üè™ –¢–û–í–ê–† –£ –ü–û–°–¢–ê–í–©–ò–ö–ê
type SupplierProduct struct {
	ProductID      uint      `json:"product_id" db:"product_id"`
	SupplierID     uint      `json:"supplier_id" db:"supplier_id"`
	SupplierSKU    string    `json:"supplier_sku" db:"supplier_sku"`       // SKU —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
	ProductURL     string    `json:"product_url" db:"product_url"`         // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
	Price          float64   `json:"price" db:"price"`                     // –¶–µ–Ω–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
	Currency       string    `json:"currency" db:"currency"`               // –í–∞–ª—é—Ç–∞
	InStock        bool      `json:"in_stock" db:"in_stock"`               // –í –Ω–∞–ª–∏—á–∏–∏
	DeliveryDays   int       `json:"delivery_days" db:"delivery_days"`     // –°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏ (–¥–Ω–∏)
	MinOrderQty    int       `json:"min_order_qty" db:"min_order_qty"`     // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—Ä—Ç–∏—è
	LastChecked    time.Time `json:"last_checked" db:"last_checked"`       // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
	FoundByParser  bool      `json:"found_by_parser" db:"found_by_parser"` // –ù–∞–π–¥–µ–Ω –ø–∞—Ä—Å–µ—Ä–æ–º
}

// üö® –î–û–ú–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò
var (
	ErrInvalidProduct       = errors.New("invalid product data")
	ErrEmptyProductName     = errors.New("product name cannot be empty")
	ErrInvalidCategory      = errors.New("invalid product category")
	ErrInvalidPrice         = errors.New("invalid price value")
	ErrProductNotFound      = errors.New("product not found")
	ErrDuplicateProduct     = errors.New("product already exists")
	ErrInvalidDimensions    = errors.New("invalid product dimensions")
	ErrInvalidWeight        = errors.New("invalid weight value")
	ErrMissingSpecifications = errors.New("product specifications are required")
)

// üè≠ –ö–û–ù–°–¢–†–£–ö–¢–û–† –¢–û–í–ê–†–ê
func NewProduct(name, description string, category ProductCategory) (*Product, error) {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
	if strings.TrimSpace(name) == "" {
		return nil, ErrEmptyProductName
	}
	
	if err := validateCategory(category); err != nil {
		return nil, err
	}
	
	now := time.Now()
	
	return &Product{
		Name:            strings.TrimSpace(name),
		Description:     strings.TrimSpace(description),
		Category:        category,
		Keywords:        extractKeywords(name, description),
		Specifications:  make(map[string]interface{}),
		CreatedAt:       now,
		UpdatedAt:       now,
		TimesFound:      1,
		LastFoundAt:     &now,
		PopularityScore: 1.0,
	}, nil
}

// ü§ñ –°–û–ó–î–ê–ù–ò–ï –¢–û–í–ê–†–ê –ò–ó –ê–ù–ê–õ–ò–ó–ê –ò–ò
func NewProductFromAI(name, description, originalText string, category ProductCategory, confidence float64) (*Product, error) {
	product, err := NewProduct(name, description, category)
	if err != nil {
		return nil, err
	}
	
	product.AIExtracted = true
	product.AIConfidence = confidence
	product.OriginalText = originalText
	product.Synonyms = generateSynonyms(name)
	
	return product, nil
}

// üîß –ú–ï–¢–û–î–´ –î–õ–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
func (p *Product) UpdateSpecifications(specs map[string]interface{}) error {
	if len(specs) == 0 {
		return ErrMissingSpecifications
	}
	
	if p.Specifications == nil {
		p.Specifications = make(map[string]interface{})
	}
	
	for key, value := range specs {
		p.Specifications[key] = value
	}
	
	p.UpdatedAt = time.Now()
	return nil
}

// –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞
func (p *Product) UpdateDimensions(length, width, height float64) error {
	if length <= 0 || width <= 0 || height <= 0 {
		return ErrInvalidDimensions
	}
	
	p.Dimensions = &ProductDimensions{
		Length: length,
		Width:  width,
		Height: height,
	}
	
	p.UpdatedAt = time.Now()
	return nil
}

// –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å —Ç–æ–≤–∞—Ä–∞
func (p *Product) UpdateWeight(weight float64) error {
	if weight <= 0 {
		return ErrInvalidWeight
	}
	
	p.Weight = &weight
	p.UpdatedAt = time.Now()
	return nil
}

// –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
func (p *Product) AddSupplier(supplierID uint, sku, productURL string, price float64, inStock bool, deliveryDays int) error {
	if price < 0 {
		return ErrInvalidPrice
	}
	
	supplierProduct := SupplierProduct{
		ProductID:     p.ID,
		SupplierID:    supplierID,
		SupplierSKU:   sku,
		ProductURL:    productURL,
		Price:         price,
		Currency:      "RUB",
		InStock:       inStock,
		DeliveryDays:  deliveryDays,
		LastChecked:   time.Now(),
		FoundByParser: true,
	}
	
	p.SupplierProducts = append(p.SupplierProducts, supplierProduct)
	p.updatePriceStatistics()
	p.UpdatedAt = time.Now()
	
	return nil
}

// –û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–Ω–¥–µ—Ä–µ
func (p *Product) MarkFoundInTender() {
	p.TimesFound++
	now := time.Now()
	p.LastFoundAt = &now
	p.updatePopularityScore()
	p.UpdatedAt = now
}

// –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
func (p *Product) AddKeywords(keywords ...string) {
	for _, keyword := range keywords {
		keyword = strings.ToLower(strings.TrimSpace(keyword))
		if keyword != "" && !contains(p.Keywords, keyword) {
			p.Keywords = append(p.Keywords, keyword)
		}
	}
	p.UpdatedAt = time.Now()
}

// üîç –ú–ï–¢–û–î–´ –ó–ê–ü–†–û–°–û–í

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏
func (p *Product) IsAvailable() bool {
	for _, sp := range p.SupplierProducts {
		if sp.InStock {
			return true
		}
	}
	return false
}

// –ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å—Ä–µ–¥–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
func (p *Product) GetMinPrice() float64 {
	if len(p.SupplierProducts) == 0 {
		if p.MinPrice != nil {
			return *p.MinPrice
		}
		return 0
	}
	
	minPrice := p.SupplierProducts[0].Price
	for _, sp := range p.SupplierProducts[1:] {
		if sp.Price < minPrice && sp.InStock {
			minPrice = sp.Price
		}
	}
	
	return minPrice
}

// –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å—Ä–µ–¥–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
func (p *Product) GetMaxPrice() float64 {
	if len(p.SupplierProducts) == 0 {
		if p.MaxPrice != nil {
			return *p.MaxPrice
		}
		return 0
	}
	
	maxPrice := p.SupplierProducts[0].Price
	for _, sp := range p.SupplierProducts[1:] {
		if sp.Price > maxPrice && sp.InStock {
			maxPrice = sp.Price
		}
	}
	
	return maxPrice
}

// –ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏
func (p *Product) GetMinDeliveryDays() int {
	if len(p.SupplierProducts) == 0 {
		return 0
	}
	
	minDays := p.SupplierProducts[0].DeliveryDays
	for _, sp := range p.SupplierProducts[1:] {
		if sp.DeliveryDays < minDays && sp.InStock {
			minDays = sp.DeliveryDays
		}
	}
	
	return minDays
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã
func (p *Product) NeedsPriceUpdate() bool {
	if p.LastPriceUpdate == nil {
		return true
	}
	
	// –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
	return time.Since(*p.LastPriceUpdate) > 7*24*time.Hour
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
func (p *Product) IsRelevantFor(query string) bool {
	query = strings.ToLower(query)
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
	if strings.Contains(strings.ToLower(p.Name), query) {
		return true
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö
	for _, keyword := range p.Keywords {
		if strings.Contains(keyword, query) {
			return true
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Å–∏–Ω–æ–Ω–∏–º–∞—Ö
	for _, synonym := range p.Synonyms {
		if strings.Contains(strings.ToLower(synonym), query) {
			return true
		}
	}
	
	return false
}

// üîß –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–µ–Ω
func (p *Product) updatePriceStatistics() {
	if len(p.SupplierProducts) == 0 {
		return
	}
	
	var prices []float64
	for _, sp := range p.SupplierProducts {
		if sp.InStock {
			prices = append(prices, sp.Price)
		}
	}
	
	if len(prices) == 0 {
		return
	}
	
	// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
	minPrice := prices[0]
	maxPrice := prices[0]
	sum := 0.0
	
	for _, price := range prices {
		if price < minPrice {
			minPrice = price
		}
		if price > maxPrice {
			maxPrice = price
		}
		sum += price
	}
	
	// –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
	avgPrice := sum / float64(len(prices))
	
	p.MinPrice = &minPrice
	p.MaxPrice = &maxPrice
	p.AveragePrice = &avgPrice
	
	now := time.Now()
	p.LastPriceUpdate = &now
}

// –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
func (p *Product) updatePopularityScore() {
	// –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
	baseScore := float64(p.TimesFound)
	
	// –ë–æ–Ω—É—Å –∑–∞ –Ω–µ–¥–∞–≤–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
	if p.LastFoundAt != nil {
		daysSinceLastFound := time.Since(*p.LastFoundAt).Hours() / 24
		if daysSinceLastFound < 30 {
			baseScore *= (1 + (30-daysSinceLastFound)/30*0.5) // –î–æ 50% –±–æ–Ω—É—Å–∞
		}
	}
	
	// –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
	supplierBonus := float64(len(p.SupplierProducts)) * 0.1
	
	p.PopularityScore = baseScore + supplierBonus
}

// üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò

func validateCategory(category ProductCategory) error {
	validCategories := map[ProductCategory]bool{
		CategoryDiagnostic:  true,
		CategorySurgical:    true,
		CategoryLaboratory:  true,
		CategoryReanimation: true,
		CategoryRadiology:   true,
		CategoryPhysical:    true,
		CategoryDental:      true,
		CategoryConsumables: true,
		CategoryFurniture:   true,
		CategoryOther:       true,
	}
	
	if !validCategories[category] {
		return ErrInvalidCategory
	}
	
	return nil
}

func extractKeywords(name, description string) []string {
	text := strings.ToLower(name + " " + description)
	
	// –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é NLP)
	words := strings.Fields(text)
	
	var keywords []string
	for _, word := range words {
		word = strings.Trim(word, ".,!?;:")
		if len(word) > 3 { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
			keywords = append(keywords, word)
		}
	}
	
	return removeDuplicates(keywords)
}

func generateSynonyms(name string) []string {
	// –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω–æ–Ω–∏–º–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
	synonymMap := map[string][]string{
		"–∞–ø–ø–∞—Ä–∞—Ç":      {"—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–ø—Ä–∏–±–æ—Ä", "—Å–∏—Å—Ç–µ–º–∞"},
		"–º–æ–Ω–∏—Ç–æ—Ä":      {"–¥–∏—Å–ø–ª–µ–π", "—ç–∫—Ä–∞–Ω"},
		"–Ω–∞—Å–æ—Å":        {"–ø–æ–º–ø–∞"},
		"—Å—Ç–æ–ª":         {"—Å—Ç–æ–π–∫–∞", "—Ç—É–º–±–∞"},
		"—à–∫–∞—Ñ":         {"—è—â–∏–∫", "–±–æ–∫—Å"},
		"–∫—Ä–æ–≤–∞—Ç—å":      {"–∫–æ–π–∫–∞", "–ª–æ–∂–µ"},
		"–∫—Ä–µ—Å–ª–æ":       {"—Å—Ç—É–ª"},
		"–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä":   {"–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫—Ä–æ–≤–∏", "–≥–µ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"},
	}
	
	nameLower := strings.ToLower(name)
	var synonyms []string
	
	for key, values := range synonymMap {
		if strings.Contains(nameLower, key) {
			synonyms = append(synonyms, values...)
		}
	}
	
	return synonyms
}

func contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}

func removeDuplicates(slice []string) []string {
	keys := make(map[string]bool)
	var result []string
	
	for _, item := range slice {
		if !keys[item] {
			keys[item] = true
			result = append(result, item)
		}
	}
	
	return result
}

// üìä –ú–ï–¢–û–î–´ –î–õ–Ø UI

// –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func (c ProductCategory) DisplayName() string {
	switch c {
	case CategoryDiagnostic:
		return "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
	case CategorySurgical:
		return "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
	case CategoryLaboratory:
		return "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
	case CategoryReanimation:
		return "–†–µ–∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
	case CategoryRadiology:
		return "–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
	case CategoryPhysical:
		return "–§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
	case CategoryDental:
		return "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
	case CategoryConsumables:
		return "–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
	case CategoryFurniture:
		return "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –º–µ–±–µ–ª—å"
	default:
		return "–ü—Ä–æ—á–µ–µ"
	}
}

// –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
func (p *Product) GetSearchSummary() string {
	summary := p.Name
	if p.Manufacturer != "" {
		summary += fmt.Sprintf(" (%s)", p.Manufacturer)
	}
	if p.AveragePrice != nil {
		summary += fmt.Sprintf(" - –æ—Ç %.0f —Ä—É–±.", *p.AveragePrice)
	}
	return summary
}