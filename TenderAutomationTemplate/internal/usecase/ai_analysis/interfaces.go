// ü§ñ –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø –ò–ò –ê–ù–ê–õ–ò–ó–ê –¢–ï–ù–î–ï–†–û–í
//
// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Llama 4 –∏ –¥—Ä—É–≥–∏–º–∏ LLM
// –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤, –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω

package ai_analysis

import (
	"context"
	"time"
	
	"tender-automation-system/internal/domain/tender"
	"tender-automation-system/internal/domain/product"
)

// üß† –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° LLM –ü–†–û–í–ê–ô–î–ï–†–ê
type LLMProvider interface {
	// –ê–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–Ω–¥–µ—Ä–∞
	AnalyzeTenderRelevance(ctx context.Context, req *TenderAnalysisRequest) (*TenderAnalysisResponse, error)
	
	// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
	ExtractProductsFromDocument(ctx context.Context, req *DocumentAnalysisRequest) (*ProductExtractionResponse, error)
	
	// –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	AnalyzePricing(ctx context.Context, req *PricingAnalysisRequest) (*PricingAnalysisResponse, error)
	
	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è email –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
	GenerateSupplierEmail(ctx context.Context, req *EmailGenerationRequest) (*EmailGenerationResponse, error)
	
	// –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
	AnalyzeSupplierResponse(ctx context.Context, req *SupplierResponseRequest) (*SupplierResponseAnalysis, error)
}

// üìÑ –ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –î–û–ö–£–ú–ï–ù–¢–û–í
type DocumentProcessor interface {
	// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOC/DOCX
	ExtractTextFromDoc(ctx context.Context, filePath string) (string, error)
	
	// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
	ExtractTextFromPDF(ctx context.Context, filePath string) (string, error)
	
	// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
	ExtractTablesFromDoc(ctx context.Context, filePath string) ([]DocumentTable, error)
	
	// –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
	CleanText(text string) string
	
	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
	DetectDocumentType(ctx context.Context, filePath string) (DocumentType, error)
}

// üìä –ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –¶–ï–ù
type PriceAnalyzer interface {
	// –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤
	AnalyzeHistoricalPrices(ctx context.Context, productIDs []uint, region string) (*PriceHistoryAnalysis, error)
	
	// –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π —Ü–µ–Ω—ã
	PredictWinningPrice(ctx context.Context, req *WinningPricePredictionRequest) (*WinningPricePrediction, error)
	
	// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—ã –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
	OptimizePrice(ctx context.Context, req *PriceOptimizationRequest) (*PriceOptimizationResult, error)
	
	// –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
	AnalyzeCompetitors(ctx context.Context, tenderID uint) (*CompetitorAnalysis, error)
}

// üîç –ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –ü–û–ò–°–ö–ê –¢–û–í–ê–†–û–í
type ProductMatcher interface {
	// –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ
	FindSimilarProducts(ctx context.Context, productName string, specifications map[string]interface{}) ([]product.Product, error)
	
	// –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
	MatchWithSupplierCatalog(ctx context.Context, productName string, supplierID uint) (*SupplierProductMatch, error)
	
	// –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
	FuzzySearchProducts(ctx context.Context, query string, threshold float64) ([]ProductMatch, error)
	
	// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞
	ExtractProductFeatures(ctx context.Context, productDescription string) (*ProductFeatures, error)
}

// üìß –ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–ù–¢–ï–ù–¢–ê
type ContentGenerator interface {
	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ email
	GeneratePersonalizedEmail(ctx context.Context, req *PersonalizedEmailRequest) (string, error)
	
	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
	GenerateCommercialOffer(ctx context.Context, req *CommercialOfferRequest) (string, error)
	
	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
	GenerateTechnicalDescription(ctx context.Context, product *product.Product) (string, error)
	
	// –ü–µ—Ä–µ–≤–æ–¥ –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
	TranslateContent(ctx context.Context, text, targetLanguage string) (string, error)
}

// üìä –°–¢–†–£–ö–¢–£–†–´ –ó–ê–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í

// üîç –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–†–ê
type TenderAnalysisRequest struct {
	Tender      *tender.Tender `json:"tender"`
	Title       string         `json:"title"`
	Description string         `json:"description"`
	Category    string         `json:"category"`
	CustomerInfo string        `json:"customer_info"`
	Budget      float64        `json:"budget"`
}

type TenderAnalysisResponse struct {
	IsRelevant       bool                      `json:"is_relevant"`
	RelevanceScore   float64                   `json:"relevance_score"`    // 0-1
	Recommendation   tender.AIRecommendation   `json:"recommendation"`
	Reasoning        string                    `json:"reasoning"`
	Category         tender.TenderCategory     `json:"category"`
	IsMedical        bool                      `json:"is_medical"`
	IsEquipment      bool                      `json:"is_equipment"`
	IsGoods          bool                      `json:"is_goods"`
	RiskFactors      []string                  `json:"risk_factors"`
	Opportunities    []string                  `json:"opportunities"`
	CompetitionLevel CompetitionLevel          `json:"competition_level"`
	Confidence       float64                   `json:"confidence"`
}

// üìÑ –ê–ù–ê–õ–ò–ó –î–û–ö–£–ú–ï–ù–¢–û–í
type DocumentAnalysisRequest struct {
	DocumentPath string            `json:"document_path"`
	DocumentText string            `json:"document_text"`
	DocumentType DocumentType      `json:"document_type"`
	TenderID     uint             `json:"tender_id"`
	Context      map[string]interface{} `json:"context"`
}

type ProductExtractionResponse struct {
	Products    []ExtractedProduct `json:"products"`
	Tables      []DocumentTable    `json:"tables"`
	TotalItems  int               `json:"total_items"`
	Confidence  float64           `json:"confidence"`
	Summary     string            `json:"summary"`
	Issues      []string          `json:"issues"`
}

type ExtractedProduct struct {
	Name           string                 `json:"name"`
	Description    string                 `json:"description"`
	Quantity       int                    `json:"quantity"`
	Unit           string                 `json:"unit"`
	MaxPrice       float64                `json:"max_price"`
	Specifications map[string]interface{} `json:"specifications"`
	Requirements   string                 `json:"requirements"`
	Category       product.ProductCategory `json:"category"`
	GOST          string                 `json:"gost"`
	Manufacturer   string                 `json:"manufacturer"`
	OriginalText   string                 `json:"original_text"`
	Confidence     float64                `json:"confidence"`
	TableIndex     int                    `json:"table_index"`
	RowIndex       int                    `json:"row_index"`
}

// üí∞ –ê–ù–ê–õ–ò–ó –¶–ï–ù
type PricingAnalysisRequest struct {
	TenderID         uint                   `json:"tender_id"`
	Products         []ExtractedProduct     `json:"products"`
	HistoricalData   []HistoricalTender     `json:"historical_data"`
	MarketConditions *MarketConditions      `json:"market_conditions"`
	CompanyProfile   *CompanyProfile        `json:"company_profile"`
}

type PricingAnalysisResponse struct {
	RecommendedDiscount float64                `json:"recommended_discount"`  // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–∏–¥–∫–∞ (%)
	TotalPrice         float64                `json:"total_price"`           // –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞
	WinProbability     float64                `json:"win_probability"`       // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞
	ProfitMargin       float64                `json:"profit_margin"`         // –ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏
	RiskLevel          RiskLevel              `json:"risk_level"`            // –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
	ProductPrices      []ProductPriceAdvice   `json:"product_prices"`        // –¶–µ–Ω—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º
	Strategy           PricingStrategy        `json:"strategy"`              // –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
	Justification      string                 `json:"justification"`         // –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
	Alternatives       []PricingAlternative   `json:"alternatives"`          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
}

// üìß –ì–ï–ù–ï–†–ê–¶–ò–Ø EMAIL
type EmailGenerationRequest struct {
	SupplierName    string               `json:"supplier_name"`
	SupplierType    string               `json:"supplier_type"`
	Products        []ExtractedProduct   `json:"products"`
	TenderInfo      *tender.Tender       `json:"tender_info"`
	CompanyInfo     *CompanyProfile      `json:"company_info"`
	EmailType       EmailType            `json:"email_type"`
	PersonalizedData map[string]interface{} `json:"personalized_data"`
}

type EmailGenerationResponse struct {
	Subject      string   `json:"subject"`
	Body         string   `json:"body"`
	Attachments  []string `json:"attachments"`
	Priority     EmailPriority `json:"priority"`
	FollowUpDays int      `json:"follow_up_days"`
	ExpectedResponse string `json:"expected_response"`
}

// üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ò–ü–´

type DocumentType string

const (
	DocumentTypeTechnicalTask   DocumentType = "technical_task"
	DocumentTypeContract        DocumentType = "contract"
	DocumentTypeSpecifications  DocumentType = "specifications"
	DocumentTypePriceList       DocumentType = "price_list"
	DocumentTypeOther          DocumentType = "other"
)

type CompetitionLevel string

const (
	CompetitionLow    CompetitionLevel = "low"
	CompetitionMedium CompetitionLevel = "medium"
	CompetitionHigh   CompetitionLevel = "high"
)

type RiskLevel string

const (
	RiskLow    RiskLevel = "low"
	RiskMedium RiskLevel = "medium"
	RiskHigh   RiskLevel = "high"
)

type EmailType string

const (
	EmailTypeInitialInquiry    EmailType = "initial_inquiry"
	EmailTypeFollowUp         EmailType = "follow_up"
	EmailTypeUrgentRequest    EmailType = "urgent_request"
	EmailTypePriceNegotiation EmailType = "price_negotiation"
)

type EmailPriority string

const (
	PriorityLow    EmailPriority = "low"
	PriorityNormal EmailPriority = "normal"
	PriorityHigh   EmailPriority = "high"
	PriorityUrgent EmailPriority = "urgent"
)

type PricingStrategy string

const (
	StrategyAggressive     PricingStrategy = "aggressive"      // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞
	StrategyCompetitive    PricingStrategy = "competitive"     // –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è - —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞
	StrategyPremium        PricingStrategy = "premium"         // –ü—Ä–µ–º–∏—É–º - –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞, –∫–∞—á–µ—Å—Ç–≤–æ
	StrategyValue          PricingStrategy = "value"           // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ
)

// üìä –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –°–¢–†–£–ö–¢–£–†–´

type DocumentTable struct {
	Headers []string              `json:"headers"`
	Rows    [][]string           `json:"rows"`
	Title   string               `json:"title"`
	PageNum int                  `json:"page_num"`
	Metadata map[string]interface{} `json:"metadata"`
}

type HistoricalTender struct {
	ID               uint      `json:"id"`
	Title            string    `json:"title"`
	StartPrice       float64   `json:"start_price"`
	WinningPrice     float64   `json:"winning_price"`
	Discount         float64   `json:"discount"`
	ParticipantCount int       `json:"participant_count"`
	CompletedAt      time.Time `json:"completed_at"`
	Region           string    `json:"region"`
	Category         string    `json:"category"`
}

type MarketConditions struct {
	EconomicIndex    float64           `json:"economic_index"`
	SeasonalFactor   float64           `json:"seasonal_factor"`
	CompetitorCount  int               `json:"competitor_count"`
	DemandLevel      string            `json:"demand_level"`
	SupplyLevel      string            `json:"supply_level"`
	RegionalFactors  map[string]float64 `json:"regional_factors"`
}

type CompanyProfile struct {
	Name             string    `json:"name"`
	Experience       int       `json:"experience"`        // –õ–µ—Ç –æ–ø—ã—Ç–∞
	WinRate          float64   `json:"win_rate"`          // –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤
	AverageDiscount  float64   `json:"average_discount"`  // –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞
	Specialization   []string  `json:"specialization"`    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
	Region           []string  `json:"region"`            // –†–µ–≥–∏–æ–Ω—ã —Ä–∞–±–æ—Ç—ã
	CertificateLevel string    `json:"certificate_level"` // –£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
}

type ProductPriceAdvice struct {
	ProductName      string  `json:"product_name"`
	OriginalPrice    float64 `json:"original_price"`
	RecommendedPrice float64 `json:"recommended_price"`
	Discount         float64 `json:"discount"`
	Confidence       float64 `json:"confidence"`
	Reasoning        string  `json:"reasoning"`
}

type PricingAlternative struct {
	Strategy        PricingStrategy `json:"strategy"`
	TotalPrice      float64         `json:"total_price"`
	WinProbability  float64         `json:"win_probability"`
	ProfitMargin    float64         `json:"profit_margin"`
	Description     string          `json:"description"`
	Pros            []string        `json:"pros"`
	Cons            []string        `json:"cons"`
}

type WinningPricePredictionRequest struct {
	TenderID          uint                   `json:"tender_id"`
	StartPrice        float64                `json:"start_price"`
	ProductCategories []product.ProductCategory `json:"product_categories"`
	Region           string                 `json:"region"`
	CompetitorCount  int                    `json:"competitor_count"`
	MarketConditions *MarketConditions      `json:"market_conditions"`
}

type WinningPricePrediction struct {
	PredictedPrice    float64   `json:"predicted_price"`
	PredictedDiscount float64   `json:"predicted_discount"`
	Confidence        float64   `json:"confidence"`
	PriceRange        PriceRange `json:"price_range"`
	Factors           []PriceFactor `json:"factors"`
}

type PriceRange struct {
	Min    float64 `json:"min"`
	Max    float64 `json:"max"`
	Median float64 `json:"median"`
}

type PriceFactor struct {
	Name   string  `json:"name"`
	Impact float64 `json:"impact"`  // –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É (-1 –¥–æ 1)
	Weight float64 `json:"weight"`  // –í–µ—Å —Ñ–∞–∫—Ç–æ—Ä–∞ (0 –¥–æ 1)
}

type PriceOptimizationRequest struct {
	TenderID         uint    `json:"tender_id"`
	TargetMargin     float64 `json:"target_margin"`     // –¶–µ–ª–µ–≤–∞—è –º–∞—Ä–∂–∞
	MaxRisk          float64 `json:"max_risk"`          // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫
	MinWinProbability float64 `json:"min_win_probability"` // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞
}

type PriceOptimizationResult struct {
	OptimalPrice      float64              `json:"optimal_price"`
	OptimalDiscount   float64              `json:"optimal_discount"`
	ExpectedMargin    float64              `json:"expected_margin"`
	WinProbability    float64              `json:"win_probability"`
	RiskScore         float64              `json:"risk_score"`
	OptimizationSteps []OptimizationStep   `json:"optimization_steps"`
}

type OptimizationStep struct {
	Step        string  `json:"step"`
	Price       float64 `json:"price"`
	Probability float64 `json:"probability"`
	Margin      float64 `json:"margin"`
	Reasoning   string  `json:"reasoning"`
}

type CompetitorAnalysis struct {
	TotalCompetitors     int                    `json:"total_competitors"`
	KnownCompetitors     []CompetitorProfile    `json:"known_competitors"`
	AverageWinRate       float64                `json:"average_win_rate"`
	AverageDiscount      float64                `json:"average_discount"`
	CompetitionIntensity CompetitionLevel       `json:"competition_intensity"`
	ThreatLevel          string                 `json:"threat_level"`
	Recommendations      []string               `json:"recommendations"`
}

type CompetitorProfile struct {
	Name         string  `json:"name"`
	WinRate      float64 `json:"win_rate"`
	AverageDiscount float64 `json:"average_discount"`
	Specialization []string `json:"specialization"`
	LastActivity time.Time `json:"last_activity"`
	ThreatLevel  string   `json:"threat_level"`
}

type SupplierProductMatch struct {
	ProductID     uint    `json:"product_id"`
	SupplierSKU   string  `json:"supplier_sku"`
	MatchScore    float64 `json:"match_score"`
	Price         float64 `json:"price"`
	Available     bool    `json:"available"`
	DeliveryDays  int     `json:"delivery_days"`
	ProductURL    string  `json:"product_url"`
	Confidence    float64 `json:"confidence"`
}

type ProductMatch struct {
	Product    *product.Product `json:"product"`
	MatchScore float64          `json:"match_score"`
	MatchType  string           `json:"match_type"`  // exact, fuzzy, semantic
	Reasoning  string           `json:"reasoning"`
}

type ProductFeatures struct {
	MainFeatures    []Feature `json:"main_features"`
	TechnicalSpecs  []Feature `json:"technical_specs"`
	Keywords        []string  `json:"keywords"`
	Category        product.ProductCategory `json:"category"`
	Confidence      float64   `json:"confidence"`
}

type Feature struct {
	Name  string      `json:"name"`
	Value interface{} `json:"value"`
	Unit  string      `json:"unit"`
	Type  string      `json:"type"`  // numeric, text, boolean, enum
}

type PriceHistoryAnalysis struct {
	AveragePrice      float64         `json:"average_price"`
	PriceRange        PriceRange      `json:"price_range"`
	PriceTrend        string          `json:"price_trend"`    // increasing, decreasing, stable
	SeasonalFactors   []SeasonalFactor `json:"seasonal_factors"`
	RegionalPrices    map[string]float64 `json:"regional_prices"`
	Confidence        float64         `json:"confidence"`
}

type SeasonalFactor struct {
	Month      int     `json:"month"`
	Factor     float64 `json:"factor"`  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
	Confidence float64 `json:"confidence"`
}

type SupplierResponseRequest struct {
	EmailContent    string            `json:"email_content"`
	SupplierID      uint             `json:"supplier_id"`
	OriginalRequest *EmailGenerationRequest `json:"original_request"`
	AttachmentPaths []string         `json:"attachment_paths"`
}

type SupplierResponseAnalysis struct {
	HasOffer           bool              `json:"has_offer"`
	OfferDetails       *OfferDetails     `json:"offer_details"`
	ResponseType       string            `json:"response_type"`    // positive, negative, request_info
	Sentiment          string            `json:"sentiment"`        // positive, neutral, negative
	NextAction         string            `json:"next_action"`      // call, email, wait, negotiate
	ExtractedData      map[string]interface{} `json:"extracted_data"`
	Confidence         float64           `json:"confidence"`
	NeedsHumanReview   bool              `json:"needs_human_review"`
}

type OfferDetails struct {
	Products      []OfferProduct `json:"products"`
	TotalPrice    float64        `json:"total_price"`
	Currency      string         `json:"currency"`
	DeliveryTerms string         `json:"delivery_terms"`
	PaymentTerms  string         `json:"payment_terms"`
	ValidUntil    *time.Time     `json:"valid_until"`
	Notes         string         `json:"notes"`
}

type OfferProduct struct {
	Name         string  `json:"name"`
	Quantity     int     `json:"quantity"`
	UnitPrice    float64 `json:"unit_price"`
	TotalPrice   float64 `json:"total_price"`
	DeliveryDays int     `json:"delivery_days"`
	Availability string  `json:"availability"`
	SKU          string  `json:"sku"`
}

type PersonalizedEmailRequest struct {
	SupplierName     string                 `json:"supplier_name"`
	ContactPerson    string                 `json:"contact_person"`
	SupplierProfile  *SupplierProfile       `json:"supplier_profile"`
	Products         []ExtractedProduct     `json:"products"`
	TenderDeadline   time.Time              `json:"tender_deadline"`
	EmailTemplate    string                 `json:"email_template"`
	PersonalizationData map[string]interface{} `json:"personalization_data"`
}

type SupplierProfile struct {
	CompanySize     string   `json:"company_size"`
	Specialization  []string `json:"specialization"`
	Region          string   `json:"region"`
	PreferredContact string  `json:"preferred_contact"`
	BusinessHours   string   `json:"business_hours"`
	Language        string   `json:"language"`
	PreviousDeals   int      `json:"previous_deals"`
}

type CommercialOfferRequest struct {
	TenderID        uint                   `json:"tender_id"`
	Products        []OfferProduct         `json:"products"`
	CompanyInfo     *CompanyProfile        `json:"company_info"`
	DeliveryTerms   string                 `json:"delivery_terms"`
	PaymentTerms    string                 `json:"payment_terms"`
	ValidityPeriod  int                    `json:"validity_period"`
	SpecialOffers   []string               `json:"special_offers"`
	Template        string                 `json:"template"`
}

// üìù –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –ü–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° LLAMA 4 MAVIRIC:
//
// Llama 4 Maviric - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã:
//
// ‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
// - –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
// - –•–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–∏–∑–Ω–µ—Å-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
// - –°–ø–æ—Å–æ–±–µ–Ω –∫ —Å–ª–æ–∂–Ω–æ–º—É reasoning –∏ –∞–Ω–∞–ª–∏–∑—É
// - –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ (–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å)
// - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
//
// üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:
// 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ollama –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
// 2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
// 3. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
// 4. –î–æ–±–∞–≤—å—Ç–µ fallback –Ω–∞ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
// 5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RAG (Retrieval-Augmented Generation) –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
//
// üìä –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–´ –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø:
// - OpenAI GPT-4 (–æ–±–ª–∞—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
// - Anthropic Claude (—Ö–æ—Ä–æ—à –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
// - Yandex GPT (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å)
// - GigaChat (—Ä–æ—Å—Å–∏–π—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ)