package pipeline

import (
	"context"
	"fmt"
	"sync"
	"time"

	"go.uber.org/zap"
)

// üîÑ PIPELINE ENGINE - –Ø–î–†–û –°–ò–°–¢–ï–ú–´ –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–•
//
// ============================================================================
// –ß–¢–û –¢–ê–ö–û–ï PIPELINE PATTERN:
// ============================================================================
//
// Pipeline Pattern - —ç—Ç–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω, –≥–¥–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑
// –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é
// —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.
//
// –ê–ù–ê–õ–û–ì–ò–Ø: –ö–æ–Ω–≤–µ–π–µ—Ä –Ω–∞ –∑–∞–≤–æ–¥–µ
// - –î–µ—Ç–∞–ª—å –ø–æ—Å—Ç—É–ø–∞–µ—Ç –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä
// - –ö–∞–∂–¥—ã–π —Ä–∞–±–æ—á–∏–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ—é –æ–ø–µ—Ä–∞—Ü–∏—é
// - –î–µ—Ç–∞–ª—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –¥–∞–ª—å—à–µ –ø–æ –∫–æ–Ω–≤–µ–π–µ—Ä—É
// - –í –∫–æ–Ω—Ü–µ –ø–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
//
// ============================================================================
// –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê PIPELINE:
// ============================================================================
//
// 1. üîß –ú–û–î–£–õ–¨–ù–û–°–¢–¨:
//    - –ö–∞–∂–¥—ã–π —à–∞–≥ –Ω–µ–∑–∞–≤–∏—Å–∏–º –∏ —Ä–µ—à–∞–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É
//    - –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å/–ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è—Ç—å —à–∞–≥–∏
//    - –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–∞—Ö
//
// 2. üß™ –¢–ï–°–¢–ò–†–£–ï–ú–û–°–¢–¨:
//    - –ö–∞–∂–¥—ã–π —à–∞–≥ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ
//    - –õ–µ–≥–∫–æ –º–æ–∫–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
//    - –ë—ã—Å—Ç—Ä—ã–µ –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ —Ç–µ—Å—Ç—ã
//
// 3. üîÑ –û–¢–ö–ê–ó–û–£–°–¢–û–ô–ß–ò–í–û–°–¢–¨:
//    - Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
//    - Graceful –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
//    - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞
//
// 4. üìä –ù–ê–ë–õ–Æ–î–ê–ï–ú–û–°–¢–¨:
//    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
//    - –ú–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
//    - –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
//
// ============================================================================
// –ö–û–ú–ü–û–ù–ï–ù–¢–´ PIPELINE ENGINE:
// ============================================================================
//
// - Engine: –û—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫, —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
// - StepHandler: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∞–≥–æ–≤
// - Middleware: –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–µ—Ç—Ä–∏–∫–∏)
// - ErrorHandler: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —Ä–µ—à–µ–Ω–∏—è –æ retry
// - MetricsCollector: –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
//
// ============================================================================

// Engine –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–≤–∏–∂–æ–∫ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤
//
// –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò:
// - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞–º–∏
// - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
// - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ retry –ª–æ–≥–∏–∫–∞
// - –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
// - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –æ—Ç–º–µ–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–π
type Engine struct {
	logger        *zap.Logger
	stepRegistry  map[string]StepHandler
	middleware    []Middleware
	errorHandler  ErrorHandler
	metrics       MetricsCollector
	config        Config
	mu            sync.RWMutex
}

// StepHandler –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —à–∞–≥–æ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞
type StepHandler interface {
	// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç —à–∞–≥ –ø–∞–π–ø–ª–∞–π–Ω–∞
	Execute(ctx context.Context, data *StepData) (*StepResult, error)
	
	// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞
	Name() string
	
	// Validate –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	Validate(data *StepData) error
	
	// Timeout –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	Timeout() time.Duration
	
	// Dependencies –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —à–∞–≥–∞
	Dependencies() []string
	
	// CanRetry –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —à–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
	CanRetry(err error) bool
}

// Middleware –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –ü–û
type Middleware interface {
	// Before –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ —à–∞–≥–æ–º
	Before(ctx context.Context, step string, data *StepData) error
	
	// After –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —à–∞–≥–∞
	After(ctx context.Context, step string, result *StepResult) error
	
	// OnError –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
	OnError(ctx context.Context, step string, err error) error
}

// ErrorHandler –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
type ErrorHandler interface {
	// Handle –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
	Handle(ctx context.Context, step string, err error) error
	
	// ShouldRetry –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —à–∞–≥
	ShouldRetry(err error) bool
	
	// ShouldContinue –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∞–π–ø–ª–∞–π–Ω
	ShouldContinue(err error) bool
}

// MetricsCollector –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
type MetricsCollector interface {
	// RecordStepDuration –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
	RecordStepDuration(step string, duration time.Duration)
	
	// RecordStepSuccess –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞
	RecordStepSuccess(step string)
	
	// RecordStepError –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —à–∞–≥–∞
	RecordStepError(step string, err error)
	
	// RecordPipelineDuration –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
	RecordPipelineDuration(pipeline string, duration time.Duration)
}

// üìä –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•

// StepData –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
type StepData struct {
	// ID —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	ID string `json:"id"`
	
	// Step –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞
	Step string `json:"step"`
	
	// Input –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	Input map[string]interface{} `json:"input"`
	
	// Context –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	Context map[string]interface{} `json:"context"`
	
	// Metadata –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
	Metadata map[string]string `json:"metadata"`
	
	// StartedAt –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
	StartedAt time.Time `json:"started_at"`
}

// StepResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
type StepResult struct {
	// Step –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞
	Step string `json:"step"`
	
	// Success —É—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥
	Success bool `json:"success"`
	
	// Output –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	Output map[string]interface{} `json:"output"`
	
	// Duration –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	Duration time.Duration `json:"duration"`
	
	// StartedAt –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
	StartedAt time.Time `json:"started_at"`
	
	// CompletedAt –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	CompletedAt time.Time `json:"completed_at"`
	
	// Error –æ—à–∏–±–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	Error error `json:"error,omitempty"`
	
	// Retryable –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
	Retryable bool `json:"retryable"`
	
	// Metadata –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	Metadata map[string]string `json:"metadata"`
}

// PipelineDefinition –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
type PipelineDefinition struct {
	// Name –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
	Name string `json:"name"`
	
	// Description –æ–ø–∏—Å–∞–Ω–∏–µ
	Description string `json:"description"`
	
	// Steps —à–∞–≥–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	Steps []string `json:"steps"`
	
	// Parallel –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ (–≥—Ä—É–ø–ø—ã)
	Parallel [][]string `json:"parallel,omitempty"`
	
	// Conditional —É—Å–ª–æ–≤–Ω—ã–µ —à–∞–≥–∏
	Conditional map[string]Condition `json:"conditional,omitempty"`
	
	// Timeout –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞
	Timeout time.Duration `json:"timeout"`
	
	// Retry –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤
	Retry RetryConfig `json:"retry"`
	
	// Metadata –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
	Metadata map[string]string `json:"metadata"`
}

// Condition —É—Å–ª–æ–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
type Condition struct {
	// Field –ø–æ–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	Field string `json:"field"`
	
	// Operator –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
	Operator string `json:"operator"` // eq, ne, gt, lt, contains, exists
	
	// Value –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
	Value interface{} `json:"value"`
	
	// Logic –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π
	Logic string `json:"logic,omitempty"` // and, or
	
	// Nested –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
	Nested []Condition `json:"nested,omitempty"`
}

// RetryConfig –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤
type RetryConfig struct {
	// MaxAttempts –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
	MaxAttempts int `json:"max_attempts"`
	
	// BaseDelay –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
	BaseDelay time.Duration `json:"base_delay"`
	
	// MaxDelay –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
	MaxDelay time.Duration `json:"max_delay"`
	
	// Multiplier –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ backoff
	Multiplier float64 `json:"multiplier"`
	
	// Jitter –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
	Jitter bool `json:"jitter"`
}

// ExecutionContext –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
type ExecutionContext struct {
	// ID –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	ID string `json:"id"`
	
	// Pipeline –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
	Pipeline PipelineDefinition `json:"pipeline"`
	
	// StartedAt –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
	StartedAt time.Time `json:"started_at"`
	
	// CompletedAt –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	
	// CurrentStep —Ç–µ–∫—É—â–∏–π —à–∞–≥
	CurrentStep string `json:"current_step"`
	
	// CompletedSteps –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —à–∞–≥–∏
	CompletedSteps []string `json:"completed_steps"`
	
	// Results —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —à–∞–≥–æ–≤
	Results map[string]*StepResult `json:"results"`
	
	// GlobalData –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
	GlobalData map[string]interface{} `json:"global_data"`
	
	// Status —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	Status ExecutionStatus `json:"status"`
	
	// Error –æ–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞
	Error error `json:"error,omitempty"`
}

// ExecutionStatus —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
type ExecutionStatus string

const (
	StatusPending    ExecutionStatus = "pending"
	StatusRunning    ExecutionStatus = "running"
	StatusCompleted  ExecutionStatus = "completed"
	StatusFailed     ExecutionStatus = "failed"
	StatusCancelled  ExecutionStatus = "cancelled"
)

// Config –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
type Config struct {
	// MaxConcurrentPipelines –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤
	MaxConcurrentPipelines int `json:"max_concurrent_pipelines"`
	
	// DefaultTimeout —Ç–∞–π–º–∞—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	DefaultTimeout time.Duration `json:"default_timeout"`
	
	// EnableMetrics –≤–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
	EnableMetrics bool `json:"enable_metrics"`
	
	// EnableTracing –≤–∫–ª—é—á–∏—Ç—å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
	EnableTracing bool `json:"enable_tracing"`
	
	// RetryConfig –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	RetryConfig RetryConfig `json:"retry_config"`
	
	// BufferSize —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
	BufferSize int `json:"buffer_size"`
}

// üèóÔ∏è –ö–û–ù–°–¢–†–£–ö–¢–û–†

// NewEngine —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤
func NewEngine(logger *zap.Logger, config Config) *Engine {
	return &Engine{
		logger:       logger,
		stepRegistry: make(map[string]StepHandler),
		middleware:   make([]Middleware, 0),
		config:       config,
	}
}

// üìù –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í

// RegisterStep —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞
func (e *Engine) RegisterStep(name string, handler StepHandler) error {
	e.mu.Lock()
	defer e.mu.Unlock()
	
	if _, exists := e.stepRegistry[name]; exists {
		return fmt.Errorf("step %s already registered", name)
	}
	
	e.stepRegistry[name] = handler
	e.logger.Info("Registered pipeline step", zap.String("step", name))
	return nil
}

// RegisterMiddleware —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ü–û
func (e *Engine) RegisterMiddleware(middleware Middleware) {
	e.mu.Lock()
	defer e.mu.Unlock()
	
	e.middleware = append(e.middleware, middleware)
	e.logger.Info("Registered pipeline middleware")
}

// SetErrorHandler —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
func (e *Engine) SetErrorHandler(handler ErrorHandler) {
	e.mu.Lock()
	defer e.mu.Unlock()
	
	e.errorHandler = handler
	e.logger.Info("Set error handler")
}

// SetMetricsCollector —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫
func (e *Engine) SetMetricsCollector(collector MetricsCollector) {
	e.mu.Lock()
	defer e.mu.Unlock()
	
	e.metrics = collector
	e.logger.Info("Set metrics collector")
}

// üöÄ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–ê–ô–ü–õ–ê–ô–ù–û–í

// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω
func (e *Engine) Execute(ctx context.Context, definition PipelineDefinition, initialData map[string]interface{}) (*ExecutionContext, error) {
	e.logger.Info("Starting pipeline execution", 
		zap.String("pipeline", definition.Name))
	
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	execCtx := &ExecutionContext{
		ID:             generateID(),
		Pipeline:       definition,
		StartedAt:      time.Now(),
		CurrentStep:    "",
		CompletedSteps: make([]string, 0),
		Results:        make(map[string]*StepResult),
		GlobalData:     initialData,
		Status:         StatusRunning,
	}
	
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	timeout := definition.Timeout
	if timeout == 0 {
		timeout = e.config.DefaultTimeout
	}
	
	ctxWithTimeout, cancel := context.WithTimeout(ctx, timeout)
	defer cancel()
	
	// –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–π–ø–ª–∞–π–Ω
	startTime := time.Now()
	err := e.executePipeline(ctxWithTimeout, execCtx)
	duration := time.Since(startTime)
	
	// –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
	now := time.Now()
	execCtx.CompletedAt = &now
	
	if err != nil {
		execCtx.Status = StatusFailed
		execCtx.Error = err
		e.logger.Error("Pipeline execution failed",
			zap.String("pipeline", definition.Name),
			zap.Error(err),
			zap.Duration("duration", duration))
	} else {
		execCtx.Status = StatusCompleted
		e.logger.Info("Pipeline execution completed",
			zap.String("pipeline", definition.Name),
			zap.Duration("duration", duration))
	}
	
	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
	if e.metrics != nil {
		e.metrics.RecordPipelineDuration(definition.Name, duration)
	}
	
	return execCtx, err
}

// executePipeline –≤—ã–ø–æ–ª–Ω—è–µ—Ç —à–∞–≥–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞
func (e *Engine) executePipeline(ctx context.Context, execCtx *ExecutionContext) error {
	// –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
	for _, step := range execCtx.Pipeline.Steps {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
		if !e.shouldExecuteStep(step, execCtx) {
			e.logger.Debug("Skipping step due to condition",
				zap.String("step", step))
			continue
		}
		
		// –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥
		execCtx.CurrentStep = step
		result, err := e.executeStep(ctx, step, execCtx)
		
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		execCtx.Results[step] = result
		
		if err != nil {
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
			if e.errorHandler != nil {
				if handleErr := e.errorHandler.Handle(ctx, step, err); handleErr != nil {
					e.logger.Error("Error handler failed", zap.Error(handleErr))
				}
				
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
				if !e.errorHandler.ShouldContinue(err) {
					return fmt.Errorf("pipeline stopped at step %s: %w", step, err)
				}
			} else {
				return fmt.Errorf("step %s failed: %w", step, err)
			}
		}
		
		// –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —à–∞–≥–∏
		execCtx.CompletedSteps = append(execCtx.CompletedSteps, step)
		
		// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
		e.updateGlobalData(execCtx, result)
	}
	
	return nil
}

// executeStep –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–≥
func (e *Engine) executeStep(ctx context.Context, stepName string, execCtx *ExecutionContext) (*StepResult, error) {
	e.logger.Debug("Executing step", zap.String("step", stepName))
	
	// –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞
	e.mu.RLock()
	handler, exists := e.stepRegistry[stepName]
	e.mu.RUnlock()
	
	if !exists {
		return nil, fmt.Errorf("step handler not found: %s", stepName)
	}
	
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–≥–∞
	stepData := &StepData{
		ID:        generateID(),
		Step:      stepName,
		Input:     e.prepareStepInput(stepName, execCtx),
		Context:   execCtx.GlobalData,
		Metadata:  execCtx.Pipeline.Metadata,
		StartedAt: time.Now(),
	}
	
	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	if err := handler.Validate(stepData); err != nil {
		return &StepResult{
			Step:        stepName,
			Success:     false,
			StartedAt:   stepData.StartedAt,
			CompletedAt: time.Now(),
			Error:       fmt.Errorf("validation failed: %w", err),
		}, err
	}
	
	// –í—ã–ø–æ–ª–Ω—è–µ–º middleware Before
	for _, mw := range e.middleware {
		if err := mw.Before(ctx, stepName, stepData); err != nil {
			return nil, fmt.Errorf("middleware before failed: %w", err)
		}
	}
	
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è —à–∞–≥–∞
	stepTimeout := handler.Timeout()
	if stepTimeout == 0 {
		stepTimeout = e.config.DefaultTimeout
	}
	
	ctxWithTimeout, cancel := context.WithTimeout(ctx, stepTimeout)
	defer cancel()
	
	// –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
	var result *StepResult
	var err error
	
	retryConfig := execCtx.Pipeline.Retry
	if retryConfig.MaxAttempts == 0 {
		retryConfig = e.config.RetryConfig
	}
	
	for attempt := 1; attempt <= retryConfig.MaxAttempts; attempt++ {
		startTime := time.Now()
		result, err = handler.Execute(ctxWithTimeout, stepData)
		duration := time.Since(startTime)
		
		if result == nil {
			result = &StepResult{
				Step:        stepName,
				Success:     err == nil,
				StartedAt:   startTime,
				CompletedAt: time.Now(),
				Duration:    duration,
				Error:       err,
			}
		}
		
		// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
		if e.metrics != nil {
			e.metrics.RecordStepDuration(stepName, duration)
			if err == nil {
				e.metrics.RecordStepSuccess(stepName)
			} else {
				e.metrics.RecordStepError(stepName, err)
			}
		}
		
		// –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –Ω–µ–ª—å–∑—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å - –≤—ã—Ö–æ–¥–∏–º
		if err == nil || !handler.CanRetry(err) || attempt == retryConfig.MaxAttempts {
			break
		}
		
		// –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
		delay := e.calculateRetryDelay(attempt, retryConfig)
		e.logger.Warn("Retrying step",
			zap.String("step", stepName),
			zap.Int("attempt", attempt),
			zap.Duration("delay", delay),
			zap.Error(err))
		
		timer := time.NewTimer(delay)
		select {
		case <-ctxWithTimeout.Done():
			timer.Stop()
			return result, ctxWithTimeout.Err()
		case <-timer.C:
		}
	}
	
	// –í—ã–ø–æ–ª–Ω—è–µ–º middleware After
	for _, mw := range e.middleware {
		if mwErr := mw.After(ctx, stepName, result); mwErr != nil {
			e.logger.Error("Middleware after failed", zap.Error(mwErr))
		}
	}
	
	// –í—ã–ø–æ–ª–Ω—è–µ–º middleware OnError –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
	if err != nil {
		for _, mw := range e.middleware {
			if mwErr := mw.OnError(ctx, stepName, err); mwErr != nil {
				e.logger.Error("Middleware onError failed", zap.Error(mwErr))
			}
		}
	}
	
	return result, err
}

// üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´

// shouldExecuteStep –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥
func (e *Engine) shouldExecuteStep(step string, execCtx *ExecutionContext) bool {
	condition, exists := execCtx.Pipeline.Conditional[step]
	if !exists {
		return true
	}
	
	return e.evaluateCondition(condition, execCtx)
}

// evaluateCondition –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ
func (e *Engine) evaluateCondition(condition Condition, execCtx *ExecutionContext) bool {
	// –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
	fieldValue := e.getFieldValue(condition.Field, execCtx)
	
	// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —É—Å–ª–æ–≤–∏–µ–º
	result := e.compareValues(fieldValue, condition.Operator, condition.Value)
	
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
	if len(condition.Nested) > 0 {
		nestedResults := make([]bool, len(condition.Nested))
		for i, nested := range condition.Nested {
			nestedResults[i] = e.evaluateCondition(nested, execCtx)
		}
		
		// –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
		switch condition.Logic {
		case "and":
			for _, nr := range nestedResults {
				result = result && nr
			}
		case "or":
			for _, nr := range nestedResults {
				result = result || nr
			}
		}
	}
	
	return result
}

// getFieldValue –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
func (e *Engine) getFieldValue(field string, execCtx *ExecutionContext) interface{} {
	// –ü–æ–∏—Å–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if val, exists := execCtx.GlobalData[field]; exists {
		return val
	}
	
	// –ü–æ–∏—Å–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —à–∞–≥–æ–≤
	for _, result := range execCtx.Results {
		if val, exists := result.Output[field]; exists {
			return val
		}
	}
	
	return nil
}

// compareValues —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
func (e *Engine) compareValues(fieldValue interface{}, operator string, conditionValue interface{}) bool {
	switch operator {
	case "eq":
		return fieldValue == conditionValue
	case "ne":
		return fieldValue != conditionValue
	case "exists":
		return fieldValue != nil
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
	default:
		return false
	}
}

// prepareStepInput –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–≥–∞
func (e *Engine) prepareStepInput(stepName string, execCtx *ExecutionContext) map[string]interface{} {
	input := make(map[string]interface{})
	
	// –ö–æ–ø–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	for k, v := range execCtx.GlobalData {
		input[k] = v
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
	for stepName, result := range execCtx.Results {
		for k, v := range result.Output {
			input[fmt.Sprintf("%s.%s", stepName, k)] = v
		}
	}
	
	return input
}

// updateGlobalData –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —à–∞–≥–∞
func (e *Engine) updateGlobalData(execCtx *ExecutionContext, result *StepResult) {
	if result != nil && result.Output != nil {
		for k, v := range result.Output {
			execCtx.GlobalData[k] = v
		}
	}
}

// calculateRetryDelay –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
func (e *Engine) calculateRetryDelay(attempt int, config RetryConfig) time.Duration {
	delay := config.BaseDelay
	
	// –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff
	for i := 1; i < attempt; i++ {
		delay = time.Duration(float64(delay) * config.Multiplier)
		if delay > config.MaxDelay {
			delay = config.MaxDelay
			break
		}
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º jitter –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if config.Jitter {
		jitter := time.Duration(float64(delay) * 0.1) // 10% jitter
		delay += time.Duration(int64(jitter) * (int64(time.Now().UnixNano()) % 2 - 1))
	}
	
	return delay
}

// generateID –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
func generateID() string {
	return fmt.Sprintf("%d", time.Now().UnixNano())
}