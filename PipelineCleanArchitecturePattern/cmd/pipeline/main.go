package main

import (
	"context"
	"log"
	"time"

	// –ò–ú–ü–û–†–¢–´ –ü–û –°–õ–û–Ø–ú CLEAN ARCHITECTURE:
	
	// APPLICATION LAYER - —à–∞–≥–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—Ç –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã
	"pipeline-clean-architecture/internal/application/pipeline"
	
	// DOMAIN LAYER - –¥–æ–º–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ —Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π (–ù–ï –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º)
	"pipeline-clean-architecture/internal/domain/order"
	"pipeline-clean-architecture/internal/domain/payment"
	
	// PKG LAYER - –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (Pipeline Engine)
	pipelineEngine "pipeline-clean-architecture/pkg/pipeline"

	// –í–ù–ï–®–ù–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò
	"github.com/google/uuid"
	"go.uber.org/zap"
	"errors"
)

// üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø PIPELINE CLEAN ARCHITECTURE
// 
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
// –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ Clean Architecture + Pipeline Pattern
//
// –ü–û–¢–û–ö –í–´–ü–û–õ–ù–ï–ù–ò–Ø:
// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–ª–æ–≥–≥–µ—Ä, —Å–µ—Ä–≤–∏—Å—ã-–º–æ–∫–∏)
// 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Pipeline Engine
// 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à–∞–≥–æ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞ 
// 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
// 5. –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
// 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
//
// –ü–†–ò–ù–¶–ò–ü–´ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò:
// - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –≤—Å–µ —Å–ª–æ–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
// - –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–µ—Ä—Å–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (DI)
// - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ –∫–∞–∂–¥—ã–π —à–∞–≥ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ–º–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
// - –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

func main() {
	// ================================================
	// –≠–¢–ê–ü 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´
	// ================================================
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä (zap)
	// –í production –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞/env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	logger, err := zap.NewDevelopment()
	if err != nil {
		log.Fatalf("Failed to initialize logger: %v", err)
	}
	defer logger.Sync()

	logger.Info("üöÄ Starting Pipeline Clean Architecture Demo")

	// ================================================
	// –≠–¢–ê–ü 2: DEPENDENCY INJECTION - –°–û–ó–î–ê–ù–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
	// ================================================
	//
	// –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–≤–∞–ª –±—ã:
	// - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL/MongoDB
	// - HTTP –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö API
	// - Redis –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
	// - Kafka/RabbitMQ –¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π
	//
	// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–∏—Ç–∏—Ä—É—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	
	// INFRASTRUCTURE LAYER - –º–æ–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	// –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—ã–ª–∏ –±—ã PostgreSQLOrderRepository, StripePaymentService –∏ —Ç.–¥.
	orderRepo := &MockOrderRepository{}                // –ò–º–∏—Ç–∞—Ü–∏—è PostgreSQL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	productService := &MockProductService{}            // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
	paymentService := &MockPaymentService{}            // –ò–º–∏—Ç–∞—Ü–∏—è Stripe/PayPal API
	inventoryService := &MockInventoryService{}        // –ò–º–∏—Ç–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º
	notificationService := &MockNotificationService{}  // –ò–º–∏—Ç–∞—Ü–∏—è email/SMS —Å–µ—Ä–≤–∏—Å–æ–≤

	// ================================================
	// –≠–¢–ê–ü 3: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø PIPELINE ENGINE
	// ================================================
	//
	// Pipeline Engine - —ç—Ç–æ —è–¥—Ä–æ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä–æ–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —à–∞–≥–æ–≤
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–≤–∏–∂–∫–∞:
	
	config := pipelineEngine.Config{
		MaxConcurrentPipelines: 10,               // –°–∫–æ–ª—å–∫–æ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
		DefaultTimeout:         5 * time.Minute,  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
		EnableMetrics:          true,             // –í–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ (Prometheus)
		EnableTracing:          true,             // –í–∫–ª—é—á–∏—Ç—å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		RetryConfig: pipelineEngine.RetryConfig{  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
			MaxAttempts: 3,                       // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
			BaseDelay:   time.Second,             // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫
			MaxDelay:    30 * time.Second,        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 30 —Å–µ–∫
			Multiplier:  2.0,                     // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff (1s, 2s, 4s...)
			Jitter:      true,                    // –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è thundering herd
		},
		BufferSize: 100,                          // –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
	}

	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Pipeline Engine
	// –≠—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–≥–æ–≤
	engine := pipelineEngine.NewEngine(logger, config)

	// ================================================
	// –≠–¢–ê–ü 4: –°–û–ó–î–ê–ù–ò–ï –ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –®–ê–ì–û–í –ü–ê–ô–ü–õ–ê–ô–ù–ê
	// ================================================
	//
	// –ö–∞–∂–¥—ã–π —à–∞–≥ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É.
	// –®–∞–≥–∏ —Ä–µ–∞–ª–∏–∑—É—é—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å StepHandler –∏ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ.
	//
	// –ü–†–ò–ù–¶–ò–ü DEPENDENCY INJECTION:
	// –ö–∞–∂–¥—ã–π —à–∞–≥ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ–º—É –Ω—É–∂–Ω—ã.
	// –≠—Ç–æ –¥–µ–ª–∞–µ—Ç —à–∞–≥–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–º–∏ –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏.
	
	// –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞
	// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –ª–æ–≥–≥–µ—Ä + —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–∫–∞–∑–æ–≤ + —Å–µ—Ä–≤–∏—Å –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
	// –ß—Ç–æ –¥–µ–ª–∞–µ—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞, –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω
	validateStep := pipeline.NewValidateOrderStep(logger, orderRepo, productService)
	
	// –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞  
	// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –ª–æ–≥–≥–µ—Ä + —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–∫–∞–∑–æ–≤ + –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å
	// –ß—Ç–æ –¥–µ–ª–∞–µ—Ç: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å (Stripe/PayPal)
	paymentStep := pipeline.NewProcessPaymentStep(logger, orderRepo, paymentService)
	
	// –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥–∞
	// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –ª–æ–≥–≥–µ—Ä + —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–∫–∞–∑–æ–≤ + —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º
	// –ß—Ç–æ –¥–µ–ª–∞–µ—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç –∏—Ö
	inventoryStep := pipeline.NewCheckInventoryStep(logger, orderRepo, inventoryService)
	
	// –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –ª–æ–≥–≥–µ—Ä + —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	// –ß—Ç–æ –¥–µ–ª–∞–µ—Ç: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email/SMS –∫–ª–∏–µ–Ω—Ç—É –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
	notificationStep := pipeline.NewSendNotificationsStep(logger, notificationService)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —à–∞–≥–∏ –≤ Pipeline Engine
	// –î–≤–∏–∂–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∏–º–µ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–æ–≤
	
	if err := engine.RegisterStep("validate_order", validateStep); err != nil {
		logger.Fatal("Failed to register validate step", zap.Error(err))
	}

	if err := engine.RegisterStep("process_payment", paymentStep); err != nil {
		logger.Fatal("Failed to register payment step", zap.Error(err))
	}

	if err := engine.RegisterStep("check_inventory", inventoryStep); err != nil {
		logger.Fatal("Failed to register inventory step", zap.Error(err))
	}

	if err := engine.RegisterStep("send_notifications", notificationStep); err != nil {
		logger.Fatal("Failed to register notification step", zap.Error(err))
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	testOrderID := uuid.New()
	testOrder := createTestOrder(testOrderID)
	orderRepo.orders[testOrderID] = testOrder

	logger.Info("üìã Created test order", 
		zap.String("order_id", testOrderID.String()),
		zap.String("customer_id", testOrder.CustomerID().String()),
		zap.Int("items_count", len(testOrder.Items())),
		zap.String("total_amount", testOrder.TotalAmount().String()))

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
	pipelineDefinition := pipelineEngine.PipelineDefinition{
		Name:        "order_processing",
		Description: "–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ e-commerce –∑–∞–∫–∞–∑–∞",
		Steps: []string{
			"validate_order",
			"process_payment", 
			"check_inventory",
			"send_notifications",
		},
		Timeout: 10 * time.Minute,
		Retry: pipelineEngine.RetryConfig{
			MaxAttempts: 3,
			BaseDelay:   2 * time.Second,
			MaxDelay:    30 * time.Second,
			Multiplier:  2.0,
			Jitter:      true,
		},
		Metadata: map[string]string{
			"version":     "1.0",
			"environment": "demo",
			"owner":       "order_processing_team",
		},
	}

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞
	initialData := map[string]interface{}{
		"order_id": testOrderID.String(),
	}

	logger.Info("üîÑ Starting pipeline execution",
		zap.String("pipeline", pipelineDefinition.Name),
		zap.Strings("steps", pipelineDefinition.Steps))

	// –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–π–ø–ª–∞–π–Ω
	ctx := context.Background()
	executionContext, err := engine.Execute(ctx, pipelineDefinition, initialData)

	if err != nil {
		logger.Error("‚ùå Pipeline execution failed", 
			zap.Error(err),
			zap.String("status", string(executionContext.Status)))
		
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
		displayResults(logger, executionContext)
		return
	}

	logger.Info("‚úÖ Pipeline execution completed successfully!",
		zap.String("status", string(executionContext.Status)),
		zap.Duration("total_duration", time.Since(executionContext.StartedAt)),
		zap.Int("completed_steps", len(executionContext.CompletedSteps)))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	displayResults(logger, executionContext)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞
	finalOrder, _ := orderRepo.GetByID(ctx, testOrderID)
	logger.Info("üì¶ Final order status",
		zap.String("order_id", testOrderID.String()),
		zap.String("status", finalOrder.Status().String()),
		zap.String("total_amount", finalOrder.TotalAmount().String()))

	logger.Info("üéâ Demo completed successfully!")
}

// displayResults –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
func displayResults(logger *zap.Logger, execCtx *pipelineEngine.ExecutionContext) {
	logger.Info("üìä Pipeline Execution Results",
		zap.String("execution_id", execCtx.ID),
		zap.String("pipeline", execCtx.Pipeline.Name),
		zap.String("status", string(execCtx.Status)),
		zap.Time("started_at", execCtx.StartedAt))

	if execCtx.CompletedAt != nil {
		logger.Info("‚è±Ô∏è Timing Information",
			zap.Duration("total_duration", execCtx.CompletedAt.Sub(execCtx.StartedAt)),
			zap.Time("completed_at", *execCtx.CompletedAt))
	}

	logger.Info("üîÑ Completed Steps",
		zap.Strings("steps", execCtx.CompletedSteps),
		zap.Int("count", len(execCtx.CompletedSteps)))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
	for stepName, result := range execCtx.Results {
		stepLogger := logger.With(zap.String("step", stepName))
		
		if result.Success {
			stepLogger.Info("‚úÖ Step completed successfully",
				zap.Duration("duration", result.Duration),
				zap.Any("output", result.Output))
		} else {
			stepLogger.Error("‚ùå Step failed",
				zap.Duration("duration", result.Duration),
				zap.Error(result.Error),
				zap.Bool("retryable", result.Retryable))
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —à–∞–≥–∞
		if len(result.Metadata) > 0 {
			stepLogger.Info("üìã Step metadata", zap.Any("metadata", result.Metadata))
		}
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	if len(execCtx.GlobalData) > 0 {
		logger.Info("üåê Global Data", zap.Any("data", execCtx.GlobalData))
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–∞–π–ø–ª–∞–π–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
	if execCtx.Error != nil {
		logger.Error("üí• Pipeline Error", zap.Error(execCtx.Error))
	}
}

// createTestOrder —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
func createTestOrder(orderID uuid.UUID) *order.Order {
	customerID := uuid.New()
	
	// –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
	items := []order.OrderItem{
		createOrderItem(uuid.New(), 2, 150000), // –¢–æ–≤–∞—Ä 1: 2 —à—Ç –ø–æ 1500 —Ä—É–±
		createOrderItem(uuid.New(), 1, 75000),  // –¢–æ–≤–∞—Ä 2: 1 —à—Ç –ø–æ 750 —Ä—É–±
	}

	// –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
	shippingAddress := order.Address{
		Street:     "—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123, –∫–≤. 45",
		City:       "–ú–æ—Å–∫–≤–∞", 
		PostalCode: "123456",
		Country:    "–†–æ—Å—Å–∏—è",
		Phone:      "+7 (900) 123-45-67",
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
	testOrder, err := order.NewOrder(customerID, items, shippingAddress)
	if err != nil {
		log.Fatalf("Failed to create test order: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
	testOrder.SetPriority(order.PriorityNormal)
	testOrder.SetNotes("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞")

	return testOrder
}

// createOrderItem —Å–æ–∑–¥–∞–µ—Ç —Ç–æ–≤–∞—Ä –∑–∞–∫–∞–∑–∞ (—Ö–µ–ª–ø–µ—Ä —Ñ—É–Ω–∫—Ü–∏—è)
func createOrderItem(productID uuid.UUID, quantity int, priceKopecks int64) order.OrderItem {
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—ã–ª–æ –±—ã —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
	// –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º reflection –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –ø–æ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ!)
	money := order.Money{Amount: priceKopecks, Currency: "RUB"}
	
	return order.OrderItem{
		ProductID: productID,
		Quantity:  quantity,
		UnitPrice: money,
		Discount:  order.Money{Amount: 0, Currency: "RUB"},
	}
}

// üîß MOCK –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –°–ï–†–í–ò–°–û–í –î–õ–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò

// MockOrderRepository –º–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
type MockOrderRepository struct {
	orders map[uuid.UUID]*order.Order
}

func (r *MockOrderRepository) Save(ctx context.Context, ord *order.Order) error {
	if r.orders == nil {
		r.orders = make(map[uuid.UUID]*order.Order)
	}
	r.orders[ord.ID()] = ord
	return nil
}

func (r *MockOrderRepository) GetByID(ctx context.Context, id uuid.UUID) (*order.Order, error) {
	if r.orders == nil {
		r.orders = make(map[uuid.UUID]*order.Order)
	}
	
	ord, exists := r.orders[id]
	if !exists {
		return nil, errors.New("order not found")
	}
	return ord, nil
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–º–æ)
func (r *MockOrderRepository) GetByCustomerID(ctx context.Context, customerID uuid.UUID) ([]*order.Order, error) {
	return nil, errors.New("not implemented")
}

func (r *MockOrderRepository) Delete(ctx context.Context, id uuid.UUID) error {
	return errors.New("not implemented") 
}

func (r *MockOrderRepository) GetByStatus(ctx context.Context, status order.Status) ([]*order.Order, error) {
	return nil, errors.New("not implemented")
}

func (r *MockOrderRepository) GetByStatusAndPriority(ctx context.Context, status order.Status, priority order.Priority) ([]*order.Order, error) {
	return nil, errors.New("not implemented")
}

func (r *MockOrderRepository) GetPendingOrders(ctx context.Context) ([]*order.Order, error) {
	return nil, errors.New("not implemented")
}

func (r *MockOrderRepository) GetActiveOrders(ctx context.Context) ([]*order.Order, error) {
	return nil, errors.New("not implemented")
}

func (r *MockOrderRepository) GetOrdersInDateRange(ctx context.Context, from, to time.Time) ([]*order.Order, error) {
	return nil, errors.New("not implemented")
}

func (r *MockOrderRepository) CountByStatus(ctx context.Context) (map[order.Status]int, error) {
	return nil, errors.New("not implemented")
}

func (r *MockOrderRepository) GetTotalRevenueByPeriod(ctx context.Context, from, to time.Time) (order.Money, error) {
	return order.Money{}, errors.New("not implemented")
}

func (r *MockOrderRepository) SaveBatch(ctx context.Context, orders []*order.Order) error {
	return errors.New("not implemented")
}

func (r *MockOrderRepository) UpdateStatusBatch(ctx context.Context, orderIDs []uuid.UUID, newStatus order.Status) error {
	return errors.New("not implemented")
}

// MockProductService –º–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤
type MockProductService struct{}

func (s *MockProductService) CheckProductAvailability(ctx context.Context, productID uuid.UUID, quantity int) (bool, error) {
	// –î–ª—è –¥–µ–º–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
	return true, nil
}

func (s *MockProductService) GetProductPrice(ctx context.Context, productID uuid.UUID) (order.Money, error) {
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –¥–µ–º–æ
	return order.Money{Amount: 150000, Currency: "RUB"}, nil
}

// MockPaymentService –º–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π
type MockPaymentService struct{}

func (s *MockPaymentService) ProcessPayment(ctx context.Context, orderID uuid.UUID, method payment.Method) (*payment.Payment, error) {
	// –°–æ–∑–¥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –¥–µ–º–æ
	pmt, err := payment.NewPayment(orderID, uuid.New(), 
		payment.Money{Amount: 375000, Currency: "RUB"}, 
		method, 
		payment.ProviderSberbank)
	
	if err != nil {
		return nil, err
	}

	// –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
	pmt.MarkAsProcessing()
	pmt.MarkAsSucceeded("payment_ext_123456")
	
	return pmt, nil
}

func (s *MockPaymentService) ValidatePaymentMethod(method payment.Method) error {
	// –î–ª—è –¥–µ–º–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã
	return nil
}

// MockInventoryService –º–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ —Å–∫–ª–∞–¥–∞
type MockInventoryService struct{}

func (s *MockInventoryService) CheckAvailability(ctx context.Context, productID uuid.UUID, quantity int) (bool, error) {
	// –î–ª—è –¥–µ–º–æ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏
	return true, nil
}

func (s *MockInventoryService) ReserveItems(ctx context.Context, items []pipeline.ReservationItem) (*pipeline.Reservation, error) {
	// –°–æ–∑–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
	return &pipeline.Reservation{
		ID:        uuid.New(),
		Items:     items,
		ExpiresAt: time.Now().Add(24 * time.Hour),
	}, nil
}

func (s *MockInventoryService) ReleaseReservation(ctx context.Context, reservationID uuid.UUID) error {
	// –î–ª—è –¥–µ–º–æ –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–æ
	return nil
}

// MockNotificationService –º–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
type MockNotificationService struct{}

func (s *MockNotificationService) SendEmail(ctx context.Context, to, subject, body string) error {
	// –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email
	log.Printf("üìß EMAIL SENT to %s: %s", to, subject)
	return nil
}

func (s *MockNotificationService) SendSMS(ctx context.Context, phone, message string) error {
	// –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É SMS
	log.Printf("üì± SMS SENT to %s: %s", phone, message)
	return nil
}

func (s *MockNotificationService) SendPushNotification(ctx context.Context, userID uuid.UUID, title, body string) error {
	// –ò–º–∏—Ç–∏—Ä—É–µ–º push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	log.Printf("üîî PUSH SENT to %s: %s", userID.String(), title)
	return nil
}