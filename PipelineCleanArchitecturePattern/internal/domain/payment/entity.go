package payment

import (
	"errors"
	"fmt"
	"time"

	"github.com/google/uuid"
)

// üèõÔ∏è –î–û–ú–ï–ù–ù–ê–Ø –°–£–©–ù–û–°–¢–¨ –ü–õ–ê–¢–ï–ñ–ê

// Payment –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ —Å–∏—Å—Ç–µ–º–µ
type Payment struct {
	id              uuid.UUID
	orderID         uuid.UUID
	customerID      uuid.UUID
	amount          Money
	method          Method
	status          Status
	provider        Provider
	externalID      string    // ID –≤–æ –≤–Ω–µ—à–Ω–µ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
	cardLast4       string    // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã
	cardBrand       string    // Visa, MasterCard, etc.
	fee             Money     // –∫–æ–º–∏—Å—Å–∏—è
	description     string
	metadata        map[string]string
	processedAt     *time.Time
	createdAt       time.Time
	updatedAt       time.Time
}

// Money –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ–Ω–µ–∂–Ω—É—é —Å—É–º–º—É
type Money struct {
	amount   int64  // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
	currency string
}

// Method –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
type Method string

const (
	MethodCard           Method = "card"
	MethodBankTransfer   Method = "bank_transfer"
	MethodDigitalWallet  Method = "digital_wallet"
	MethodCryptocurrency Method = "cryptocurrency"
	MethodCash           Method = "cash"
)

// Status –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
type Status int

const (
	StatusPending Status = iota
	StatusProcessing
	StatusSucceeded
	StatusFailed
	StatusCancelled
	StatusRefunded
	StatusPartiallyRefunded
)

// Provider –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
type Provider string

const (
	ProviderStripe    Provider = "stripe"
	ProviderPayPal    Provider = "paypal"
	ProviderSberbank  Provider = "sberbank"
	ProviderYandex    Provider = "yandex"
	ProviderInternal  Provider = "internal"
)

// üèóÔ∏è –ö–û–ù–°–¢–†–£–ö–¢–û–†–´

// NewPayment —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
func NewPayment(orderID, customerID uuid.UUID, amount Money, method Method, provider Provider) (*Payment, error) {
	if orderID == uuid.Nil {
		return nil, errors.New("order ID cannot be empty")
	}
	
	if customerID == uuid.Nil {
		return nil, errors.New("customer ID cannot be empty")
	}
	
	if amount.amount <= 0 {
		return nil, errors.New("payment amount must be positive")
	}
	
	if method == "" {
		return nil, errors.New("payment method cannot be empty")
	}
	
	return &Payment{
		id:         uuid.New(),
		orderID:    orderID,
		customerID: customerID,
		amount:     amount,
		method:     method,
		provider:   provider,
		status:     StatusPending,
		metadata:   make(map[string]string),
		createdAt:  time.Now(),
		updatedAt:  time.Now(),
	}, nil
}

// üí≥ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô

// CanProcess –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂
func (p *Payment) CanProcess() bool {
	return p.status == StatusPending
}

// MarkAsProcessing –ø–æ–º–µ—á–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
func (p *Payment) MarkAsProcessing() error {
	if !p.CanProcess() {
		return errors.New("cannot process payment in current status")
	}
	
	p.status = StatusProcessing
	p.updatedAt = time.Now()
	return nil
}

// MarkAsSucceeded –ø–æ–º–µ—á–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π
func (p *Payment) MarkAsSucceeded(externalID string) error {
	if p.status != StatusProcessing {
		return errors.New("can only succeed processing payments")
	}
	
	p.status = StatusSucceeded
	p.externalID = externalID
	now := time.Now()
	p.processedAt = &now
	p.updatedAt = now
	return nil
}

// MarkAsFailed –ø–æ–º–µ—á–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π
func (p *Payment) MarkAsFailed(reason string) error {
	if p.status != StatusProcessing && p.status != StatusPending {
		return errors.New("can only fail pending or processing payments")
	}
	
	p.status = StatusFailed
	p.SetMetadata("failure_reason", reason)
	p.updatedAt = time.Now()
	return nil
}

// Cancel –æ—Ç–º–µ–Ω—è–µ—Ç –ø–ª–∞—Ç–µ–∂
func (p *Payment) Cancel() error {
	if p.status != StatusPending {
		return errors.New("can only cancel pending payments")
	}
	
	p.status = StatusCancelled
	p.updatedAt = time.Now()
	return nil
}

// üí∞ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê –í–û–ó–í–†–ê–¢–û–í

// CanRefund –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç
func (p *Payment) CanRefund() bool {
	return p.status == StatusSucceeded || p.status == StatusPartiallyRefunded
}

// Refund –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
func (p *Payment) Refund(reason string) error {
	if !p.CanRefund() {
		return errors.New("cannot refund payment in current status")
	}
	
	p.status = StatusRefunded
	p.SetMetadata("refund_reason", reason)
	p.updatedAt = time.Now()
	return nil
}

// PartialRefund –≤—ã–ø–æ–ª–Ω—è–µ—Ç —á–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
func (p *Payment) PartialRefund(amount Money, reason string) error {
	if !p.CanRefund() {
		return errors.New("cannot refund payment in current status")
	}
	
	if amount.amount >= p.amount.amount {
		return errors.New("refund amount cannot exceed payment amount")
	}
	
	if amount.currency != p.amount.currency {
		return errors.New("refund currency must match payment currency")
	}
	
	p.status = StatusPartiallyRefunded
	p.SetMetadata("partial_refund_amount", fmt.Sprintf("%d", amount.amount))
	p.SetMetadata("refund_reason", reason)
	p.updatedAt = time.Now()
	return nil
}

// üìä –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–¢–ê–î–ê–ù–ù–´–ú–ò

// SetMetadata —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
func (p *Payment) SetMetadata(key, value string) {
	if p.metadata == nil {
		p.metadata = make(map[string]string)
	}
	
	p.metadata[key] = value
	p.updatedAt = time.Now()
}

// GetMetadata –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
func (p *Payment) GetMetadata(key string) (string, bool) {
	if p.metadata == nil {
		return "", false
	}
	
	value, exists := p.metadata[key]
	return value, exists
}

// SetCardInfo —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
func (p *Payment) SetCardInfo(last4, brand string) error {
	if p.method != MethodCard {
		return errors.New("card info can only be set for card payments")
	}
	
	if len(last4) != 4 {
		return errors.New("last4 must be exactly 4 digits")
	}
	
	p.cardLast4 = last4
	p.cardBrand = brand
	p.updatedAt = time.Now()
	return nil
}

// SetFee —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é
func (p *Payment) SetFee(fee Money) error {
	if fee.currency != p.amount.currency {
		return errors.New("fee currency must match payment currency")
	}
	
	if fee.amount < 0 {
		return errors.New("fee cannot be negative")
	}
	
	p.fee = fee
	p.updatedAt = time.Now()
	return nil
}

// üí∞ –†–ê–°–ß–ï–¢–´

// NetAmount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –∫ –ø–æ–ª—É—á–µ–Ω–∏—é (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)
func (p *Payment) NetAmount() Money {
	return Money{
		amount:   p.amount.amount - p.fee.amount,
		currency: p.amount.currency,
	}
}

// IsExpired –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ –ø–ª–∞—Ç–µ–∂
func (p *Payment) IsExpired(timeout time.Duration) bool {
	if p.status != StatusPending {
		return false
	}
	
	return time.Since(p.createdAt) > timeout
}

// üîç –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê

// IsSuccessful –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å–ø–µ—à–µ–Ω –ª–∏ –ø–ª–∞—Ç–µ–∂
func (p *Payment) IsSuccessful() bool {
	return p.status == StatusSucceeded
}

// IsFailed –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ—É–¥–∞—á–µ–Ω –ª–∏ –ø–ª–∞—Ç–µ–∂
func (p *Payment) IsFailed() bool {
	return p.status == StatusFailed
}

// IsRefunded –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–µ–Ω –ª–∏ –ø–ª–∞—Ç–µ–∂
func (p *Payment) IsRefunded() bool {
	return p.status == StatusRefunded || p.status == StatusPartiallyRefunded
}

// IsPending –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∫–∏
func (p *Payment) IsPending() bool {
	return p.status == StatusPending
}

// IsProcessing –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ –ø–ª–∞—Ç–µ–∂
func (p *Payment) IsProcessing() bool {
	return p.status == StatusProcessing
}

// üîç –ì–ï–¢–¢–ï–†–´

func (p *Payment) ID() uuid.UUID           { return p.id }
func (p *Payment) OrderID() uuid.UUID      { return p.orderID }
func (p *Payment) CustomerID() uuid.UUID   { return p.customerID }
func (p *Payment) Amount() Money           { return p.amount }
func (p *Payment) Method() Method          { return p.method }
func (p *Payment) Status() Status          { return p.status }
func (p *Payment) Provider() Provider      { return p.provider }
func (p *Payment) ExternalID() string      { return p.externalID }
func (p *Payment) CardLast4() string       { return p.cardLast4 }
func (p *Payment) CardBrand() string       { return p.cardBrand }
func (p *Payment) Fee() Money              { return p.fee }
func (p *Payment) Description() string     { return p.description }
func (p *Payment) Metadata() map[string]string { return p.metadata }
func (p *Payment) ProcessedAt() *time.Time { return p.processedAt }
func (p *Payment) CreatedAt() time.Time    { return p.createdAt }
func (p *Payment) UpdatedAt() time.Time    { return p.updatedAt }

// üîç –ú–ï–¢–û–î–´ –î–õ–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –¢–ò–ü–û–í

// Money methods
func (m Money) Amount() int64    { return m.amount }
func (m Money) Currency() string { return m.currency }
func (m Money) ToFloat() float64 { return float64(m.amount) / 100.0 }

func (m Money) String() string {
	return fmt.Sprintf("%.2f %s", m.ToFloat(), m.currency)
}

// Method methods
func (m Method) String() string { return string(m) }

func (m Method) IsCard() bool {
	return m == MethodCard
}

func (m Method) IsDigital() bool {
	return m == MethodDigitalWallet || m == MethodCryptocurrency
}

// Status methods
func (s Status) String() string {
	switch s {
	case StatusPending:
		return "pending"
	case StatusProcessing:
		return "processing"
	case StatusSucceeded:
		return "succeeded"
	case StatusFailed:
		return "failed"
	case StatusCancelled:
		return "cancelled"
	case StatusRefunded:
		return "refunded"
	case StatusPartiallyRefunded:
		return "partially_refunded"
	default:
		return "unknown"
	}
}

// Provider methods
func (p Provider) String() string { return string(p) }

func (p Provider) IsExternal() bool {
	return p != ProviderInternal
}