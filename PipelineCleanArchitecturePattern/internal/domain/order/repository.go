package order

import (
	"context"
	"time"

	"github.com/google/uuid"
)

// üèõÔ∏è –ò–ù–¢–ï–†–§–ï–ô–° –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø –ó–ê–ö–ê–ó–û–í
// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –∑–∞–∫–∞–∑–æ–≤
// –ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –î–û–ú–ï–ù–ù–û–ú —Å–ª–æ–µ, –Ω–æ –†–ï–ê–õ–ò–ó–£–ï–¢–°–Ø –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–º

// Repository –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
type Repository interface {
	// üíæ –û–°–ù–û–í–ù–´–ï CRUD –û–ü–ï–†–ê–¶–ò–ò
	
	// Save —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
	Save(ctx context.Context, order *Order) error
	
	// GetByID –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑ –ø–æ ID
	GetByID(ctx context.Context, id uuid.UUID) (*Order, error)
	
	// GetByCustomerID –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
	GetByCustomerID(ctx context.Context, customerID uuid.UUID) ([]*Order, error)
	
	// Delete —É–¥–∞–ª—è–µ—Ç –∑–∞–∫–∞–∑ (soft delete)
	Delete(ctx context.Context, id uuid.UUID) error
	
	// üîç –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø
	
	// GetByStatus –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
	GetByStatus(ctx context.Context, status Status) ([]*Order, error)
	
	// GetByStatusAndPriority –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
	GetByStatusAndPriority(ctx context.Context, status Status, priority Priority) ([]*Order, error)
	
	// GetPendingOrders –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑—ã
	GetPendingOrders(ctx context.Context) ([]*Order, error)
	
	// GetActiveOrders –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ)
	GetActiveOrders(ctx context.Context) ([]*Order, error)
	
	// üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–ü–†–û–°–´
	
	// GetOrdersInDateRange –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
	GetOrdersInDateRange(ctx context.Context, from, to time.Time) ([]*Order, error)
	
	// CountByStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
	CountByStatus(ctx context.Context) (map[Status]int, error)
	
	// GetTotalRevenueByPeriod –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
	GetTotalRevenueByPeriod(ctx context.Context, from, to time.Time) (Money, error)
	
	// üîÑ –ü–ê–ö–ï–¢–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò
	
	// SaveBatch —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	SaveBatch(ctx context.Context, orders []*Order) error
	
	// UpdateStatusBatch –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤
	UpdateStatusBatch(ctx context.Context, orderIDs []uuid.UUID, newStatus Status) error
}

// üéØ –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–ò

// QueryRepository –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
type QueryRepository interface {
	// GetTopCustomersByRevenue –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ
	GetTopCustomersByRevenue(ctx context.Context, limit int, from, to time.Time) ([]CustomerRevenue, error)
	
	// GetPopularProducts –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
	GetPopularProducts(ctx context.Context, limit int, from, to time.Time) ([]ProductSales, error)
	
	// GetOrderTrends –ø–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–Ω–¥—ã –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º/–º–µ—Å—è—Ü–∞–º
	GetOrderTrends(ctx context.Context, from, to time.Time, groupBy TrendGroupBy) ([]OrderTrend, error)
	
	// GetAverageOrderValue –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
	GetAverageOrderValue(ctx context.Context, from, to time.Time) (Money, error)
}

// üìä –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –¢–ò–ü–´ –î–õ–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò

// CustomerRevenue –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Ä—É—á–∫—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
type CustomerRevenue struct {
	CustomerID    uuid.UUID
	TotalRevenue  Money
	OrdersCount   int
	AverageOrder  Money
}

// ProductSales –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–∞
type ProductSales struct {
	ProductID     uuid.UUID
	TotalQuantity int
	TotalRevenue  Money
	OrdersCount   int
}

// OrderTrend –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ –∑–∞–∫–∞–∑–æ–≤
type OrderTrend struct {
	Period       time.Time
	OrdersCount  int
	TotalRevenue Money
	AverageOrder Money
}

// TrendGroupBy –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤
type TrendGroupBy string

const (
	TrendGroupByDay   TrendGroupBy = "day"
	TrendGroupByWeek  TrendGroupBy = "week"
	TrendGroupByMonth TrendGroupBy = "month"
	TrendGroupByYear  TrendGroupBy = "year"
)

// üîç –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø –ü–û–ò–°–ö–ê

// SearchCriteria –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
type SearchCriteria struct {
	CustomerID    *uuid.UUID
	Status        *Status
	Priority      *Priority
	Source        *Source
	MinAmount     *Money
	MaxAmount     *Money
	DateFrom      *time.Time
	DateTo        *time.Time
	ProductID     *uuid.UUID
	ShippingCity  *string
	Limit         int
	Offset        int
	SortBy        SortField
	SortDirection SortDirection
}

// SortField –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
type SortField string

const (
	SortByCreatedAt   SortField = "created_at"
	SortByUpdatedAt   SortField = "updated_at"
	SortByTotalAmount SortField = "total_amount"
	SortByStatus      SortField = "status"
	SortByPriority    SortField = "priority"
)

// SortDirection –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
type SortDirection string

const (
	SortAsc  SortDirection = "asc"
	SortDesc SortDirection = "desc"
)

// SearchRepository –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
type SearchRepository interface {
	// Search –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
	Search(ctx context.Context, criteria SearchCriteria) ([]*Order, error)
	
	// Count –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
	Count(ctx context.Context, criteria SearchCriteria) (int, error)
}