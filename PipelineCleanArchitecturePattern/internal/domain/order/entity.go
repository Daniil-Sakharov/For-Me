package order

import (
	"errors"
	"fmt"
	"time"

	"github.com/google/uuid"
)

// üèõÔ∏è –î–û–ú–ï–ù–ù–ê–Ø –°–£–©–ù–û–°–¢–¨ –ó–ê–ö–ê–ó–ê - –°–ï–†–î–¶–ï BUSINESS LOGIC
//
// ============================================================================
// –ü–†–ò–ù–¶–ò–ü–´ DOMAIN LAYER –í CLEAN ARCHITECTURE:
// ============================================================================
//
// 1. üö´ –ù–ï –ó–ê–í–ò–°–ò–¢ –ù–ò –û–¢ –ß–ï–ì–û:
//    - –ù–∏–∫–∞–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ HTTP, SQL, JSON, gRPC –±–∏–±–ª–∏–æ—Ç–µ–∫
//    - –¢–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Go + UUID
//    - –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –ë–î, —Ñ–∞–π–ª–æ–≤
//
// 2. üíé –°–û–î–ï–†–ñ–ò–¢ –¢–û–õ–¨–ö–û –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–£:
//    - –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
//    - –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏  
//    - –†–∞—Å—á–µ—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Å–∫–∏–¥–æ–∫
//    - –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
//
// 3. üîí –ò–ù–ö–ê–ü–°–£–õ–Ø–¶–ò–Ø:
//    - –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ–ª—è - –Ω–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å
//    - –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–Ω–æ—Å—Ç—å—é
//    - –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
//
// 4. üß™ –õ–ï–ì–ö–û –¢–ï–°–¢–ò–†–£–ï–¢–°–Ø:
//    - –ù–µ –Ω—É–∂–Ω—ã –º–æ–∫–∏, –ë–î, –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
//    - –¢–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∑–∞ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
//    - 100% –ø–æ–∫—Ä—ã—Ç–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ
//
// ============================================================================
// –ë–ò–ó–ù–ï–°-–ü–†–ê–í–ò–õ–ê –ó–ê–ö–ê–ó–ê:
// ============================================================================
//
// - –ó–∞–∫–∞–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
// - –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏  
// - –¢–æ–≤–∞—Ä—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞—Ç—É—Å–µ Pending/Validated
// - –°—Ç–∞—Ç—É—Å—ã –º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
// - –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º
//
// ============================================================================

// Order –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ —Å–∏—Å—Ç–µ–º–µ e-commerce
// 
// –ê–ì–†–ï–ì–ê–¢ ROOT –≤ —Ç–µ—Ä–º–∏–Ω–∞—Ö DDD (Domain-Driven Design):
// - –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (OrderItem, Address)
// - –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// - –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
type Order struct {
	// ============================================================================
	// –û–°–ù–û–í–ù–´–ï –ü–û–õ–Ø –ó–ê–ö–ê–ó–ê
	// ============================================================================
	
	// –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
	id          uuid.UUID  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
	customerID  uuid.UUID  // ID –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑
	
	// –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
	items       []OrderItem  // –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ (Value Objects)
	status      Status       // –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (enum)
	
	// –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è  
	totalAmount Money       // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ (—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
	currency    string      // –í–∞–ª—é—Ç–∞ –∑–∞–∫–∞–∑–∞ (–æ–±—ã—á–Ω–æ RUB)
	
	// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
	createdAt   time.Time   // –ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω
	updatedAt   time.Time   // –ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∏–∑–º–µ–Ω–µ–Ω
	
	// ============================================================================
	// –ê–î–†–ï–°–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø (Value Objects)
	// ============================================================================
	
	shippingAddress Address  // –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
	billingAddress  Address  // –ê–¥—Ä–µ—Å –¥–ª—è —Å—á–µ—Ç–∞ (–º–æ–∂–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π)
	
	// ============================================================================
	// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
	// ============================================================================
	
	notes       string    // –ó–∞–º–µ—Ç–∫–∏ –∫ –∑–∞–∫–∞–∑—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
	priority    Priority  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ (normal, high, urgent)
	source      Source    // –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–∫–∞–∑ (web, mobile, api)
}

// OrderItem –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ
type OrderItem struct {
	productID uuid.UUID
	quantity  int
	unitPrice Money
	discount  Money
}

// Address –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏/—Å—á–µ—Ç–∞
type Address struct {
	street     string
	city       string
	postalCode string
	country    string
	phone      string
}

// Money –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ–Ω–µ–∂–Ω—É—é —Å—É–º–º—É (Value Object)
type Money struct {
	amount   int64 // –≤ –∫–æ–ø–µ–π–∫–∞—Ö –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
	currency string
}

// Status –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
type Status int

const (
	StatusPending Status = iota
	StatusValidated
	StatusPaymentProcessing
	StatusPaid
	StatusInventoryChecked
	StatusFulfillment
	StatusShipped
	StatusDelivered
	StatusCancelled
	StatusRefunded
)

// Priority –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–∫–∞–∑–∞
type Priority int

const (
	PriorityLow Priority = iota
	PriorityNormal
	PriorityHigh
	PriorityUrgent
)

// Source –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞
type Source string

const (
	SourceWeb    Source = "web"
	SourceMobile Source = "mobile"
	SourceAPI    Source = "api"
)

// üèóÔ∏è –ö–û–ù–°–¢–†–£–ö–¢–û–†–´ (–§–∞–±—Ä–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã)

// NewOrder —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
func NewOrder(customerID uuid.UUID, items []OrderItem, shippingAddr Address) (*Order, error) {
	if customerID == uuid.Nil {
		return nil, errors.New("customer ID cannot be empty")
	}
	
	if len(items) == 0 {
		return nil, errors.New("order must contain at least one item")
	}
	
	if err := shippingAddr.Validate(); err != nil {
		return nil, err
	}
	
	order := &Order{
		id:              uuid.New(),
		customerID:      customerID,
		items:           items,
		status:          StatusPending,
		shippingAddress: shippingAddr,
		billingAddress:  shippingAddr, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–∫–∏
		createdAt:       time.Now(),
		updatedAt:       time.Now(),
		priority:        PriorityNormal,
		source:          SourceWeb,
		currency:        "RUB",
	}
	
	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
	order.calculateTotalAmount()
	
	return order, nil
}

// üí∞ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–û–í

// calculateTotalAmount —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
func (o *Order) calculateTotalAmount() {
	var total int64
	for _, item := range o.items {
		itemTotal := item.unitPrice.amount * int64(item.quantity)
		itemTotal -= item.discount.amount
		total += itemTotal
	}
	
	o.totalAmount = Money{
		amount:   total,
		currency: o.currency,
	}
}

// AddItem –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑
func (o *Order) AddItem(productID uuid.UUID, quantity int, unitPrice Money) error {
	if productID == uuid.Nil {
		return errors.New("product ID cannot be empty")
	}
	
	if quantity <= 0 {
		return errors.New("quantity must be positive")
	}
	
	if unitPrice.amount <= 0 {
		return errors.New("unit price must be positive")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å
	if !o.CanModifyItems() {
		return errors.New("cannot modify items in current status")
	}
	
	item := OrderItem{
		productID: productID,
		quantity:  quantity,
		unitPrice: unitPrice,
		discount:  Money{amount: 0, currency: unitPrice.currency},
	}
	
	o.items = append(o.items, item)
	o.calculateTotalAmount()
	o.updatedAt = time.Now()
	
	return nil
}

// ApplyDiscount –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∫–∏–¥–∫—É –∫ —Ç–æ–≤–∞—Ä—É
func (o *Order) ApplyDiscount(productID uuid.UUID, discount Money) error {
	if !o.CanModifyItems() {
		return errors.New("cannot apply discount in current status")
	}
	
	for i := range o.items {
		if o.items[i].productID == productID {
			o.items[i].discount = discount
			o.calculateTotalAmount()
			o.updatedAt = time.Now()
			return nil
		}
	}
	
	return errors.New("product not found in order")
}

// üìä –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê –°–¢–ê–¢–£–°–û–í

// CanModifyItems –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
func (o *Order) CanModifyItems() bool {
	return o.status == StatusPending || o.status == StatusValidated
}

// CanCancel –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
func (o *Order) CanCancel() bool {
	return o.status != StatusShipped && 
		   o.status != StatusDelivered && 
		   o.status != StatusCancelled &&
		   o.status != StatusRefunded
}

// Cancel –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑
func (o *Order) Cancel() error {
	if !o.CanCancel() {
		return errors.New("cannot cancel order in current status")
	}
	
	o.status = StatusCancelled
	o.updatedAt = time.Now()
	return nil
}

// MarkAsValidated –ø–æ–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
func (o *Order) MarkAsValidated() error {
	if o.status != StatusPending {
		return errors.New("can only validate pending orders")
	}
	
	o.status = StatusValidated
	o.updatedAt = time.Now()
	return nil
}

// MarkAsPaymentProcessing –ø–æ–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π –ø–ª–∞—Ç–µ–∂
func (o *Order) MarkAsPaymentProcessing() error {
	if o.status != StatusValidated {
		return errors.New("can only process payment for validated orders")
	}
	
	o.status = StatusPaymentProcessing
	o.updatedAt = time.Now()
	return nil
}

// MarkAsPaid –ø–æ–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
func (o *Order) MarkAsPaid() error {
	if o.status != StatusPaymentProcessing {
		return errors.New("can only mark as paid orders in payment processing")
	}
	
	o.status = StatusPaid
	o.updatedAt = time.Now()
	return nil
}

// MarkAsInventoryChecked –ø–æ–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–æ —Å–∫–ª–∞–¥—É
func (o *Order) MarkAsInventoryChecked() error {
	if o.status != StatusPaid {
		return errors.New("can only check inventory for paid orders")
	}
	
	o.status = StatusInventoryChecked
	o.updatedAt = time.Time{}
	return nil
}

// MarkAsShipped –ø–æ–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
func (o *Order) MarkAsShipped() error {
	if o.status != StatusFulfillment {
		return errors.New("can only ship orders in fulfillment")
	}
	
	o.status = StatusShipped
	o.updatedAt = time.Now()
	return nil
}

// MarkAsDelivered –ø–æ–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π
func (o *Order) MarkAsDelivered() error {
	if o.status != StatusShipped {
		return errors.New("can only deliver shipped orders")
	}
	
	o.status = StatusDelivered
	o.updatedAt = time.Now()
	return nil
}

// üîç –ì–ï–¢–¢–ï–†–´ (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –ø–æ–ª—è–º)

func (o *Order) ID() uuid.UUID          { return o.id }
func (o *Order) CustomerID() uuid.UUID  { return o.customerID }
func (o *Order) Items() []OrderItem     { return o.items }
func (o *Order) Status() Status         { return o.status }
func (o *Order) TotalAmount() Money     { return o.totalAmount }
func (o *Order) Currency() string       { return o.currency }
func (o *Order) CreatedAt() time.Time   { return o.createdAt }
func (o *Order) UpdatedAt() time.Time   { return o.updatedAt }
func (o *Order) ShippingAddress() Address { return o.shippingAddress }
func (o *Order) BillingAddress() Address  { return o.billingAddress }
func (o *Order) Notes() string          { return o.notes }
func (o *Order) Priority() Priority     { return o.priority }
func (o *Order) Source() Source         { return o.source }

// üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´

// SetPriority —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–∫–∞–∑–∞
func (o *Order) SetPriority(priority Priority) {
	o.priority = priority
	o.updatedAt = time.Now()
}

// SetNotes —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –∫ –∑–∞–∫–∞–∑—É
func (o *Order) SetNotes(notes string) {
	o.notes = notes
	o.updatedAt = time.Now()
}

// SetBillingAddress —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –¥–ª—è —Å—á–µ—Ç–∞
func (o *Order) SetBillingAddress(address Address) error {
	if err := address.Validate(); err != nil {
		return err
	}
	
	o.billingAddress = address
	o.updatedAt = time.Time{}
	return nil
}

// ItemsCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
func (o *Order) ItemsCount() int {
	total := 0
	for _, item := range o.items {
		total += item.quantity
	}
	return total
}

// üîç –ú–ï–¢–û–î–´ –î–õ–Ø OrderItem

func (oi *OrderItem) ProductID() uuid.UUID { return oi.productID }
func (oi *OrderItem) Quantity() int        { return oi.quantity }
func (oi *OrderItem) UnitPrice() Money     { return oi.unitPrice }
func (oi *OrderItem) Discount() Money      { return oi.discount }

// Total –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ * —Ü–µ–Ω–∞ - —Å–∫–∏–¥–∫–∞)
func (oi *OrderItem) Total() Money {
	total := oi.unitPrice.amount * int64(oi.quantity)
	total -= oi.discount.amount
	
	return Money{
		amount:   total,
		currency: oi.unitPrice.currency,
	}
}

// üîç –ú–ï–¢–û–î–´ –î–õ–Ø Address

func (a *Address) Street() string     { return a.street }
func (a *Address) City() string       { return a.city }
func (a *Address) PostalCode() string { return a.postalCode }
func (a *Address) Country() string    { return a.country }
func (a *Address) Phone() string      { return a.phone }

// Validate –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å
func (a *Address) Validate() error {
	if a.street == "" {
		return errors.New("street is required")
	}
	if a.city == "" {
		return errors.New("city is required")
	}
	if a.postalCode == "" {
		return errors.New("postal code is required")
	}
	if a.country == "" {
		return errors.New("country is required")
	}
	return nil
}

// üîç –ú–ï–¢–û–î–´ –î–õ–Ø Money

func (m *Money) Amount() int64   { return m.amount }
func (m *Money) Currency() string { return m.currency }

// ToFloat –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–¥–µ–ª—è –Ω–∞ 100 –∫–æ–ø–µ–µ–∫)
func (m *Money) ToFloat() float64 {
	return float64(m.amount) / 100.0
}

// String –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–≥
func (m *Money) String() string {
	return fmt.Sprintf("%.2f %s", m.ToFloat(), m.currency)
}

// üîç –ú–ï–¢–û–î–´ –î–õ–Ø Status

func (s Status) String() string {
	switch s {
	case StatusPending:
		return "pending"
	case StatusValidated:
		return "validated"
	case StatusPaymentProcessing:
		return "payment_processing"
	case StatusPaid:
		return "paid"
	case StatusInventoryChecked:
		return "inventory_checked"
	case StatusFulfillment:
		return "fulfillment"
	case StatusShipped:
		return "shipped"
	case StatusDelivered:
		return "delivered"
	case StatusCancelled:
		return "cancelled"
	case StatusRefunded:
		return "refunded"
	default:
		return "unknown"
	}
}

// üîç –ú–ï–¢–û–î–´ –î–õ–Ø Priority

func (p Priority) String() string {
	switch p {
	case PriorityLow:
		return "low"
	case PriorityNormal:
		return "normal"
	case PriorityHigh:
		return "high"
	case PriorityUrgent:
		return "urgent"
	default:
		return "unknown"
	}
}