package order_processing

import (
	"context"
	"time"

	"pipeline-clean-architecture/internal/domain/order"
	"pipeline-clean-architecture/internal/domain/payment"
	"pipeline-clean-architecture/internal/domain/product"

	"github.com/google/uuid"
)

// üíº –ò–ù–¢–ï–†–§–ï–ô–°–´ USE CASE –°–õ–û–Ø
// –û–ø—Ä–µ–¥–µ–ª—è—é—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
// –≠—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è –≤ Application Layer

// OrderProcessor –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏
type OrderProcessor interface {
	// üìù –°–û–ó–î–ê–ù–ò–ï –ò –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–ö–ê–ó–û–í
	
	// CreateOrder —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –µ–≥–æ
	CreateOrder(ctx context.Context, req CreateOrderRequest) (*CreateOrderResponse, error)
	
	// ValidateOrder –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
	ValidateOrder(ctx context.Context, orderID uuid.UUID) (*ValidateOrderResponse, error)
	
	// üí∞ –û–ë–†–ê–ë–û–¢–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô
	
	// ProcessPayment –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞
	ProcessPayment(ctx context.Context, req ProcessPaymentRequest) (*ProcessPaymentResponse, error)
	
	// üì¶ –ü–†–û–í–ï–†–ö–ê –°–ö–õ–ê–î–ê
	
	// CheckInventory –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
	CheckInventory(ctx context.Context, orderID uuid.UUID) (*CheckInventoryResponse, error)
	
	// ReserveInventory —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞
	ReserveInventory(ctx context.Context, orderID uuid.UUID) (*ReserveInventoryResponse, error)
	
	// üöö –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –î–û–°–¢–ê–í–ö–ò
	
	// ArrangeDelivery –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É –∑–∞–∫–∞–∑–∞
	ArrangeDelivery(ctx context.Context, orderID uuid.UUID) (*ArrangeDeliveryResponse, error)
	
	// üìß –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
	
	// SendNotifications –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
	SendNotifications(ctx context.Context, orderID uuid.UUID, event NotificationEvent) error
	
	// üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê
	
	// GetOrderStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º
	GetOrderStats(ctx context.Context, req GetOrderStatsRequest) (*GetOrderStatsResponse, error)
}

// PipelineExecutor –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
type PipelineExecutor interface {
	// üîÑ –ü–ê–ô–ü–õ–ê–ô–ù –û–ë–†–ê–ë–û–¢–ö–ò
	
	// ExecuteOrderPipeline –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
	ExecuteOrderPipeline(ctx context.Context, orderID uuid.UUID) (*PipelineResult, error)
	
	// ExecuteStep –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–≥ –ø–∞–π–ø–ª–∞–π–Ω–∞
	ExecuteStep(ctx context.Context, step PipelineStep, orderID uuid.UUID) (*StepResult, error)
	
	// GetPipelineStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
	GetPipelineStatus(ctx context.Context, orderID uuid.UUID) (*PipelineStatus, error)
}

// üìä REQUEST/RESPONSE –°–¢–†–£–ö–¢–£–†–´

// CreateOrderRequest –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
type CreateOrderRequest struct {
	CustomerID      uuid.UUID             `json:"customer_id" validate:"required"`
	Items           []CreateOrderItem     `json:"items" validate:"required,dive"`
	ShippingAddress order.Address         `json:"shipping_address" validate:"required"`
	BillingAddress  *order.Address        `json:"billing_address,omitempty"`
	PaymentMethod   payment.Method        `json:"payment_method" validate:"required"`
	Notes           string                `json:"notes,omitempty"`
	Priority        order.Priority        `json:"priority"`
	Source          order.Source          `json:"source"`
}

// CreateOrderItem —Ç–æ–≤–∞—Ä –≤ –∑–∞–ø—Ä–æ—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
type CreateOrderItem struct {
	ProductID uuid.UUID `json:"product_id" validate:"required"`
	Quantity  int       `json:"quantity" validate:"required,min=1"`
}

// CreateOrderResponse –æ—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
type CreateOrderResponse struct {
	Order     *order.Order `json:"order"`
	Warnings  []string     `json:"warnings,omitempty"`
	NextSteps []string     `json:"next_steps"`
}

// ValidateOrderResponse –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
type ValidateOrderResponse struct {
	IsValid      bool                    `json:"is_valid"`
	Errors       []ValidationError       `json:"errors,omitempty"`
	Warnings     []ValidationWarning     `json:"warnings,omitempty"`
	ValidatedAt  time.Time              `json:"validated_at"`
	ValidatedBy  string                 `json:"validated_by"`
}

// ValidationError –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
type ValidationError struct {
	Field   string `json:"field"`
	Code    string `json:"code"`
	Message string `json:"message"`
}

// ValidationWarning –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
type ValidationWarning struct {
	Field   string `json:"field"`
	Code    string `json:"code"`
	Message string `json:"message"`
}

// ProcessPaymentRequest –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
type ProcessPaymentRequest struct {
	OrderID       uuid.UUID         `json:"order_id" validate:"required"`
	PaymentMethod payment.Method    `json:"payment_method" validate:"required"`
	Provider      payment.Provider  `json:"provider" validate:"required"`
	CardToken     string           `json:"card_token,omitempty"`
	ReturnURL     string           `json:"return_url,omitempty"`
	Metadata      map[string]string `json:"metadata,omitempty"`
}

// ProcessPaymentResponse –æ—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
type ProcessPaymentResponse struct {
	Payment       *payment.Payment `json:"payment"`
	Status        payment.Status   `json:"status"`
	RedirectURL   string          `json:"redirect_url,omitempty"`
	QRCodeData    string          `json:"qr_code_data,omitempty"`
	ExpiresAt     *time.Time      `json:"expires_at,omitempty"`
}

// CheckInventoryResponse –æ—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–ª–∞–¥–∞
type CheckInventoryResponse struct {
	AvailableItems   []InventoryItem `json:"available_items"`
	UnavailableItems []InventoryItem `json:"unavailable_items"`
	IsFullyAvailable bool           `json:"is_fully_available"`
	EstimatedDelay   *time.Duration `json:"estimated_delay,omitempty"`
	Alternatives     []Alternative  `json:"alternatives,omitempty"`
}

// InventoryItem –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
type InventoryItem struct {
	ProductID     uuid.UUID `json:"product_id"`
	RequestedQty  int       `json:"requested_qty"`
	AvailableQty  int       `json:"available_qty"`
	ReservedQty   int       `json:"reserved_qty"`
	WarehouseID   uuid.UUID `json:"warehouse_id"`
	EstimatedDate *time.Time `json:"estimated_date,omitempty"`
}

// Alternative –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä
type Alternative struct {
	ProductID   uuid.UUID      `json:"product_id"`
	Name        string         `json:"name"`
	Price       product.Money  `json:"price"`
	Similarity  float64        `json:"similarity"` // 0-1
	Description string         `json:"description"`
}

// ReserveInventoryResponse –æ—Ç–≤–µ—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞
type ReserveInventoryResponse struct {
	ReservedItems []ReservedItem `json:"reserved_items"`
	ReservationID uuid.UUID     `json:"reservation_id"`
	ExpiresAt     time.Time     `json:"expires_at"`
	TotalReserved int           `json:"total_reserved"`
}

// ReservedItem –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
type ReservedItem struct {
	ProductID   uuid.UUID `json:"product_id"`
	Quantity    int       `json:"quantity"`
	WarehouseID uuid.UUID `json:"warehouse_id"`
	ReservedAt  time.Time `json:"reserved_at"`
}

// ArrangeDeliveryResponse –æ—Ç–≤–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
type ArrangeDeliveryResponse struct {
	DeliveryID      uuid.UUID               `json:"delivery_id"`
	CarrierID       uuid.UUID              `json:"carrier_id"`
	CarrierName     string                 `json:"carrier_name"`
	TrackingNumber  string                 `json:"tracking_number"`
	EstimatedDate   time.Time              `json:"estimated_date"`
	DeliveryOptions []DeliveryOption       `json:"delivery_options"`
	Cost            product.Money          `json:"cost"`
}

// DeliveryOption –æ–ø—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
type DeliveryOption struct {
	ID          uuid.UUID     `json:"id"`
	Name        string        `json:"name"`
	Description string        `json:"description"`
	Cost        product.Money `json:"cost"`
	Duration    time.Duration `json:"duration"`
	IsSelected  bool         `json:"is_selected"`
}

// NotificationEvent —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
type NotificationEvent string

const (
	NotificationOrderCreated    NotificationEvent = "order_created"
	NotificationOrderValidated  NotificationEvent = "order_validated"
	NotificationPaymentReceived NotificationEvent = "payment_received"
	NotificationPaymentFailed   NotificationEvent = "payment_failed"
	NotificationInventoryReserved NotificationEvent = "inventory_reserved"
	NotificationShipped         NotificationEvent = "shipped"
	NotificationDelivered       NotificationEvent = "delivered"
	NotificationCancelled       NotificationEvent = "cancelled"
)

// GetOrderStatsRequest –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
type GetOrderStatsRequest struct {
	CustomerID *uuid.UUID         `json:"customer_id,omitempty"`
	DateFrom   *time.Time        `json:"date_from,omitempty"`
	DateTo     *time.Time        `json:"date_to,omitempty"`
	Status     *order.Status     `json:"status,omitempty"`
	Source     *order.Source     `json:"source,omitempty"`
	GroupBy    StatsGroupBy      `json:"group_by"`
}

// StatsGroupBy –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
type StatsGroupBy string

const (
	StatsGroupByDay    StatsGroupBy = "day"
	StatsGroupByWeek   StatsGroupBy = "week"
	StatsGroupByMonth  StatsGroupBy = "month"
	StatsGroupByStatus StatsGroupBy = "status"
	StatsGroupBySource StatsGroupBy = "source"
)

// GetOrderStatsResponse –æ—Ç–≤–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
type GetOrderStatsResponse struct {
	TotalOrders    int                    `json:"total_orders"`
	TotalRevenue   product.Money          `json:"total_revenue"`
	AverageOrder   product.Money          `json:"average_order"`
	StatusBreakdown map[string]int        `json:"status_breakdown"`
	TrendData      []StatsTrendPoint      `json:"trend_data"`
	TopProducts    []StatsProduct         `json:"top_products"`
}

// StatsTrendPoint —Ç–æ—á–∫–∞ —Ç—Ä–µ–Ω–¥–∞
type StatsTrendPoint struct {
	Period time.Time     `json:"period"`
	Count  int           `json:"count"`
	Revenue product.Money `json:"revenue"`
}

// StatsProduct —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä—É
type StatsProduct struct {
	ProductID uuid.UUID     `json:"product_id"`
	Name      string        `json:"name"`
	Quantity  int           `json:"quantity"`
	Revenue   product.Money `json:"revenue"`
}

// üîÑ –ü–ê–ô–ü–õ–ê–ô–ù –°–¢–†–£–ö–¢–£–†–´

// PipelineStep —à–∞–≥ –ø–∞–π–ø–ª–∞–π–Ω–∞
type PipelineStep string

const (
	StepValidation         PipelineStep = "validation"
	StepPaymentProcessing  PipelineStep = "payment_processing"
	StepInventoryCheck     PipelineStep = "inventory_check"
	StepInventoryReserve   PipelineStep = "inventory_reserve"
	StepDeliveryArrange    PipelineStep = "delivery_arrange"
	StepNotifications      PipelineStep = "notifications"
)

// PipelineResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
type PipelineResult struct {
	OrderID     uuid.UUID               `json:"order_id"`
	Success     bool                   `json:"success"`
	Steps       []StepResult           `json:"steps"`
	Duration    time.Duration          `json:"duration"`
	CompletedAt time.Time             `json:"completed_at"`
	FinalStatus order.Status          `json:"final_status"`
	Errors      []PipelineError        `json:"errors,omitempty"`
}

// StepResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
type StepResult struct {
	Step        PipelineStep   `json:"step"`
	Success     bool          `json:"success"`
	Duration    time.Duration `json:"duration"`
	StartedAt   time.Time     `json:"started_at"`
	CompletedAt time.Time     `json:"completed_at"`
	Data        interface{}   `json:"data,omitempty"`
	Error       *PipelineError `json:"error,omitempty"`
}

// PipelineError –æ—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞
type PipelineError struct {
	Step    PipelineStep `json:"step"`
	Code    string       `json:"code"`
	Message string       `json:"message"`
	Retry   bool         `json:"retry"`
}

// PipelineStatus —Å—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞
type PipelineStatus struct {
	OrderID        uuid.UUID     `json:"order_id"`
	CurrentStep    PipelineStep  `json:"current_step"`
	CompletedSteps []PipelineStep `json:"completed_steps"`
	Progress       float64       `json:"progress"` // 0-1
	StartedAt      time.Time     `json:"started_at"`
	UpdatedAt      time.Time     `json:"updated_at"`
	EstimatedEnd   *time.Time    `json:"estimated_end,omitempty"`
}