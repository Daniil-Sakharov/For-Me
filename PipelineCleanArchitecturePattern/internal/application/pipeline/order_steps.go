package pipeline

import (
	"context"
	"errors"
	"fmt"
	"time"

	"pipeline-clean-architecture/internal/domain/order"
	"pipeline-clean-architecture/internal/domain/payment"
	"pipeline-clean-architecture/pkg/pipeline"

	"github.com/google/uuid"
	"go.uber.org/zap"
)

// üîÑ –ö–û–ù–ö–†–ï–¢–ù–´–ï –®–ê–ì–ò –ü–ê–ô–ü–õ–ê–ô–ù–ê –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ö–ê–ó–û–í
//
// ============================================================================
// APPLICATION LAYER - –ö–û–û–†–î–ò–ù–ê–¶–ò–Ø –ë–ò–ó–ù–ï–°-–ü–†–û–¶–ï–°–°–û–í
// ============================================================================
//
// –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∞–≥–æ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤.
// –ö–∞–∂–¥—ã–π —à–∞–≥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å StepHandler –∏–∑ pipeline engine.
//
// –ü–†–ò–ù–¶–ò–ü–´ APPLICATION LAYER:
//
// 1. üéØ –ö–û–û–†–î–ò–ù–ê–¶–ò–Ø, –ù–ï –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê:
//    - –®–∞–≥–∏ –ù–ï —Å–æ–¥–µ—Ä–∂–∞—Ç –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞
//    - –û–Ω–∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—Ç –≤—ã–∑–æ–≤—ã –¥–æ–º–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
//    - –ò—Å–ø–æ–ª—å–∑—É—é—Ç —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
//
// 2. üîó –û–†–ö–ï–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:
//    - –ü–æ–ª—É—á–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
//    - –í—ã–∑—ã–≤–∞—é—Ç –Ω—É–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (Payment, Inventory, etc.)
//    - –û–±–Ω–æ–≤–ª—è—é—Ç –¥–æ–º–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
//    - –ü–µ—Ä–µ–¥–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
//
// 3. üìä –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö:
//    - –õ–æ–≥–∏—Ä—É—é—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
//    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
//    - –í–æ–∑–≤—Ä–∞—â–∞—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
//
// 4. üîÑ STATELESS:
//    - –ö–∞–∂–¥—ã–π —à–∞–≥ –Ω–µ–∑–∞–≤–∏—Å–∏–º
//    - –ù–µ —Ö—Ä–∞–Ω—è—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
//    - –ü–æ–ª—É—á–∞—é—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ StepData
//
// ============================================================================
// –ü–û–¢–û–ö –î–ê–ù–ù–´–• –ú–ï–ñ–î–£ –®–ê–ì–ê–ú–ò:
// ============================================================================
//
// Step 1 (Validate) ‚Üí { order_id, is_valid, order_status }
//        ‚Üì
// Step 2 (Payment) ‚Üí { payment_id, payment_status }  
//        ‚Üì
// Step 3 (Inventory) ‚Üí { reservation_id, all_available }
//        ‚Üì
// Step 4 (Notifications) ‚Üí { notifications_sent }
//
// ============================================================================

// ============================================================================
// –®–ê–ì 1: –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–ö–ê–ó–ê
// ============================================================================
//
// –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–¥ –µ–≥–æ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
//
// –ß–¢–û –ü–†–û–í–ï–†–Ø–ï–¢:
// - –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Pending)
// - –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
// - –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤  
// - –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
//
// –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
// - order.Repository: –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
// - ProductService: –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω
// - zap.Logger: –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
//
// –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
// - order_id: ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
//
// –í–´–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:  
// - is_valid: true/false - –ø—Ä–æ—à–µ–ª –ª–∏ –∑–∞–∫–∞–∑ –≤–∞–ª–∏–¥–∞—Ü–∏—é
// - validation_errors: —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
// - order_status: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
// ============================================================================

type ValidateOrderStep struct {
	logger         *zap.Logger       // –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	orderRepo      order.Repository  // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ (DOMAIN –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
	productService ProductService    // –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ (APPLICATION –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
}

// ProductService –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
type ProductService interface {
	CheckProductAvailability(ctx context.Context, productID uuid.UUID, quantity int) (bool, error)
	GetProductPrice(ctx context.Context, productID uuid.UUID) (order.Money, error)
}

// PaymentService –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
type PaymentService interface {
	ProcessPayment(ctx context.Context, orderID uuid.UUID, method payment.Method) (*payment.Payment, error)
	ValidatePaymentMethod(method payment.Method) error
}

// InventoryService –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–ª–∞–¥–æ–º
type InventoryService interface {
	CheckAvailability(ctx context.Context, productID uuid.UUID, quantity int) (bool, error)
	ReserveItems(ctx context.Context, items []ReservationItem) (*Reservation, error)
	ReleaseReservation(ctx context.Context, reservationID uuid.UUID) error
}

// NotificationService –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
type NotificationService interface {
	SendEmail(ctx context.Context, to, subject, body string) error
	SendSMS(ctx context.Context, phone, message string) error
	SendPushNotification(ctx context.Context, userID uuid.UUID, title, body string) error
}

// ReservationItem —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
type ReservationItem struct {
	ProductID uuid.UUID
	Quantity  int
}

// Reservation —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
type Reservation struct {
	ID        uuid.UUID
	Items     []ReservationItem
	ExpiresAt time.Time
}

// üîÑ STEP 1: VALIDATE ORDER

// NewValidateOrderStep —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —à–∞–≥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
func NewValidateOrderStep(logger *zap.Logger, orderRepo order.Repository, productService ProductService) *ValidateOrderStep {
	return &ValidateOrderStep{
		logger:         logger,
		orderRepo:      orderRepo,
		productService: productService,
	}
}

// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∑–∞–∫–∞–∑–∞
//
// –ê–õ–ì–û–†–ò–¢–ú –í–´–ü–û–õ–ù–ï–ù–ò–Ø:
// 1. –ò–∑–≤–ª–µ–∫–∞–µ–º order_id –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// 2. –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è  
// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
// 4. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ
// 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
// 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
// 7. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
func (s *ValidateOrderStep) Execute(ctx context.Context, data *pipeline.StepData) (*pipeline.StepResult, error) {
	s.logger.Info("Validating order", zap.String("execution_id", data.ID))
	
	startTime := time.Now()
	
	// ============================================================================
	// –≠–¢–ê–ü 1: –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ò –í–ê–õ–ò–î–ê–¶–ò–Ø –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
	// ============================================================================
	
	// –ü–æ–ª—É—á–∞–µ–º order_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ (–∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
	// –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ
	orderIDStr, ok := data.Input["order_id"].(string)
	if !ok {
		return nil, errors.New("order_id is required")
	}
	
	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º string –≤ UUID —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞
	orderID, err := uuid.Parse(orderIDStr)
	if err != nil {
		return nil, fmt.Errorf("invalid order_id: %w", err)
	}
	
	// ============================================================================
	// –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê –ò–ó –î–û–ú–ï–ù–ê
	// ============================================================================
	
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
	// –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ DOMAIN —Å–ª–æ–µ, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ INFRASTRUCTURE —Å–ª–æ–µ
	// –≠—Ç–æ –ø—Ä–∏–º–µ—Ä Dependency Inversion Principle
	ord, err := s.orderRepo.GetByID(ctx, orderID)
	if err != nil {
		return nil, fmt.Errorf("failed to get order: %w", err)
	}
	
	// ============================================================================
	// –≠–¢–ê–ü 3: –í–´–ü–û–õ–ù–ï–ù–ò–ï –ë–ò–ó–ù–ï–°-–í–ê–õ–ò–î–ê–¶–ò–ò
	// ============================================================================
	
	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Å–ø–∏—Å–æ–∫
	validationErrors := make([]string, 0)
	
	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–æ –∏–∑ DOMAIN —Å–ª–æ—è)
	if ord.Status() != order.StatusPending {
		validationErrors = append(validationErrors, 
			fmt.Sprintf("order status is %s, expected pending", ord.Status().String()))
	}
	
	// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
	for _, item := range ord.Items() {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
		available, err := s.productService.CheckProductAvailability(ctx, item.ProductID(), item.Quantity())
		if err != nil {
			s.logger.Error("Failed to check product availability", 
				zap.String("product_id", item.ProductID().String()),
				zap.Error(err))
			validationErrors = append(validationErrors, 
				fmt.Sprintf("failed to check availability for product %s", item.ProductID().String()))
			continue
		}
		
		if !available {
			validationErrors = append(validationErrors, 
				fmt.Sprintf("product %s is not available in quantity %d", 
					item.ProductID().String(), item.Quantity()))
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
		currentPrice, err := s.productService.GetProductPrice(ctx, item.ProductID())
		if err != nil {
			s.logger.Error("Failed to get current product price", 
				zap.String("product_id", item.ProductID().String()),
				zap.Error(err))
			validationErrors = append(validationErrors, 
				fmt.Sprintf("failed to get price for product %s", item.ProductID().String()))
			continue
		}
		
		if currentPrice.Amount() != item.UnitPrice().Amount() {
			validationErrors = append(validationErrors, 
				fmt.Sprintf("price for product %s has changed from %d to %d", 
					item.ProductID().String(), item.UnitPrice().Amount(), currentPrice.Amount()))
		}
	}
	
	// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
	if err := ord.ShippingAddress().Validate(); err != nil {
		validationErrors = append(validationErrors, 
			fmt.Sprintf("invalid shipping address: %s", err.Error()))
	}
	
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	isValid := len(validationErrors) == 0
	
	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
	if isValid {
		if err := ord.MarkAsValidated(); err != nil {
			return nil, fmt.Errorf("failed to mark order as validated: %w", err)
		}
		
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
		if err := s.orderRepo.Save(ctx, ord); err != nil {
			return nil, fmt.Errorf("failed to save validated order: %w", err)
		}
	}
	
	// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	result := &pipeline.StepResult{
		Step:        "validate_order",
		Success:     isValid,
		StartedAt:   startTime,
		CompletedAt: time.Now(),
		Duration:    time.Since(startTime),
		Output: map[string]interface{}{
			"order_id":          orderID.String(),
			"is_valid":          isValid,
			"validation_errors": validationErrors,
			"order_status":      ord.Status().String(),
			"total_amount":      ord.TotalAmount().Amount(),
		},
		Metadata: map[string]string{
			"validator": "order_validation_service",
			"version":   "1.0",
		},
	}
	
	if !isValid {
		result.Error = errors.New("order validation failed")
		result.Retryable = false // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
	}
	
	s.logger.Info("Order validation completed", 
		zap.String("order_id", orderID.String()),
		zap.Bool("is_valid", isValid),
		zap.Int("error_count", len(validationErrors)),
		zap.Duration("duration", result.Duration))
	
	return result, nil
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞
func (s *ValidateOrderStep) Name() string {
	return "validate_order"
}

// Validate –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
func (s *ValidateOrderStep) Validate(data *pipeline.StepData) error {
	if _, ok := data.Input["order_id"]; !ok {
		return errors.New("order_id is required")
	}
	return nil
}

// Timeout –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
func (s *ValidateOrderStep) Timeout() time.Duration {
	return 30 * time.Second
}

// Dependencies –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —à–∞–≥–∞
func (s *ValidateOrderStep) Dependencies() []string {
	return []string{} // –ü–µ—Ä–≤—ã–π —à–∞–≥, –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
}

// CanRetry –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —à–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
func (s *ValidateOrderStep) CanRetry(err error) bool {
	// –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –Ω–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	return !errors.Is(err, errors.New("order validation failed"))
}

// üîÑ STEP 2: PROCESS PAYMENT

// ProcessPaymentStep —à–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
type ProcessPaymentStep struct {
	logger         *zap.Logger
	orderRepo      order.Repository
	paymentService PaymentService
}

// NewProcessPaymentStep —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —à–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
func NewProcessPaymentStep(logger *zap.Logger, orderRepo order.Repository, paymentService PaymentService) *ProcessPaymentStep {
	return &ProcessPaymentStep{
		logger:         logger,
		orderRepo:      orderRepo,
		paymentService: paymentService,
	}
}

// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
func (s *ProcessPaymentStep) Execute(ctx context.Context, data *pipeline.StepData) (*pipeline.StepResult, error) {
	s.logger.Info("Processing payment", zap.String("execution_id", data.ID))
	
	startTime := time.Now()
	
	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
	orderIDStr, ok := data.Input["order_id"].(string)
	if !ok {
		return nil, errors.New("order_id is required")
	}
	
	orderID, err := uuid.Parse(orderIDStr)
	if err != nil {
		return nil, fmt.Errorf("invalid order_id: %w", err)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
	isValid, ok := data.Input["is_valid"].(bool)
	if !ok || !isValid {
		return &pipeline.StepResult{
			Step:        "process_payment",
			Success:     false,
			StartedAt:   startTime,
			CompletedAt: time.Now(),
			Duration:    time.Since(startTime),
			Error:       errors.New("cannot process payment for invalid order"),
			Retryable:   false,
		}, nil
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
	ord, err := s.orderRepo.GetByID(ctx, orderID)
	if err != nil {
		return nil, fmt.Errorf("failed to get order: %w", err)
	}
	
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	paymentMethodStr := data.Metadata["payment_method"]
	if paymentMethodStr == "" {
		paymentMethodStr = "card"
	}
	
	paymentMethod := payment.Method(paymentMethodStr)
	
	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
	if err := s.paymentService.ValidatePaymentMethod(paymentMethod); err != nil {
		return nil, fmt.Errorf("invalid payment method: %w", err)
	}
	
	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
	if err := ord.MarkAsPaymentProcessing(); err != nil {
		return nil, fmt.Errorf("failed to mark order as payment processing: %w", err)
	}
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
	if err := s.orderRepo.Save(ctx, ord); err != nil {
		return nil, fmt.Errorf("failed to save order: %w", err)
	}
	
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
	pmt, err := s.paymentService.ProcessPayment(ctx, orderID, paymentMethod)
	if err != nil {
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
		ord.MarkAsValidated()
		s.orderRepo.Save(ctx, ord)
		
		return &pipeline.StepResult{
			Step:        "process_payment",
			Success:     false,
			StartedAt:   startTime,
			CompletedAt: time.Now(),
			Duration:    time.Since(startTime),
			Output: map[string]interface{}{
				"order_id":       orderID.String(),
				"payment_failed": true,
				"error_message":  err.Error(),
			},
			Error:     fmt.Errorf("payment processing failed: %w", err),
			Retryable: true, // –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
		}, nil
	}
	
	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
	if err := ord.MarkAsPaid(); err != nil {
		return nil, fmt.Errorf("failed to mark order as paid: %w", err)
	}
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
	if err := s.orderRepo.Save(ctx, ord); err != nil {
		return nil, fmt.Errorf("failed to save paid order: %w", err)
	}
	
	// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	result := &pipeline.StepResult{
		Step:        "process_payment",
		Success:     true,
		StartedAt:   startTime,
		CompletedAt: time.Now(),
		Duration:    time.Since(startTime),
		Output: map[string]interface{}{
			"order_id":          orderID.String(),
			"payment_id":        pmt.ID().String(),
			"payment_status":    pmt.Status().String(),
			"payment_method":    pmt.Method().String(),
			"payment_amount":    pmt.Amount().Amount(),
			"order_status":      ord.Status().String(),
		},
		Metadata: map[string]string{
			"payment_processor": "payment_service",
			"payment_provider":  pmt.Provider().String(),
		},
	}
	
	s.logger.Info("Payment processing completed", 
		zap.String("order_id", orderID.String()),
		zap.String("payment_id", pmt.ID().String()),
		zap.String("payment_status", pmt.Status().String()),
		zap.Duration("duration", result.Duration))
	
	return result, nil
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞
func (s *ProcessPaymentStep) Name() string {
	return "process_payment"
}

// Validate –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
func (s *ProcessPaymentStep) Validate(data *pipeline.StepData) error {
	if _, ok := data.Input["order_id"]; !ok {
		return errors.New("order_id is required")
	}
	if isValid, ok := data.Input["is_valid"].(bool); !ok || !isValid {
		return errors.New("order must be valid before payment processing")
	}
	return nil
}

// Timeout –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
func (s *ProcessPaymentStep) Timeout() time.Duration {
	return 60 * time.Second // –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
}

// Dependencies –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —à–∞–≥–∞
func (s *ProcessPaymentStep) Dependencies() []string {
	return []string{"validate_order"}
}

// CanRetry –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —à–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
func (s *ProcessPaymentStep) CanRetry(err error) bool {
	// –ü–æ–≤—Ç–æ—Ä—è–µ–º –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π
	return true
}

// üîÑ STEP 3: CHECK INVENTORY

// CheckInventoryStep —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–ª–∞–¥–∞
type CheckInventoryStep struct {
	logger           *zap.Logger
	orderRepo        order.Repository
	inventoryService InventoryService
}

// NewCheckInventoryStep —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–ª–∞–¥–∞
func NewCheckInventoryStep(logger *zap.Logger, orderRepo order.Repository, inventoryService InventoryService) *CheckInventoryStep {
	return &CheckInventoryStep{
		logger:           logger,
		orderRepo:        orderRepo,
		inventoryService: inventoryService,
	}
}

// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∫–ª–∞–¥–∞
func (s *CheckInventoryStep) Execute(ctx context.Context, data *pipeline.StepData) (*pipeline.StepResult, error) {
	s.logger.Info("Checking inventory", zap.String("execution_id", data.ID))
	
	startTime := time.Now()
	
	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	orderIDStr, ok := data.Input["order_id"].(string)
	if !ok {
		return nil, errors.New("order_id is required")
	}
	
	orderID, err := uuid.Parse(orderIDStr)
	if err != nil {
		return nil, fmt.Errorf("invalid order_id: %w", err)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
	paymentStatus, ok := data.Input["payment_status"].(string)
	if !ok || paymentStatus != "succeeded" {
		return &pipeline.StepResult{
			Step:        "check_inventory",
			Success:     false,
			StartedAt:   startTime,
			CompletedAt: time.Now(),
			Duration:    time.Since(startTime),
			Error:       errors.New("cannot check inventory for unpaid order"),
			Retryable:   false,
		}, nil
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
	ord, err := s.orderRepo.GetByID(ctx, orderID)
	if err != nil {
		return nil, fmt.Errorf("failed to get order: %w", err)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
	allAvailable := true
	unavailableItems := make([]string, 0)
	reservationItems := make([]ReservationItem, 0)
	
	for _, item := range ord.Items() {
		available, err := s.inventoryService.CheckAvailability(ctx, item.ProductID(), item.Quantity())
		if err != nil {
			s.logger.Error("Failed to check inventory", 
				zap.String("product_id", item.ProductID().String()),
				zap.Error(err))
			return nil, fmt.Errorf("failed to check inventory for product %s: %w", 
				item.ProductID().String(), err)
		}
		
		if !available {
			allAvailable = false
			unavailableItems = append(unavailableItems, item.ProductID().String())
		} else {
			reservationItems = append(reservationItems, ReservationItem{
				ProductID: item.ProductID(),
				Quantity:  item.Quantity(),
			})
		}
	}
	
	// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	result := &pipeline.StepResult{
		Step:        "check_inventory",
		Success:     allAvailable,
		StartedAt:   startTime,
		CompletedAt: time.Now(),
		Duration:    time.Since(startTime),
		Output: map[string]interface{}{
			"order_id":           orderID.String(),
			"all_available":      allAvailable,
			"unavailable_items":  unavailableItems,
			"available_items":    len(reservationItems),
		},
		Metadata: map[string]string{
			"inventory_service": "warehouse_management",
		},
	}
	
	if allAvailable {
		// –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
		reservation, err := s.inventoryService.ReserveItems(ctx, reservationItems)
		if err != nil {
			return nil, fmt.Errorf("failed to reserve items: %w", err)
		}
		
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
		if err := ord.MarkAsInventoryChecked(); err != nil {
			// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
			s.inventoryService.ReleaseReservation(ctx, reservation.ID)
			return nil, fmt.Errorf("failed to mark order as inventory checked: %w", err)
		}
		
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
		if err := s.orderRepo.Save(ctx, ord); err != nil {
			// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
			s.inventoryService.ReleaseReservation(ctx, reservation.ID)
			return nil, fmt.Errorf("failed to save order: %w", err)
		}
		
		result.Output["reservation_id"] = reservation.ID.String()
		result.Output["reservation_expires_at"] = reservation.ExpiresAt.Format(time.RFC3339)
		result.Output["order_status"] = ord.Status().String()
		
		s.logger.Info("Inventory check completed successfully", 
			zap.String("order_id", orderID.String()),
			zap.String("reservation_id", reservation.ID.String()),
			zap.Duration("duration", result.Duration))
	} else {
		result.Error = errors.New("insufficient inventory")
		result.Retryable = false // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç
		
		s.logger.Warn("Inventory check failed - insufficient stock", 
			zap.String("order_id", orderID.String()),
			zap.Strings("unavailable_items", unavailableItems),
			zap.Duration("duration", result.Duration))
	}
	
	return result, nil
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞
func (s *CheckInventoryStep) Name() string {
	return "check_inventory"
}

// Validate –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
func (s *CheckInventoryStep) Validate(data *pipeline.StepData) error {
	if _, ok := data.Input["order_id"]; !ok {
		return errors.New("order_id is required")
	}
	if paymentStatus, ok := data.Input["payment_status"].(string); !ok || paymentStatus != "succeeded" {
		return errors.New("payment must be successful before inventory check")
	}
	return nil
}

// Timeout –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
func (s *CheckInventoryStep) Timeout() time.Duration {
	return 45 * time.Second
}

// Dependencies –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —à–∞–≥–∞
func (s *CheckInventoryStep) Dependencies() []string {
	return []string{"process_payment"}
}

// CanRetry –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —à–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
func (s *CheckInventoryStep) CanRetry(err error) bool {
	// –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
	return !errors.Is(err, errors.New("insufficient inventory"))
}

// üîÑ STEP 4: SEND NOTIFICATIONS

// SendNotificationsStep —à–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
type SendNotificationsStep struct {
	logger              *zap.Logger
	notificationService NotificationService
}

// NewSendNotificationsStep —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —à–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func NewSendNotificationsStep(logger *zap.Logger, notificationService NotificationService) *SendNotificationsStep {
	return &SendNotificationsStep{
		logger:              logger,
		notificationService: notificationService,
	}
}

// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func (s *SendNotificationsStep) Execute(ctx context.Context, data *pipeline.StepData) (*pipeline.StepResult, error) {
	s.logger.Info("Sending notifications", zap.String("execution_id", data.ID))
	
	startTime := time.Now()
	
	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	orderIDStr, ok := data.Input["order_id"].(string)
	if !ok {
		return nil, errors.New("order_id is required")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
	allAvailable, ok := data.Input["all_available"].(bool)
	if !ok || !allAvailable {
		return &pipeline.StepResult{
			Step:        "send_notifications",
			Success:     false,
			StartedAt:   startTime,
			CompletedAt: time.Now(),
			Duration:    time.Since(startTime),
			Error:       errors.New("cannot send success notifications for failed order processing"),
			Retryable:   false,
		}, nil
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞)
	notifications := []string{
		"email_confirmation",
		"sms_confirmation",
	}
	
	successfulNotifications := make([]string, 0)
	failedNotifications := make([]string, 0)
	
	// Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	err := s.notificationService.SendEmail(ctx, 
		"customer@example.com", 
		"–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", 
		fmt.Sprintf("–í–∞—à –∑–∞–∫–∞–∑ %s —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", orderIDStr))
	
	if err != nil {
		s.logger.Error("Failed to send email notification", zap.Error(err))
		failedNotifications = append(failedNotifications, "email")
	} else {
		successfulNotifications = append(successfulNotifications, "email")
	}
	
	// SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	err = s.notificationService.SendSMS(ctx, 
		"+7900123456789", 
		fmt.Sprintf("–ó–∞–∫–∞–∑ %s –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É.", orderIDStr))
	
	if err != nil {
		s.logger.Error("Failed to send SMS notification", zap.Error(err))
		failedNotifications = append(failedNotifications, "sms")
	} else {
		successfulNotifications = append(successfulNotifications, "sms")
	}
	
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —à–∞–≥–∞
	success := len(successfulNotifications) > 0
	
	result := &pipeline.StepResult{
		Step:        "send_notifications",
		Success:     success,
		StartedAt:   startTime,
		CompletedAt: time.Now(),
		Duration:    time.Since(startTime),
		Output: map[string]interface{}{
			"order_id":                   orderIDStr,
			"successful_notifications":   successfulNotifications,
			"failed_notifications":       failedNotifications,
			"notification_count":         len(notifications),
			"successful_count":           len(successfulNotifications),
		},
		Metadata: map[string]string{
			"notification_service": "communication_service",
		},
	}
	
	if !success {
		result.Error = errors.New("all notifications failed")
		result.Retryable = true // –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	}
	
	s.logger.Info("Notifications sending completed", 
		zap.String("order_id", orderIDStr),
		zap.Strings("successful", successfulNotifications),
		zap.Strings("failed", failedNotifications),
		zap.Duration("duration", result.Duration))
	
	return result, nil
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞
func (s *SendNotificationsStep) Name() string {
	return "send_notifications"
}

// Validate –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
func (s *SendNotificationsStep) Validate(data *pipeline.StepData) error {
	if _, ok := data.Input["order_id"]; !ok {
		return errors.New("order_id is required")
	}
	return nil
}

// Timeout –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
func (s *SendNotificationsStep) Timeout() time.Duration {
	return 30 * time.Second
}

// Dependencies –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —à–∞–≥–∞
func (s *SendNotificationsStep) Dependencies() []string {
	return []string{"check_inventory"}
}

// CanRetry –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —à–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
func (s *SendNotificationsStep) CanRetry(err error) bool {
	// –í—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	return true
}