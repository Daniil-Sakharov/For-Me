// =====================================================================
// üöÄ MAIN HTTP API SERVER - –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è REST API
// =====================================================================
//
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP API —Å–µ—Ä–≤–µ—Ä –¥–ª—è Tender Automation MVP.
// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
// 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
// 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
// 3. –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
// 4. Graceful shutdown
//
// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
// - –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
// - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å retry –ª–æ–≥–∏–∫–æ–π
// - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
// - Health check endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
// - Metrics endpoint –¥–ª—è Prometheus
// - Proper error handling –∏ panic recovery

package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"tender-automation-mvp/configs"
	// TODO: –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç—ã –ø–æ—Å–ª–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è:
	// "tender-automation-mvp/pkg/container"
	// "tender-automation-mvp/pkg/logger"
)

func main() {
	// =====================================================================
	// üìã –≠–¢–ê–ü 1: –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
	// =====================================================================
	
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
	// 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
	// 2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	// 3. –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	// 4. –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ –ø–∞—Ä–æ–ª–µ–π)
	
	log.Println("üöÄ Starting Tender Automation API Server...")
	
	config, err := configs.Load()
	if err != nil {
		log.Fatalf("‚ùå Failed to load configuration: %v", err)
	}
	
	log.Printf("‚úÖ Configuration loaded successfully")
	log.Printf("üìç Server will start on %s", config.Server.GetAddress())
	log.Printf("üîß Running in %s mode", config.Server.Mode)

	// =====================================================================
	// üìù –≠–¢–ê–ü 2: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –õ–û–ì–ì–ï–†–ê
	// =====================================================================
	
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é structured logger
	// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
	// 1. –°–æ–∑–¥–∞—Ç—å zap.Logger –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	// 2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	// 3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (JSON –¥–ª—è production, console –¥–ª—è dev)
	// 4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤ –µ—Å–ª–∏ output=file
	// 5. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–ª—è (service_name, version –∏ —Ç.–¥.)
	//
	// –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
	// logger, err := logger.New(config.Logging)
	// if err != nil {
	//     log.Fatalf("‚ùå Failed to initialize logger: %v", err)
	// }
	// defer logger.Sync()
	
	log.Println("üìù Logger will be initialized here") // TODO: Remove after implementation

	// =====================================================================
	// üóÉÔ∏è –≠–¢–ê–ü 3: –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•
	// =====================================================================
	
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
	// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
	// 1. –°–æ–∑–¥–∞—Ç—å connection pool —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	// 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î —á–µ—Ä–µ–∑ ping
	// 3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	// 4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å health check –¥–ª—è –ë–î
	// 5. –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	//
	// –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
	// db, err := postgres.NewConnection(config.Database)
	// if err != nil {
	//     logger.Fatal("Failed to connect to database", zap.Error(err))
	// }
	// defer db.Close()
	
	log.Println("üóÉÔ∏è Database connection will be established here") // TODO: Remove after implementation

	// =====================================================================
	// üß∞ –≠–¢–ê–ü 4: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø DI –ö–û–ù–¢–ï–ô–ù–ï–†–ê
	// =====================================================================
	
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
	// 1. –°–æ–∑–¥–∞—Ç—å –≤—Å–µ repositories (TenderRepository)
	// 2. –°–æ–∑–¥–∞—Ç—å –≤—Å–µ infrastructure services (AI client, scraper)
	// 3. –°–æ–∑–¥–∞—Ç—å –≤—Å–µ use cases
	// 4. –°–æ–∑–¥–∞—Ç—å HTTP handlers
	// 5. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å dependency injection –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
	//
	// –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
	// container, err := container.New(config, logger, db)
	// if err != nil {
	//     logger.Fatal("Failed to initialize DI container", zap.Error(err))
	// }
	// defer container.Shutdown()
	
	log.Println("üß∞ DI Container will be initialized here") // TODO: Remove after implementation

	// =====================================================================
	// üåê –≠–¢–ê–ü 5: –ù–ê–°–¢–†–û–ô–ö–ê HTTP –°–ï–†–í–ï–†–ê
	// =====================================================================
	
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É HTTP —Å–µ—Ä–≤–µ—Ä–∞
	// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
	// 1. –°–æ–∑–¥–∞—Ç—å Gin router —Å middleware
	// 2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
	// 3. –î–æ–±–∞–≤–∏—Ç—å middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
	// 4. –î–æ–±–∞–≤–∏—Ç—å middleware –¥–ª—è recovery –æ—Ç panic
	// 5. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ API routes
	// 6. –î–æ–±–∞–≤–∏—Ç—å health check –∏ metrics endpoints
	//
	// –ü—Ä–∏–º–µ—Ä middleware:
	// - gin.Logger() - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
	// - gin.Recovery() - recovery –æ—Ç panic
	// - cors.New() - CORS headers
	// - timeout.New() - —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
	//
	// –ü—Ä–∏–º–µ—Ä routes:
	// v1 := router.Group("/api/v1")
	// {
	//     tenders := v1.Group("/tenders")
	//     tenders.GET("", tenderHandler.GetTenders)
	//     tenders.GET("/:id", tenderHandler.GetTenderByID)
	//     tenders.POST("", tenderHandler.CreateTender)
	//     tenders.PUT("/:id", tenderHandler.UpdateTender)
	//     
	//     discovery := v1.Group("/discovery")
	//     discovery.POST("/start", discoveryHandler.StartDiscovery)
	//     
	//     analysis := v1.Group("/analysis")
	//     analysis.POST("/tender/:id", analysisHandler.AnalyzeTender)
	// }
	
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	mux := http.NewServeMux()
	
	// TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å Gin
	mux.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		fmt.Fprintf(w, `{"status":"ok","service":"tender-automation-api","timestamp":"%s"}`, time.Now().Format(time.RFC3339))
	})
	
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		fmt.Fprintf(w, `{
			"message":"Tender Automation MVP API",
			"version":"1.0.0",
			"status":"running",
			"endpoints":{
				"health":"/health",
				"api":"/api/v1",
				"docs":"/docs"
			}
		}`)
	})
	
	log.Println("üåê HTTP Server configured") // TODO: Remove after full implementation

	// =====================================================================
	// üöÄ –≠–¢–ê–ü 6: –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –° GRACEFUL SHUTDOWN
	// =====================================================================
	
	server := &http.Server{
		Addr:         config.Server.GetAddress(),
		Handler:      mux, // TODO: Replace with Gin router
		ReadTimeout:  config.Server.ReadTimeout,
		WriteTimeout: config.Server.WriteTimeout,
	}

	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –û–°
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Printf("üåê HTTP Server starting on %s", server.Addr)
		log.Printf("üìã Health check: http://%s/health", server.Addr)
		log.Printf("üìä API endpoints: http://%s/api/v1", server.Addr)
		
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("‚ùå Failed to start server: %v", err)
		}
	}())

	log.Println("‚úÖ Server started successfully")
	log.Println("üîÑ Press Ctrl+C to shutdown...")

	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-sigChan
	log.Println("üõë Shutdown signal received, starting graceful shutdown...")

	// =====================================================================
	// üõë –≠–¢–ê–ü 7: GRACEFUL SHUTDOWN
	// =====================================================================
	
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π graceful shutdown
	// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
	// 1. –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è shutdown
	// 2. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HTTP —Å–µ—Ä–≤–µ—Ä (–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã)
	// 3. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	// 4. –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
	// 5. –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	// 6. –ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
	//
	// –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
	// shutdownCtx, cancel := context.WithTimeout(context.Background(), config.Server.ShutdownTimeout)
	// defer cancel()
	//
	// // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	// if err := server.Shutdown(shutdownCtx); err != nil {
	//     logger.Error("Server forced to shutdown", zap.Error(err))
	// }
	//
	// // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	// if err := container.Shutdown(); err != nil {
	//     logger.Error("Failed to shutdown container", zap.Error(err))
	// }
	
	// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è MVP
	shutdownCtx, cancel := context.WithTimeout(context.Background(), config.Server.ShutdownTimeout)
	defer cancel()

	if err := server.Shutdown(shutdownCtx); err != nil {
		log.Printf("‚ùå Server forced to shutdown: %v", err)
	} else {
		log.Println("‚úÖ Server stopped gracefully")
	}

	log.Println("üëã Tender Automation API Server stopped")
}

// =====================================================================
// üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
// =====================================================================

// TODO: –î–æ–±–∞–≤–∏—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

// initHealthChecks –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç health check endpoints
// func initHealthChecks(router *gin.Engine, container *container.Container) {
//     health := router.Group("/health")
//     {
//         health.GET("", healthHandler.Overall)
//         health.GET("/db", healthHandler.Database)
//         health.GET("/ai", healthHandler.AI)
//         health.GET("/scraper", healthHandler.Scraper)
//     }
// }

// initMetrics –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Prometheus metrics
// func initMetrics(router *gin.Engine) {
//     router.GET("/metrics", gin.WrapH(promhttp.Handler()))
// }

// initDocs –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
// func initDocs(router *gin.Engine) {
//     if config.IsDevelopment() {
//         router.GET("/docs/*any", ginSwagger.WrapHandler(swaggerfiles.Handler))
//     }
// }

// validateDependencies –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
// func validateDependencies(config *configs.Config) error {
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ–Ω–¥–µ—Ä–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫
//     return nil
// }

// =====================================================================
// üîß –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ó–ê–ü–£–°–ö–£
// =====================================================================

// TODO: –î–ª—è –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:
//
// 1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:
//    cp .env.example .env
//    # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
//
// 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL:
//    docker run -d --name postgres \
//      -e POSTGRES_PASSWORD=password \
//      -e POSTGRES_DB=tender_automation \
//      -p 5432:5432 postgres:15
//
// 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Ollama (–¥–ª—è AI):
//    ollama serve
//    ollama pull llama2
//
// 4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏:
//    migrate -path migrations -database "postgres://..." up
//
// 5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:
//    go run cmd/api/main.go
//
// 6. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É:
//    curl http://localhost:8080/health
//
// API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8080
// Health check: http://localhost:8080/health
// –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8080/docs (–≤ development —Ä–µ–∂–∏–º–µ)

// =====================================================================
// ‚úÖ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
// =====================================================================

// –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π lifecycle HTTP API —Å–µ—Ä–≤–µ—Ä–∞:
// 1. ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
// 2. üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ - TODO
// 3. üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î - TODO  
// 4. üîÑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - TODO
// 5. üîÑ HTTP —Å–µ—Ä–≤–µ—Ä - —á–∞—Å—Ç–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
// 6. ‚úÖ Graceful shutdown - —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
//
// –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
// 1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å pkg/logger
// 2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å pkg/container
// 3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å infrastructure/database
// 4. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å interfaces/http
// 5. –î–æ–±–∞–≤–∏—Ç—å middleware –∏ routes
// 6. –î–æ–±–∞–≤–∏—Ç—å tests