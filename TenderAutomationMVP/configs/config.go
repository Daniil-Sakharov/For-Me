// =====================================================================
// ‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
// =====================================================================
//
// –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Tender Automation MVP.
// –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º 12-factor app:
// 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
// 2. –°—Ç—Ä–æ–≥–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–¥–æ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
// 3. –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è development –æ–∫—Ä—É–∂–µ–Ω–∏—è
// 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
//
// TODO: –ü—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å:
// - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Redis (–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—á–µ—Ä–µ–¥–∏)
// - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è email –æ—Ç–ø—Ä–∞–≤–∫–∏ (SMTP/IMAP)
// - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
// - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –º–µ—Ç—Ä–∏–∫

package configs

import (
	"fmt"
	"strings"
	"time"

	"github.com/go-playground/validator/v10"
	"github.com/spf13/viper"
)

// =====================================================================
// üìä –û–°–ù–û–í–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
// =====================================================================

// Config —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
//
// TODO: –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Å–µ–∫—Ü–∏—è–º–∏
// TODO: –î–æ–±–∞–≤–∏—Ç—å hot-reload –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
type Config struct {
	// üñ•Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞
	Server ServerConfig `mapstructure:"server" validate:"required"`

	// üóÉÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	Database DatabaseConfig `mapstructure:"database" validate:"required"`

	// ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (Ollama/Llama)
	AI AIConfig `mapstructure:"ai" validate:"required"`

	// üï∑Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ web scraping
	Scraping ScrapingConfig `mapstructure:"scraping" validate:"required"`

	// üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	Logging LoggingConfig `mapstructure:"logging" validate:"required"`

	// üéØ –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	Business BusinessConfig `mapstructure:"business" validate:"required"`

	// üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	Security SecurityConfig `mapstructure:"security" validate:"required"`

	// üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	Monitoring MonitoringConfig `mapstructure:"monitoring" validate:"required"`
}

// =====================================================================
// üñ•Ô∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø HTTP –°–ï–†–í–ï–†–ê
// =====================================================================

// ServerConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞
//
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TLS –¥–ª—è production
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting
type ServerConfig struct {
	// üåê –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	Host string `mapstructure:"host" validate:"required" default:"0.0.0.0"`
	Port int    `mapstructure:"port" validate:"required,min=1,max=65535" default:"8080"`

	// ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç—ã
	ReadTimeout     time.Duration `mapstructure:"read_timeout" default:"30s"`
	WriteTimeout    time.Duration `mapstructure:"write_timeout" default:"30s"`
	ShutdownTimeout time.Duration `mapstructure:"shutdown_timeout" default:"10s"`

	// üìè –õ–∏–º–∏—Ç—ã
	MaxRequestSize string `mapstructure:"max_request_size" default:"10MB"`

	// üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
	Mode string `mapstructure:"mode" validate:"oneof=debug release test" default:"debug"`
}

// GetAddress –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
func (s ServerConfig) GetAddress() string {
	return fmt.Sprintf("%s:%d", s.Host, s.Port)
}

// =====================================================================
// üóÉÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
// =====================================================================

// DatabaseConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
//
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è connection pooling
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è read replicas
type DatabaseConfig struct {
	// üîó –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	Host     string `mapstructure:"host" validate:"required" default:"localhost"`
	Port     int    `mapstructure:"port" validate:"required,min=1,max=65535" default:"5432"`
	User     string `mapstructure:"user" validate:"required" default:"postgres"`
	Password string `mapstructure:"password" validate:"required"`
	DBName   string `mapstructure:"dbname" validate:"required" default:"tender_automation"`
	SSLMode  string `mapstructure:"sslmode" validate:"oneof=disable require verify-ca verify-full" default:"disable"`

	// üèä Connection pool –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	MaxOpenConns    int           `mapstructure:"max_open_conns" validate:"min=1" default:"25"`
	MaxIdleConns    int           `mapstructure:"max_idle_conns" validate:"min=1" default:"5"`
	ConnMaxLifetime time.Duration `mapstructure:"conn_max_lifetime" default:"1h"`
	ConnMaxIdleTime time.Duration `mapstructure:"conn_max_idle_time" default:"30m"`

	// üïê –¢–∞–π–º–∞—É—Ç—ã
	ConnectTimeout time.Duration `mapstructure:"connect_timeout" default:"10s"`
	QueryTimeout   time.Duration `mapstructure:"query_timeout" default:"30s"`
}

// GetDSN –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Data Source Name –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
func (d DatabaseConfig) GetDSN() string {
	return fmt.Sprintf(
		"host=%s port=%d user=%s password=%s dbname=%s sslmode=%s",
		d.Host, d.Port, d.User, d.Password, d.DBName, d.SSLMode,
	)
}

// =====================================================================
// ü§ñ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
// =====================================================================

// AIConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI (Ollama/Llama)
//
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è fallback –º–æ–¥–µ–ª–µ–π
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è AI –æ—Ç–≤–µ—Ç–æ–≤
type AIConfig struct {
	// üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama
	URL   string `mapstructure:"url" validate:"required,url" default:"http://localhost:11434"`
	Model string `mapstructure:"model" validate:"required" default:"llama2"`

	// ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç—ã –∏ retry
	Timeout    time.Duration `mapstructure:"timeout" default:"60s"`
	MaxRetries int           `mapstructure:"max_retries" validate:"min=0" default:"3"`
	RetryDelay time.Duration `mapstructure:"retry_delay" default:"5s"`

	// üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
	RelevanceThreshold float64 `mapstructure:"relevance_threshold" validate:"min=0,max=1" default:"0.7"`
	BatchSize          int     `mapstructure:"batch_size" validate:"min=1" default:"10"`

	// üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	Temperature float64 `mapstructure:"temperature" validate:"min=0,max=2" default:"0.1"`
	MaxTokens   int     `mapstructure:"max_tokens" validate:"min=1" default:"1000"`
}

// =====================================================================
// üï∑Ô∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø WEB SCRAPING
// =====================================================================

// ScrapingConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–Ω–¥–µ—Ä–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫
//
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è proxy rotation
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è captcha —Ä–µ—à–µ–Ω–∏—è
type ScrapingConfig struct {
	// üö¶ Rate limiting –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
	Delay          time.Duration `mapstructure:"delay" default:"2s"`
	MaxConcurrent  int           `mapstructure:"max_concurrent" validate:"min=1" default:"3"`
	UserAgent      string        `mapstructure:"user_agent" default:"Mozilla/5.0 (compatible; TenderBot/1.0)"`

	// üîÑ Retry –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	MaxRetries   int           `mapstructure:"max_retries" validate:"min=0" default:"3"`
	RetryDelay   time.Duration `mapstructure:"retry_delay" default:"5s"`

	// ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç—ã
	RequestTimeout time.Duration `mapstructure:"request_timeout" default:"30s"`
	PageTimeout    time.Duration `mapstructure:"page_timeout" default:"60s"`

	// üéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
	EnabledPlatforms []string `mapstructure:"enabled_platforms" default:"zakupki"`

	// üìä Batch –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	BatchSize     int           `mapstructure:"batch_size" validate:"min=1" default:"50"`
	ScanInterval  time.Duration `mapstructure:"scan_interval" default:"1h"`
}

// IsPlatformEnabled –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
func (s ScrapingConfig) IsPlatformEnabled(platform string) bool {
	for _, enabled := range s.EnabledPlatforms {
		if enabled == platform {
			return true
		}
	}
	return false
}

// =====================================================================
// üìù –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
// =====================================================================

// LoggingConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
//
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ –≤–Ω–µ—à–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
type LoggingConfig struct {
	// üìä –£—Ä–æ–≤–µ–Ω—å –∏ —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	Level  string `mapstructure:"level" validate:"oneof=debug info warn error fatal" default:"info"`
	Format string `mapstructure:"format" validate:"oneof=json console" default:"json"`
	Output string `mapstructure:"output" validate:"oneof=stdout stderr file" default:"stdout"`

	// üóÇÔ∏è –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ output=file)
	FileName   string `mapstructure:"file_name" default:"app.log"`
	MaxSize    int    `mapstructure:"max_size" default:"100"` // MB
	MaxBackups int    `mapstructure:"max_backups" default:"3"`
	MaxAge     int    `mapstructure:"max_age" default:"28"` // days

	// üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	EnableCaller     bool `mapstructure:"enable_caller" default:"true"`
	EnableStacktrace bool `mapstructure:"enable_stacktrace" default:"false"`
}

// =====================================================================
// üéØ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ò
// =====================================================================

// BusinessConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
//
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
type BusinessConfig struct {
	// ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI –∞–Ω–∞–ª–∏–∑–∞
	MinAIScoreThreshold float64 `mapstructure:"min_ai_score_threshold" validate:"min=0,max=1" default:"0.7"`
	AnalysisBatchSize   int     `mapstructure:"analysis_batch_size" validate:"min=1" default:"10"`

	// üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	DefaultPageSize int `mapstructure:"default_page_size" validate:"min=1" default:"20"`
	MaxPageSize     int `mapstructure:"max_page_size" validate:"min=1" default:"100"`

	// üè∑Ô∏è –°—Ç–∞—Ç—É—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	DefaultTenderStatus string `mapstructure:"default_tender_status" default:"active"`

	// ‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
	TenderDiscoveryInterval time.Duration `mapstructure:"tender_discovery_interval" default:"1h"`
	AIAnalysisInterval      time.Duration `mapstructure:"ai_analysis_interval" default:"30m"`
	CleanupInterval         time.Duration `mapstructure:"cleanup_interval" default:"24h"`
}

// =====================================================================
// üîí –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
// =====================================================================

// SecurityConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
//
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
type SecurityConfig struct {
	// üåê CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	CORSAllowedOrigins     []string `mapstructure:"cors_allowed_origins" default:"http://localhost:3000,http://localhost:8080"`
	CORSAllowedMethods     []string `mapstructure:"cors_allowed_methods" default:"GET,POST,PUT,DELETE,OPTIONS"`
	CORSAllowedHeaders     []string `mapstructure:"cors_allowed_headers" default:"*"`
	CORSAllowCredentials   bool     `mapstructure:"cors_allow_credentials" default:"true"`

	// üö¶ Rate limiting (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
	RateLimitEnabled bool          `mapstructure:"rate_limit_enabled" default:"false"`
	RateLimitRPS     int           `mapstructure:"rate_limit_rps" default:"100"`
	RateLimitBurst   int           `mapstructure:"rate_limit_burst" default:"200"`

	// ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
	RequestTimeout time.Duration `mapstructure:"request_timeout" default:"30s"`
}

// =====================================================================
// üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
// =====================================================================

// MonitoringConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –º–µ—Ç—Ä–∏–∫
//
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Prometheus –∏ Grafana
// TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è health checks
type MonitoringConfig struct {
	// üìà –ú–µ—Ç—Ä–∏–∫–∏
	MetricsEnabled bool   `mapstructure:"metrics_enabled" default:"true"`
	MetricsPath    string `mapstructure:"metrics_path" default:"/metrics"`

	// üîç Health check
	HealthCheckPath string `mapstructure:"health_check_path" default:"/health"`

	// üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
	ProfilerEnabled bool   `mapstructure:"profiler_enabled" default:"false"`
	ProfilerPath    string `mapstructure:"profiler_path" default:"/debug/pprof"`
}

// =====================================================================
// üîß –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò –ò –í–ê–õ–ò–î–ê–¶–ò–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
// =====================================================================

// Load –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Ñ–∞–π–ª–æ–≤
//
// TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (config.yml)
// TODO: –î–æ–±–∞–≤–∏—Ç—å hot-reload –¥–ª—è –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
func Load() (*Config, error) {
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º viper –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	viper.SetConfigName(".env")
	viper.SetConfigType("env")
	viper.AddConfigPath(".")
	viper.AutomaticEnv()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	viper.SetEnvKeyReplacer(strings.NewReplacer(".", "_"))

	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	if err := viper.ReadInConfig(); err != nil {
		// –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
		// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
	setDefaults()

	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	var config Config

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ viper
	if err := viper.Unmarshal(&config); err != nil {
		return nil, fmt.Errorf("failed to unmarshal config: %w", err)
	}

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if err := validateConfig(&config); err != nil {
		return nil, fmt.Errorf("config validation failed: %w", err)
	}

	return &config, nil
}

// setDefaults —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
//
// TODO: –í—ã–Ω–µ—Å—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
func setDefaults() {
	// üñ•Ô∏è Server defaults
	viper.SetDefault("server.host", "0.0.0.0")
	viper.SetDefault("server.port", 8080)
	viper.SetDefault("server.read_timeout", "30s")
	viper.SetDefault("server.write_timeout", "30s")
	viper.SetDefault("server.shutdown_timeout", "10s")
	viper.SetDefault("server.max_request_size", "10MB")
	viper.SetDefault("server.mode", "debug")

	// üóÉÔ∏è Database defaults
	viper.SetDefault("database.host", "localhost")
	viper.SetDefault("database.port", 5432)
	viper.SetDefault("database.user", "postgres")
	viper.SetDefault("database.dbname", "tender_automation")
	viper.SetDefault("database.sslmode", "disable")
	viper.SetDefault("database.max_open_conns", 25)
	viper.SetDefault("database.max_idle_conns", 5)
	viper.SetDefault("database.conn_max_lifetime", "1h")
	viper.SetDefault("database.conn_max_idle_time", "30m")
	viper.SetDefault("database.connect_timeout", "10s")
	viper.SetDefault("database.query_timeout", "30s")

	// ü§ñ AI defaults
	viper.SetDefault("ai.url", "http://localhost:11434")
	viper.SetDefault("ai.model", "llama2")
	viper.SetDefault("ai.timeout", "60s")
	viper.SetDefault("ai.max_retries", 3)
	viper.SetDefault("ai.retry_delay", "5s")
	viper.SetDefault("ai.relevance_threshold", 0.7)
	viper.SetDefault("ai.batch_size", 10)
	viper.SetDefault("ai.temperature", 0.1)
	viper.SetDefault("ai.max_tokens", 1000)

	// üï∑Ô∏è Scraping defaults
	viper.SetDefault("scraping.delay", "2s")
	viper.SetDefault("scraping.max_concurrent", 3)
	viper.SetDefault("scraping.user_agent", "Mozilla/5.0 (compatible; TenderBot/1.0)")
	viper.SetDefault("scraping.max_retries", 3)
	viper.SetDefault("scraping.retry_delay", "5s")
	viper.SetDefault("scraping.request_timeout", "30s")
	viper.SetDefault("scraping.page_timeout", "60s")
	viper.SetDefault("scraping.enabled_platforms", []string{"zakupki"})
	viper.SetDefault("scraping.batch_size", 50)
	viper.SetDefault("scraping.scan_interval", "1h")

	// üìù Logging defaults
	viper.SetDefault("logging.level", "info")
	viper.SetDefault("logging.format", "json")
	viper.SetDefault("logging.output", "stdout")
	viper.SetDefault("logging.file_name", "app.log")
	viper.SetDefault("logging.max_size", 100)
	viper.SetDefault("logging.max_backups", 3)
	viper.SetDefault("logging.max_age", 28)
	viper.SetDefault("logging.enable_caller", true)
	viper.SetDefault("logging.enable_stacktrace", false)

	// üéØ Business defaults
	viper.SetDefault("business.min_ai_score_threshold", 0.7)
	viper.SetDefault("business.analysis_batch_size", 10)
	viper.SetDefault("business.default_page_size", 20)
	viper.SetDefault("business.max_page_size", 100)
	viper.SetDefault("business.default_tender_status", "active")
	viper.SetDefault("business.tender_discovery_interval", "1h")
	viper.SetDefault("business.ai_analysis_interval", "30m")
	viper.SetDefault("business.cleanup_interval", "24h")

	// üîí Security defaults
	viper.SetDefault("security.cors_allowed_origins", []string{"http://localhost:3000", "http://localhost:8080"})
	viper.SetDefault("security.cors_allowed_methods", []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"})
	viper.SetDefault("security.cors_allowed_headers", []string{"*"})
	viper.SetDefault("security.cors_allow_credentials", true)
	viper.SetDefault("security.rate_limit_enabled", false)
	viper.SetDefault("security.rate_limit_rps", 100)
	viper.SetDefault("security.rate_limit_burst", 200)
	viper.SetDefault("security.request_timeout", "30s")

	// üìä Monitoring defaults
	viper.SetDefault("monitoring.metrics_enabled", true)
	viper.SetDefault("monitoring.metrics_path", "/metrics")
	viper.SetDefault("monitoring.health_check_path", "/health")
	viper.SetDefault("monitoring.profiler_enabled", false)
	viper.SetDefault("monitoring.profiler_path", "/debug/pprof")
}

// validateConfig –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
//
// TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
// TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
func validateConfig(config *Config) error {
	validate := validator.New()

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if err := validate.Struct(config); err != nil {
		return fmt.Errorf("config validation failed: %w", err)
	}

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
	if config.Database.Password == "" {
		return fmt.Errorf("database password is required")
	}

	if config.Business.DefaultPageSize > config.Business.MaxPageSize {
		return fmt.Errorf("default page size cannot be greater than max page size")
	}

	if config.AI.RelevanceThreshold < 0 || config.AI.RelevanceThreshold > 1 {
		return fmt.Errorf("AI relevance threshold must be between 0 and 1")
	}

	return nil
}

// =====================================================================
// üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =====================================================================

// GetEnv –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func GetEnv(key, defaultValue string) string {
	if value := viper.GetString(key); value != "" {
		return value
	}
	return defaultValue
}

// IsProduction –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ production —Ä–µ–∂–∏–º–µ
func (c *Config) IsProduction() bool {
	return strings.ToLower(c.Server.Mode) == "release"
}

// IsDevelopment –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ development —Ä–µ–∂–∏–º–µ
func (c *Config) IsDevelopment() bool {
	return strings.ToLower(c.Server.Mode) == "debug"
}

// =====================================================================
// üìù –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
// =====================================================================

// TODO: –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ:
//
// 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
//    config, err := configs.Load()
//    if err != nil {
//        log.Fatal("Failed to load config:", err)
//    }
//
// 2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ HTTP —Å–µ—Ä–≤–µ—Ä–µ:
//    server := &http.Server{
//        Addr:         config.Server.GetAddress(),
//        ReadTimeout:  config.Server.ReadTimeout,
//        WriteTimeout: config.Server.WriteTimeout,
//    }
//
// 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:
//    db, err := sql.Open("postgres", config.Database.GetDSN())
//
// 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –∫–ª–∏–µ–Ω—Ç–∞:
//    aiClient := ai.NewLlamaClient(config.AI.URL, config.AI.Model)
//
// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã:
//    if config.IsProduction() {
//        // Production specific logic
//    }

// =====================================================================
// ‚úÖ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
// =====================================================================

// –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è MVP —Å–∏—Å—Ç–µ–º—ã.
// –ü—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:
// 1. –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
// 2. –û–±–Ω–æ–≤–ª—è–π—Ç–µ setDefaults() —Å –Ω–æ–≤—ã–º–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
// 3. –î–æ–±–∞–≤–ª—è–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
// 4. –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
//
// –ü–æ–º–Ω–∏—Ç–µ: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å thread-safe –∏ immutable –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.