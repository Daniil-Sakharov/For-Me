# =====================================================================
# üê≥ DOCKERFILE –î–õ–Ø TENDER AUTOMATION MVP
# =====================================================================
#
# Multi-stage Dockerfile –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
# 1. Builder stage - –∫–æ–º–ø–∏–ª—è—Ü–∏—è Go –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# 2. Development stage - –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å hot reload
# 3. Production stage - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –¥–ª—è production
#
# TODO: –ü—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å:
# - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
# - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è HTTPS –∫–ª–∏–µ–Ω—Ç–æ–≤
# - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
# - Health check —Å–∫—Ä–∏–ø—Ç

# =====================================================================
# üîß BUILDER STAGE - –ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# =====================================================================
FROM golang:1.21-alpine AS builder

# üìù –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑–∞
LABEL maintainer="tender-automation-team"
LABEL description="Tender Automation MVP - Builder Stage"
LABEL version="1.0.0"

# üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    curl \
    bash

# üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
WORKDIR /build

# üì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ go.mod –∏ go.sum –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY go.mod go.sum ./

# ‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–±—É–¥–µ—Ç –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–æ –µ—Å–ª–∏ go.mod –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è)
RUN go mod download && go mod verify

# üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
COPY . .

# üèóÔ∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
# –§–ª–∞–≥–∏:
# -ldflags="-s -w" - —É–¥–∞–ª–µ–Ω–∏–µ debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
# -trimpath - —É–¥–∞–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤ –∏–∑ executable
# -tags netgo - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ª–∏–Ω–∫–æ–≤–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
# -a - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-s -w -X main.version=1.0.0 -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
    -trimpath \
    -tags netgo \
    -a -installsuffix cgo \
    -o app cmd/api/main.go

# üß™ –ö–æ–º–ø–∏–ª—è—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç (scraper, cli)
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-s -w" \
    -trimpath \
    -tags netgo \
    -a -installsuffix cgo \
    -o scraper cmd/scraper/main.go

RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-s -w" \
    -trimpath \
    -tags netgo \
    -a -installsuffix cgo \
    -o cli cmd/cli/main.go

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ executable —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
RUN ./app --version || echo "Version command not implemented yet"
RUN file ./app
RUN ls -la ./app

# =====================================================================
# üõ†Ô∏è DEVELOPMENT STAGE - –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
# =====================================================================
FROM golang:1.21-alpine AS development

# üìù –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
LABEL stage="development"
LABEL description="Tender Automation MVP - Development Stage"

# üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    curl \
    bash \
    make \
    gcc \
    musl-dev \
    sqlite \
    postgresql-client

# üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö Go –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
RUN go install github.com/cosmtrek/air@latest && \
    go install github.com/golang-migrate/migrate/v4/cmd/migrate@latest && \
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

# üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
WORKDIR /app

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
ENV GO111MODULE=on \
    CGO_ENABLED=0 \
    GOOS=linux \
    GOARCH=amd64 \
    GIN_MODE=debug

# üì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ go.mod –∏ go.sum
COPY go.mod go.sum ./
RUN go mod download

# üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
COPY . .

# üë§ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ñ–∞–π–ª–æ–≤
RUN chown -R appuser:appgroup /app

# üë§ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER appuser

# üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞
EXPOSE 8080

# üîç Health check –¥–ª—è development
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# üöÄ –ö–æ–º–∞–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å hot reload —á–µ—Ä–µ–∑ air)
CMD ["air", "-c", ".air.toml"]

# =====================================================================
# üöÄ PRODUCTION STAGE - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –¥–ª—è production
# =====================================================================
FROM alpine:3.18 AS production

# üìù –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è production
LABEL stage="production"
LABEL description="Tender Automation MVP - Production Stage"
LABEL version="1.0.0"
LABEL vendor="Tender Automation Team"

# üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö runtime –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    curl \
    && update-ca-certificates

# üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ shell –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup -s /sbin/nologin

# üìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
RUN mkdir -p /app/logs /app/tmp /app/uploads && \
    chown -R appuser:appgroup /app

# üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
WORKDIR /app

# üì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ builder stage
COPY --from=builder --chown=appuser:appgroup /build/app ./
COPY --from=builder --chown=appuser:appgroup /build/scraper ./
COPY --from=builder --chown=appuser:appgroup /build/cli ./

# üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
COPY --chown=appuser:appgroup .env.example ./
COPY --chown=appuser:appgroup migrations/ ./migrations/

# üìã –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è production
RUN echo '#!/bin/sh\n\
echo "üöÄ Starting Tender Automation in Production Mode"\n\
echo "üìä Application: $APP_NAME"\n\
echo "üåç Environment: $APP_ENV"\n\
echo "üåê Server Address: $SERVER_HOST:$SERVER_PORT"\n\
echo "üóÉÔ∏è Database: $DB_HOST:$DB_PORT/$DB_NAME"\n\
echo "ü§ñ AI Service: $AI_URL"\n\
exec ./app "$@"' > entrypoint.sh && \
    chmod +x entrypoint.sh && \
    chown appuser:appgroup entrypoint.sh

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è production
ENV APP_ENV=production \
    GIN_MODE=release \
    LOG_LEVEL=info \
    LOG_FORMAT=json \
    LOG_OUTPUT=stdout

# üë§ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER appuser

# üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞
EXPOSE 8080

# üîç Health check –¥–ª—è production
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ volume –¥–ª—è –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
VOLUME ["/app/logs"]

# üöÄ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
ENTRYPOINT ["./entrypoint.sh"]

# üîß –ö–æ–º–∞–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
CMD []

# =====================================================================
# üß™ TEST STAGE - –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
# =====================================================================
FROM golang:1.21-alpine AS test

# üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
RUN apk add --no-cache \
    git \
    ca-certificates \
    curl \
    bash \
    gcc \
    musl-dev

# üìä –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
WORKDIR /app

# üì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
COPY . .

# ‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN go mod download

# üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
RUN go test -v -race -coverprofile=coverage.out ./...

# üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
RUN go tool cover -html=coverage.out -o coverage.html

# =====================================================================
# üîß –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ
# =====================================================================

# TODO: –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞:
#
# üèóÔ∏è –°–±–æ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
#   docker build --target development -t tender-automation:dev .
#
# üöÄ –°–±–æ—Ä–∫–∞ –¥–ª—è production:
#   docker build --target production -t tender-automation:prod .
#
# üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤:
#   docker build --target test -t tender-automation:test .
#
# üîß –ó–∞–ø—É—Å–∫ development –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:
#   docker run -p 8080:8080 -v $(pwd):/app tender-automation:dev
#
# üöÄ –ó–∞–ø—É—Å–∫ production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:
#   docker run -p 8080:8080 \
#     -e DB_HOST=localhost \
#     -e DB_PASSWORD=password \
#     tender-automation:prod
#
# üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤:
#   docker images | grep tender-automation
#
# üîç –ò–Ω—Å–ø–µ–∫—Ü–∏—è –æ–±—Ä–∞–∑–∞:
#   docker inspect tender-automation:prod
#
# üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:
#   docker logs container_name
#
# üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É:
#   docker exec -it container_name sh
#
# üß™ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏:
#   docker run --rm -v $(pwd):/output tender-automation:test \
#     cp coverage.html /output/

# =====================================================================
# üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
# =====================================================================

# TODO: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
#
# 1. üë§ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
# 2. üîß –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π base –æ–±—Ä–∞–∑ (Alpine Linux)
# 3. üì¶ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è –±–µ–∑ CGO
# 4. üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ build –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ production
# 5. üîç Health checks –¥–ª—è monitoring
# 6. üìä Read-only —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å)
# 7. üåê –¢–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ—Ä—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã
#
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è production:
# - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ AppArmor/SELinux –ø—Ä–æ—Ñ–∏–ª–∏
# - –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ –æ–±—Ä–∞–∑—ã –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
# - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ signed –æ–±—Ä–∞–∑—ã

# =====================================================================
# üìä –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø
# =====================================================================

# TODO: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–∞:
#
# üìè –†–∞–∑–º–µ—Ä—ã –æ–±—Ä–∞–∑–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ):
# - Builder: ~800MB (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–±–æ—Ä–∫–∏)
# - Development: ~500MB (—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏)
# - Production: ~20MB (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π)
# - Test: ~300MB (—Å coverage tools)
#
# üöÄ Performance –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
# - Multi-stage build –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
# - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–µ–≤ Docker
# - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è
# - –£–¥–∞–ª–µ–Ω–∏–µ debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
#
# üíæ Storage –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
# - .dockerignore –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
# - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π base –æ–±—Ä–∞–∑
# - –û—á–∏—Å—Ç–∫–∞ package cache

# =====================================================================
# ‚úÖ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
# =====================================================================

# –≠—Ç–æ—Ç Dockerfile –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
# ‚úÖ Multi-stage —Å–±–æ—Ä–∫—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
# ‚úÖ –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã –¥–ª—è dev/test/prod
# ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä production –æ–±—Ä–∞–∑–∞
# ‚úÖ Health checks –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# ‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–º–ø–∏–ª—è—Ü–∏—é –¥–ª—è –ø–æ—Ä—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
#
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ targets:
# - development: –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å hot reload
# - production: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –¥–ª—è prod
# - test: –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ coverage