// üóÑÔ∏è –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –®–ê–ë–õ–û–ù REPOSITORY INTERFACE –¥–ª—è Clean Architecture
//
// ‚úÖ –í–°–ï–ì–î–ê –æ–¥–∏–Ω–∞–∫–æ–≤–æ:
// - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Repository –≤ domain —Å–ª–æ–µ
// - –ë–∞–∑–æ–≤—ã–µ CRUD –º–µ—Ç–æ–¥—ã (Save, FindByID, Delete)
// - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–∞—Ö
// - –ù–ï–¢ –∏–º–ø–æ—Ä—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –ë–î!
//
// üîÄ –ú–ï–ù–Ø–ï–¢–°–Ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞:
// - –ù–∞–∑–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ (User, Product, Order, etc.)
// - –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ (FindByEmail, FindByCategory, etc.)
// - –ú–µ—Ç–æ–¥—ã –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ (ExistsByEmail, CountByStatus, etc.)

package example_entity // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ (user, product, order, etc.)

import (
	"context"
	
	// ‚úÖ –í–°–ï–ì–î–ê: —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞!
	// ‚ùå –ù–ï –ò–ú–ü–û–†–¢–ò–†–£–ô–¢–ï: database/sql, gorm, mongo-driver –∏ –¥—Ä—É–≥–∏–µ –ë–î –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
)

// üèõÔ∏è –ò–ù–¢–ï–†–§–ï–ô–° –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø
// ‚úÖ –í–°–ï–ì–î–ê: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ domain —Å–ª–æ–µ, —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ infrastructure
type Repository interface {
	
	// ‚úÖ –ë–ê–ó–û–í–´–ï CRUD –û–ü–ï–†–ê–¶–ò–ò (–≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω—ã):
	
	// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å (—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)
	Save(ctx context.Context, entity *ExampleEntity) error // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏
	
	// –ù–∞–π—Ç–∏ —Å—É—â–Ω–æ—Å—Ç—å –ø–æ ID
	FindByID(ctx context.Context, id uint) (*ExampleEntity, error) // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏
	
	// –£–¥–∞–ª–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –ø–æ ID
	Delete(ctx context.Context, id uint) error
	
	// üîÄ –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –ü–û–ò–°–ö–ê (–¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥ –≤–∞—à—É —Å—É—â–Ω–æ—Å—Ç—å):
	
	// –ü—Ä–∏–º–µ—Ä—ã –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è ExampleEntity (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ):
	FindBySampleField(ctx context.Context, field string) (*ExampleEntity, error) // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï
	ExistsBySampleField(ctx context.Context, field string) (bool, error)         // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï
	
	// üìù –ü–†–ò–ú–ï–†–´ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π:
	
	// –î–õ–Ø USER:
	// FindByEmail(ctx context.Context, email string) (*User, error)
	// FindByEmailAndPassword(ctx context.Context, email, hashedPassword string) (*User, error)
	// ExistsByEmail(ctx context.Context, email string) (bool, error)
	// FindActiveUsers(ctx context.Context) ([]*User, error)
	// FindUsersByRole(ctx context.Context, role string) ([]*User, error)
	// CountUsers(ctx context.Context) (int64, error)
	// UpdateLastLogin(ctx context.Context, userID uint) error
	
	// –î–õ–Ø PRODUCT:
	// FindBySKU(ctx context.Context, sku string) (*Product, error)
	// FindByCategory(ctx context.Context, categoryID uint) ([]*Product, error)
	// FindAvailableProducts(ctx context.Context) ([]*Product, error)
	// FindProductsByPriceRange(ctx context.Context, minPrice, maxPrice float64) ([]*Product, error)
	// ExistsBySKU(ctx context.Context, sku string) (bool, error)
	// UpdateStock(ctx context.Context, productID uint, newStock int) error
	// DecrementStock(ctx context.Context, productID uint, quantity int) error
	// CountProductsByCategory(ctx context.Context, categoryID uint) (int64, error)
	
	// –î–õ–Ø ORDER:
	// FindByUserID(ctx context.Context, userID uint) ([]*Order, error)
	// FindByStatus(ctx context.Context, status string) ([]*Order, error)
	// FindOrdersByDateRange(ctx context.Context, startDate, endDate time.Time) ([]*Order, error)
	// UpdateStatus(ctx context.Context, orderID uint, status string) error
	// CountOrdersByStatus(ctx context.Context, status string) (int64, error)
	// CalculateTotalRevenue(ctx context.Context) (float64, error)
	// FindPendingOrders(ctx context.Context) ([]*Order, error)
	
	// üîÄ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (–¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏):
	
	// –ü–∞–≥–∏–Ω–∞—Ü–∏—è:
	// FindAll(ctx context.Context, limit, offset int) ([]*ExampleEntity, error)
	// FindWithPagination(ctx context.Context, page, size int) ([]*ExampleEntity, int64, error)
	
	// –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:
	// Search(ctx context.Context, query string) ([]*ExampleEntity, error)
	// FindByFilters(ctx context.Context, filters map[string]interface{}) ([]*ExampleEntity, error)
	
	// –°—á–µ—Ç—á–∏–∫–∏ –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è:
	// Count(ctx context.Context) (int64, error)
	// CountByCondition(ctx context.Context, condition string) (int64, error)
	
	// Batch –æ–ø–µ—Ä–∞—Ü–∏–∏:
	// SaveBatch(ctx context.Context, entities []*ExampleEntity) error
	// DeleteBatch(ctx context.Context, ids []uint) error
	
	// Soft delete (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω):
	// SoftDelete(ctx context.Context, id uint) error
	// Restore(ctx context.Context, id uint) error
	// FindDeleted(ctx context.Context) ([]*ExampleEntity, error)
}

// üìö –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ê–î–ê–ü–¢–ê–¶–ò–ò:
//
// 1. üîÄ –ü–ï–†–ï–ò–ú–ï–ù–£–ô–¢–ï —Ñ–∞–π–ª –∏ –ø–∞–∫–µ—Ç:
//    example_entity ‚Üí user (–∏–ª–∏ product, order, etc.)
//
// 2. üîÄ –ó–ê–ú–ï–ù–ò–¢–ï ExampleEntity:
//    –ù–∞ User, Product, Order –∏–ª–∏ –≤–∞—à—É —Å—É—â–Ω–æ—Å—Ç—å
//
// 3. ‚úÖ –°–û–•–†–ê–ù–ò–¢–ï –±–∞–∑–æ–≤—ã–µ CRUD –º–µ—Ç–æ–¥—ã:
//    Save, FindByID, Delete - –Ω—É–∂–Ω—ã –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞
//
// 4. üîÄ –î–û–ë–ê–í–¨–¢–ï —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã:
//    –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–µ, —á—Ç–æ –ø–æ–¥—Ö–æ–¥—è—Ç –≤–∞—à–µ–π —Å—É—â–Ω–æ—Å—Ç–∏
//
// 5. üîÄ –°–û–ó–î–ê–ô–¢–ï —Å–≤–æ–∏ –º–µ—Ç–æ–¥—ã:
//    –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
//
// 6. ‚úÖ –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ context.Context:
//    –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–∞–∂–¥–æ–º –º–µ—Ç–æ–¥–µ
//
// 7. ‚úÖ –ù–ï –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ë–î –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
//    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å—Ç—ã–º –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
//
// 8. üìù –î–û–ö–£–ú–ï–ù–¢–ò–†–£–ô–¢–ï –º–µ—Ç–æ–¥—ã:
//    –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
//
// üìã –ü–†–ò–ù–¶–ò–ü–´ REPOSITORY PATTERN:
//
// ‚úÖ –î–ï–õ–ê–ô–¢–ï:
// - –û–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ –ß–¢–û –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å, –Ω–µ –ö–ê–ö
// - –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—á–µ—Å–∫–∏
// - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤
// - –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –¥–æ–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã (–Ω–µ DTO)
// - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—à–∏–±–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
//
// ‚ùå –ù–ï –î–ï–õ–ê–ô–¢–ï:
// - –ù–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–π—Ç–µ—Å—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ë–î
// - –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ SQL –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
// - –ù–µ —Å–º–µ—à–∏–≤–∞–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –æ–¥–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
// - –ù–µ –¥–µ–ª–∞–π—Ç–µ –º–µ—Ç–æ–¥—ã —Å–ª–∏—à–∫–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏
// - –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
//
// üîÑ –°–í–Ø–ó–¨ –° –î–†–£–ì–ò–ú–ò –°–õ–û–Ø–ú–ò:
//
// Domain ‚Üí Repository Interface (—ç—Ç–æ—Ç —Ñ–∞–π–ª)
//    ‚Üë
// Infrastructure ‚Üí Repository Implementation
//    ‚Üë
// Use Cases ‚Üí –ò—Å–ø–æ–ª—å–∑—É—é—Ç Repository Interface
//    ‚Üë
// Controllers ‚Üí –í—ã–∑—ã–≤–∞—é—Ç Use Cases
//
// üìù –ü–†–ò–ú–ï–†–´ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò (–≤ infrastructure/database):
//
// type UserRepository struct {
//     db *sql.DB  // –∏–ª–∏ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –ë–î
// }
//
// func NewUserRepository(db *sql.DB) user.Repository {
//     return &UserRepository{db: db}
// }
//
// func (r *UserRepository) Save(ctx context.Context, u *user.User) error {
//     // SQL –∏–ª–∏ MongoDB –∑–∞–ø—Ä–æ—Å
// }
//
// func (r *UserRepository) FindByEmail(ctx context.Context, email string) (*user.User, error) {
//     // SQL –∏–ª–∏ MongoDB –∑–∞–ø—Ä–æ—Å
// }