// üîó –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –®–ê–ë–õ–û–ù USE CASE INTERFACES –¥–ª—è Clean Architecture
//
// ‚úÖ –í–°–ï–ì–î–ê –æ–¥–∏–Ω–∞–∫–æ–≤–æ:
// - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ usecase —Å–ª–æ–µ
// - –ù–ï–¢ –∏–º–ø–æ—Ä—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
// - –ö–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ—à–∞–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É (SRP)
//
// üîÄ –ú–ï–ù–Ø–ï–¢–°–Ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞:
// - –ù–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ (EmailSender, PaymentProcessor, etc.)
// - –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
// - –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö

package example_feature // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—á–∏ (auth, payment, notification, etc.)

// ‚úÖ –í–°–ï–ì–î–ê: —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –Ω–∏–∫–∞–∫–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!
// ‚ùå –ù–ï –ò–ú–ü–û–†–¢–ò–†–£–ô–¢–ï: smtp, stripe, aws-sdk, redis –∏ –¥—Ä—É–≥–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

// üîß –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø –í–ù–ï–®–ù–ò–• –°–ï–†–í–ò–°–û–í
// ‚úÖ –í–°–ï–ì–î–ê: –∫–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å (capability)

// üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø–æ–¥ –≤–∞—à—É —Ñ–∏—á—É
// –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è ExampleFeature (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ):

type ExampleService interface {
	ProcessSomething(data string) (string, error) // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: –º–µ—Ç–æ–¥ –ø–æ–¥ –≤–∞—à—É –ª–æ–≥–∏–∫—É
	ValidateSomething(input string) (bool, error) // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: –º–µ—Ç–æ–¥ –ø–æ–¥ –≤–∞—à—É –ª–æ–≥–∏–∫—É
}

type ExampleNotifier interface {
	SendNotification(message string) error // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: –º–µ—Ç–æ–¥ –ø–æ–¥ –≤–∞—à—É –ª–æ–≥–∏–∫—É
}

// üìù –ü–†–ò–ú–ï–†–´ –ò–ù–¢–ï–†–§–ï–ô–°–û–í –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∏—á:

// –î–õ–Ø AUTH (–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è):
// type PasswordHasher interface {
//     Hash(password string) (string, error)
//     Compare(hashedPassword, password string) error
// }
//
// type TokenGenerator interface {
//     Generate(userID uint, email string) (string, error)
//     Validate(token string) (*TokenData, error)
//     Refresh(refreshToken string) (string, error)
// }
//
// type EmailVerifier interface {
//     SendVerificationEmail(email, token string) error
//     VerifyEmail(token string) (string, error) // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç email
// }

// –î–õ–Ø PAYMENT (–ø–ª–∞—Ç–µ–∂–∏):
// type PaymentProcessor interface {
//     ProcessPayment(amount float64, cardToken string) (*PaymentResult, error)
//     RefundPayment(transactionID string, amount float64) (*RefundResult, error)
//     GetPaymentStatus(transactionID string) (*PaymentStatus, error)
// }
//
// type PaymentValidator interface {
//     ValidateCard(cardNumber, cvv, expiry string) error
//     ValidateAmount(amount float64, currency string) error
// }

// –î–õ–Ø NOTIFICATION (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è):
// type EmailSender interface {
//     SendEmail(to, subject, body string) error
//     SendEmailWithTemplate(to string, templateID string, data map[string]interface{}) error
// }
//
// type SMSSender interface {
//     SendSMS(phoneNumber, message string) error
//     SendSMSWithTemplate(phoneNumber, templateID string, data map[string]interface{}) error
// }
//
// type PushNotificationSender interface {
//     SendPushNotification(deviceToken, title, body string, data map[string]interface{}) error
// }

// –î–õ–Ø FILE_UPLOAD (–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤):
// type FileStorage interface {
//     Upload(filename string, data []byte) (string, error) // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL
//     Download(filename string) ([]byte, error)
//     Delete(filename string) error
//     GetURL(filename string) (string, error)
// }
//
// type ImageProcessor interface {
//     Resize(image []byte, width, height int) ([]byte, error)
//     Compress(image []byte, quality int) ([]byte, error)
//     GenerateThumbnail(image []byte) ([]byte, error)
// }

// –î–õ–Ø ANALYTICS (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞):
// type EventTracker interface {
//     TrackEvent(userID uint, eventName string, properties map[string]interface{}) error
//     TrackPageView(userID uint, page string) error
//     TrackConversion(userID uint, conversionType string, value float64) error
// }
//
// type MetricsCollector interface {
//     IncrementCounter(name string, tags map[string]string) error
//     RecordGauge(name string, value float64, tags map[string]string) error
//     RecordHistogram(name string, value float64, tags map[string]string) error
// }

// –î–õ–Ø CACHING (–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ):
// type CacheManager interface {
//     Set(key string, value interface{}, expiration time.Duration) error
//     Get(key string, dest interface{}) error
//     Delete(key string) error
//     Exists(key string) (bool, error)
//     Clear() error
// }

// –î–õ–Ø SEARCH (–ø–æ–∏—Å–∫):
// type SearchEngine interface {
//     Index(documentID string, document interface{}) error
//     Search(query string, filters map[string]interface{}) (*SearchResults, error)
//     Delete(documentID string) error
//     BulkIndex(documents map[string]interface{}) error
// }

// –î–õ–Ø MESSAGE_QUEUE (–æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π):
// type MessagePublisher interface {
//     Publish(topic string, message interface{}) error
//     PublishWithDelay(topic string, message interface{}, delay time.Duration) error
// }
//
// type MessageSubscriber interface {
//     Subscribe(topic string, handler func(message interface{}) error) error
//     Unsubscribe(topic string) error
// }

// üìä –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –î–õ–Ø –ò–ù–¢–ï–†–§–ï–ô–°–û–í
// ‚úÖ –í–°–ï–ì–î–ê: –ø—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö

// üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–¥ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
type ExampleData struct {
	Field1 string `json:"field1"` // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: –ø–æ–ª—è –ø–æ–¥ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
	Field2 int    `json:"field2"`
}

// üìù –ü–†–ò–ú–ï–†–´ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∏—á:

// –î–õ–Ø AUTH:
// type TokenData struct {
//     UserID uint   `json:"user_id"`
//     Email  string `json:"email"`
//     Role   string `json:"role"`
// }

// –î–õ–Ø PAYMENT:
// type PaymentResult struct {
//     TransactionID string    `json:"transaction_id"`
//     Status        string    `json:"status"`
//     Amount        float64   `json:"amount"`
//     Currency      string    `json:"currency"`
//     ProcessedAt   time.Time `json:"processed_at"`
// }
//
// type PaymentStatus struct {
//     TransactionID string    `json:"transaction_id"`
//     Status        string    `json:"status"` // pending, completed, failed, refunded
//     Amount        float64   `json:"amount"`
//     CreatedAt     time.Time `json:"created_at"`
//     UpdatedAt     time.Time `json:"updated_at"`
// }

// –î–õ–Ø FILE_UPLOAD:
// type UploadResult struct {
//     URL      string `json:"url"`
//     Filename string `json:"filename"`
//     Size     int64  `json:"size"`
//     MimeType string `json:"mime_type"`
// }

// –î–õ–Ø SEARCH:
// type SearchResults struct {
//     Results []interface{} `json:"results"`
//     Total   int64         `json:"total"`
//     Page    int           `json:"page"`
//     Size    int           `json:"size"`
// }

// üìö –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ê–î–ê–ü–¢–ê–¶–ò–ò:
//
// 1. üîÄ –ü–ï–†–ï–ò–ú–ï–ù–£–ô–¢–ï —Ñ–∞–π–ª –∏ –ø–∞–∫–µ—Ç:
//    example_feature ‚Üí auth (–∏–ª–∏ payment, notification, etc.)
//
// 2. üîÄ –ó–ê–ú–ï–ù–ò–¢–ï –ø—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤:
//    –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –≤–∞—à–µ–π —Ñ–∏—á–∏ –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤—ã—à–µ
//
// 3. üîÄ –°–û–ó–î–ê–ô–¢–ï —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:
//    –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–π —Ñ–∏—á–∏
//
// 4. üîÄ –û–ü–†–ï–î–ï–õ–ò–¢–ï —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:
//    –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏
//
// 5. ‚úÖ –°–õ–ï–î–£–ô–¢–ï –ø—Ä–∏–Ω—Ü–∏–ø–∞–º:
//    - –û–¥–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å = –æ–¥–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
//    - –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ—à–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É
//    - –ù–ï–¢ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
//
// 6. üìù –î–û–ö–£–ú–ï–ù–¢–ò–†–£–ô–¢–ï –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:
//    –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–ª–æ–∂–Ω—ã–º –º–µ—Ç–æ–¥–∞–º
//
// üìã –ü–†–ò–ù–¶–ò–ü–´ INTERFACE DESIGN:
//
// ‚úÖ –î–ï–õ–ê–ô–¢–ï:
// - –ú–∞–ª–µ–Ω—å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (1-3 –º–µ—Ç–æ–¥–∞)
// - –ü–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤
// - –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –æ—à–∏–±–∫–∏ —Ç–∞–º, –≥–¥–µ –æ–Ω–∏ –≤–æ–∑–º–æ–∂–Ω—ã
// - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ context.Context –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
// - –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
//
// ‚ùå –ù–ï –î–ï–õ–ê–ô–¢–ï:
// - –ë–æ–ª—å—à–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –º–µ—Ç–æ–¥–æ–≤
// - –°–º–µ—à–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–µ–π –≤ –æ–¥–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
// - –ò–º–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
// - –°–ª–∏—à–∫–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø–æ–¥ –æ–¥–Ω—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
//
// üîÑ –°–í–Ø–ó–¨ –° –î–†–£–ì–ò–ú–ò –°–õ–û–Ø–ú–ò:
//
// Use Cases ‚Üí –ò—Å–ø–æ–ª—å–∑—É—é—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (—ç—Ç–æ—Ç —Ñ–∞–π–ª)
//    ‚Üë
// Infrastructure ‚Üí –†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
//    ‚Üë
// DI Container ‚Üí –°–≤—è–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
//
// üìù –ü–†–ò–ú–ï–†–´ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò (–≤ infrastructure/external):
//
// type SMTPEmailSender struct {
//     host     string
//     port     int
//     username string
//     password string
// }
//
// func NewSMTPEmailSender(config SMTPConfig) EmailSender {
//     return &SMTPEmailSender{...}
// }
//
// func (s *SMTPEmailSender) SendEmail(to, subject, body string) error {
//     // SMTP —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
// }
//
// üìù –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø (–≤ use cases):
//
// type RegisterUseCase struct {
//     userRepo      user.Repository
//     emailSender   EmailSender      // ‚Üê –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
//     passwordHasher PasswordHasher  // ‚Üê –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
// }
//
// func (uc *RegisterUseCase) Execute(req RegisterRequest) error {
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –±–µ–∑ –∑–Ω–∞–Ω–∏—è –æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
//     hashedPassword, _ := uc.passwordHasher.Hash(req.Password)
//     _ = uc.emailSender.SendEmail(req.Email, "Welcome", "...")
// }