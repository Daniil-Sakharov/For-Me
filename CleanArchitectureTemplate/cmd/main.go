// üöÄ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –®–ê–ë–õ–û–ù MAIN.GO –¥–ª—è Clean Architecture
//
// ‚úÖ –í–°–ï–ì–î–ê –æ–¥–∏–Ω–∞–∫–æ–≤–æ:
// - –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
// - –°–æ–∑–¥–∞–Ω–∏–µ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞  
// - Graceful shutdown
// - –û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ main —Ñ—É–Ω–∫—Ü–∏–∏
//
// üîÄ –ú–ï–ù–Ø–ï–¢–°–Ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞:
// - –ò–º–ø–æ—Ä—Ç—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è)
// - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–ª–æ–≥–≥–µ—Ä—ã, —Ç—Ä–µ–π—Å–∏–Ω–≥, etc.)
// - –¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞ (HTTP, gRPC, GraphQL)

package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	// üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: –∏–º–ø–æ—Ä—Ç—ã –ø–æ–¥ –≤–∞—à –ø—Ä–æ–µ–∫—Ç
	"your-project-name/configs"
	"your-project-name/pkg/di"

	// üîÄ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–ú–ü–û–†–¢–´ (–¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):
	
	// –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	// "github.com/sirupsen/logrus"
	// "go.uber.org/zap"
	
	// –î–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
	// "github.com/opentracing/opentracing-go"
	
	// –î–ª—è –º–µ—Ç—Ä–∏–∫
	// "github.com/prometheus/client_golang/prometheus"
)

func main() {
	// üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã
	fmt.Println("üöÄ Starting Your Application...")  // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	
	// üìù –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï —à–∞–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):
	
	// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	// initLogger()
	
	// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
	// initTracing()
	
	// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
	// initMetrics()

	// –®–ê–ì 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	// ‚úÖ –í–°–ï–ì–î–ê: —ç—Ç–∞ —á–∞—Å—Ç—å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
	config, err := configs.LoadConfig()
	if err != nil {
		log.Fatalf("‚ùå Failed to load config: %v", err)
	}
	
	// üìù –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û: –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	// if err := config.Validate(); err != nil {
	//     log.Fatalf("‚ùå Invalid config: %v", err)
	// }

	// –®–ê–ì 2: –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	// ‚úÖ –í–°–ï–ì–î–ê: —ç—Ç–∞ —á–∞—Å—Ç—å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
	container, err := di.NewContainer(config)
	if err != nil {
		log.Fatalf("‚ùå Failed to create DI container: %v", err)
	}
	defer container.Close() // ‚úÖ –í–°–ï–ì–î–ê: –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã

	// –®–ê–ì 3: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º graceful shutdown
	// ‚úÖ –í–°–ï–ì–î–ê: —ç—Ç–∞ —á–∞—Å—Ç—å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –ö–∞–Ω–∞–ª –¥–ª—è –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
	serverErrors := make(chan error, 1)

	// –ö–∞–Ω–∞–ª –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
	shutdown := make(chan os.Signal, 1)
	signal.Notify(shutdown, syscall.SIGINT, syscall.SIGTERM)

	// –®–ê–ì 4: –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä(—ã)
	// üîÄ –ú–ï–ù–Ø–ï–¢–°–Ø: —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞
	
	// HTTP Server (—Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Å–ª—É—á–∞–π)
	go func() {
		fmt.Printf("üåê HTTP Server starting on :%s\n", config.Server.Port)
		if err := container.Server.Start(); err != nil {
			serverErrors <- fmt.Errorf("HTTP server error: %w", err)
		}
	}()
	
	// üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ï–†–í–ï–†–´ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):
	
	// gRPC Server
	// go func() {
	//     fmt.Printf("üîó gRPC Server starting on :%s\n", config.GRPC.Port)
	//     if err := container.GRPCServer.Start(); err != nil {
	//         serverErrors <- fmt.Errorf("gRPC server error: %w", err)
	//     }
	// }()
	
	// GraphQL Server
	// go func() {
	//     fmt.Printf("üìä GraphQL Server starting on :%s\n", config.GraphQL.Port)
	//     if err := container.GraphQLServer.Start(); err != nil {
	//         serverErrors <- fmt.Errorf("GraphQL server error: %w", err)
	//     }
	// }()
	
	// Metrics Server (Prometheus)
	// go func() {
	//     fmt.Printf("üìà Metrics Server starting on :%s\n", config.Metrics.Port)
	//     if err := container.MetricsServer.Start(); err != nil {
	//         serverErrors <- fmt.Errorf("metrics server error: %w", err)
	//     }
	// }()

	// –®–ê–ì 5: –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	// ‚úÖ –í–°–ï–ì–î–ê: —ç—Ç–∞ —á–∞—Å—Ç—å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
	select {
	case err := <-serverErrors:
		log.Printf("‚ùå Server error: %v", err)
		cancel()

	case sig := <-shutdown:
		log.Printf("üõë Shutdown signal received: %v", sig)
		cancel()
	}

	// –®–ê–ì 6: Graceful shutdown
	// ‚úÖ –í–°–ï–ì–î–ê: —ç—Ç–∞ —á–∞—Å—Ç—å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –Ω–æ —Ç–∞–π–º–∞—É—Ç –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å
	
	// üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: —Ç–∞–π–º–∞—É—Ç –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã
	shutdownTimeout := 30 * time.Second
	
	shutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), shutdownTimeout)
	defer shutdownCancel()

	fmt.Println("üîÑ Shutting down gracefully...")

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
	if err := container.Server.Shutdown(shutdownCtx); err != nil {
		log.Printf("‚ö†Ô∏è  Force shutdown: %v", err)
	}
	
	// üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï SHUTDOWNS (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):
	// if err := container.GRPCServer.Shutdown(shutdownCtx); err != nil {
	//     log.Printf("‚ö†Ô∏è  gRPC force shutdown: %v", err)
	// }

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î, –∫–µ—à–µ–º, etc.
	// ‚úÖ –í–°–ï–ì–î–ê: container.Close() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ defer –≤—ã—à–µ

	fmt.Println("‚úÖ Application stopped gracefully")
}

// üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à –ø—Ä–æ–µ–∫—Ç:

// func initLogger() {
//     // üîÄ –ü–†–ò–ú–ï–†: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Logrus
//     logrus.SetFormatter(&logrus.JSONFormatter{})
//     logrus.SetLevel(logrus.InfoLevel)
//     
//     // üîÄ –ü–†–ò–ú–ï–†: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Zap
//     // logger, _ := zap.NewProduction()
//     // defer logger.Sync()
//     // zap.ReplaceGlobals(logger)
// }

// func initTracing() {
//     // üîÄ –ü–†–ò–ú–ï–†: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Jaeger
//     // tracer, closer := jaeger.NewTracer(
//     //     "your-service-name",
//     //     jaeger.NewConstSampler(true),
//     //     jaeger.NewRemoteReporter(...),
//     // )
//     // opentracing.SetGlobalTracer(tracer)
//     // defer closer.Close()
// }

// func initMetrics() {
//     // üîÄ –ü–†–ò–ú–ï–†: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Prometheus
//     // prometheus.MustRegister(prometheus.NewGoCollector())
//     // prometheus.MustRegister(prometheus.NewProcessCollector(prometheus.ProcessCollectorOpts{}))
// }

// üìö –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ê–î–ê–ü–¢–ê–¶–ò–ò:
//
// 1. üîÄ –ò–ó–ú–ï–ù–ò–¢–ï –∏–º–ø–æ—Ä—Ç—ã:
//    –ó–∞–º–µ–Ω–∏—Ç–µ "your-project-name" –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–æ–¥—É–ª—è
//
// 2. üîÄ –ù–ê–°–¢–†–û–ô–¢–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
//    –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ initLogger() –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã
//
// 3. üîÄ –í–´–ë–ï–†–ò–¢–ï —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞:
//    HTTP/gRPC/GraphQL - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
//
// 4. üîÄ –î–û–ë–ê–í–¨–¢–ï –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:
//    –ú–µ—Ç—Ä–∏–∫–∏, —Ç—Ä–µ–π—Å–∏–Ω–≥, health checks –∏ —Ç.–¥.
//
// 5. üîÄ –ù–ê–°–¢–†–û–ô–¢–ï —Ç–∞–π–º–∞—É—Ç—ã:
//    –ò–∑–º–µ–Ω–∏—Ç–µ shutdownTimeout –ø–æ–¥ –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
//
// 6. ‚úÖ –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ:
//    - –ü–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
//    - Graceful shutdown –ª–æ–≥–∏–∫—É
//    - –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫