// ‚öôÔ∏è –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –®–ê–ë–õ–û–ù –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –¥–ª—è Clean Architecture
//
// ‚úÖ –í–°–ï–ì–î–ê –æ–¥–∏–Ω–∞–∫–æ–≤–æ:
// - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Config —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å–µ–∫—Ü–∏—è–º–∏
// - –§—É–Ω–∫—Ü–∏—è LoadConfig() –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ ENV
// - –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
//
// üîÄ –ú–ï–ù–Ø–ï–¢–°–Ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞:
// - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
// - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ (Redis, Kafka, AWS, etc.)
// - –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

package configs

import (
	"fmt"
	"os"
	"strconv"
	"time"
)

// üèóÔ∏è –û–°–ù–û–í–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
// ‚úÖ –í–°–ï–ì–î–ê –∏–º–µ–µ—Ç —Ç–∞–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–æ –ø–æ–ª—è –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è
type Config struct {
	// üîÄ –û–°–ù–û–í–ù–´–ï –°–ï–ö–¶–ò–ò (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à –ø—Ä–æ–µ–∫—Ç):
	
	App      AppConfig      `json:"app"`      // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	Server   ServerConfig   `json:"server"`   // HTTP/Web —Å–µ—Ä–≤–µ—Ä
	Database DatabaseConfig `json:"database"` // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
	Auth     AuthConfig     `json:"auth"`     // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
	
	// üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ï–ö–¶–ò–ò (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):
	
	// Redis    RedisConfig    `json:"redis"`    // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
	// Email    EmailConfig    `json:"email"`    // –û—Ç–ø—Ä–∞–≤–∫–∞ email
	// AWS      AWSConfig      `json:"aws"`      // Amazon Web Services
	// Kafka    KafkaConfig    `json:"kafka"`    // Message broker
	// GRPC     GRPCConfig     `json:"grpc"`     // gRPC —Å–µ—Ä–≤–µ—Ä
	// GraphQL  GraphQLConfig  `json:"graphql"`  // GraphQL —Å–µ—Ä–≤–µ—Ä
	// Metrics  MetricsConfig  `json:"metrics"`  // –ú–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
	// Logging  LoggingConfig  `json:"logging"`  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	// Tracing  TracingConfig  `json:"tracing"`  // –¢—Ä–µ–π—Å–∏–Ω–≥
}

// üì± –°–ï–ö–¶–ò–Ø: –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// ‚úÖ –í–°–ï–ì–î–ê –Ω—É–∂–Ω–∞ –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
type AppConfig struct {
	Name        string `json:"name"`         // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	Version     string `json:"version"`      // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï: –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	Environment string `json:"environment"`  // dev, staging, production
	Debug       bool   `json:"debug"`        // –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
}

// üåê –°–ï–ö–¶–ò–Ø: HTTP/Web —Å–µ—Ä–≤–µ—Ä
// ‚úÖ –í–°–ï–ì–î–ê –Ω—É–∂–Ω–∞ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
type ServerConfig struct {
	Port            string        `json:"port"`             // –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
	Host            string        `json:"host"`             // –•–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞
	ReadTimeout     time.Duration `json:"read_timeout"`     // –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
	WriteTimeout    time.Duration `json:"write_timeout"`    // –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏
	ShutdownTimeout time.Duration `json:"shutdown_timeout"` // –¢–∞–π–º–∞—É—Ç graceful shutdown
	
	// üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò HTTP:
	MaxHeaderBytes int  `json:"max_header_bytes"` // –ú–∞–∫—Å —Ä–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	EnableCORS     bool `json:"enable_cors"`      // –í–∫–ª—é—á–∏—Ç—å CORS
	EnableHTTPS    bool `json:"enable_https"`     // –í–∫–ª—é—á–∏—Ç—å HTTPS
	
	// üìù TLS –ù–ê–°–¢–†–û–ô–ö–ò (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω HTTPS):
	CertFile string `json:"cert_file"` // –ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É
	KeyFile  string `json:"key_file"`  // –ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É
}

// üóÑÔ∏è –°–ï–ö–¶–ò–Ø: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
// ‚úÖ –í–°–ï–ì–î–ê –Ω—É–∂–Ω–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –ë–î
type DatabaseConfig struct {
	// üîÄ –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à—É –ë–î):
	Driver   string `json:"driver"`   // postgres, mysql, mongodb, sqlite
	Host     string `json:"host"`     // –•–æ—Å—Ç –ë–î
	Port     int    `json:"port"`     // –ü–æ—Ä—Ç –ë–î
	User     string `json:"user"`     // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë–î
	Password string `json:"password"` // –ü–∞—Ä–æ–ª—å –ë–î
	Name     string `json:"name"`     // –ù–∞–∑–≤–∞–Ω–∏–µ –ë–î
	SSLMode  string `json:"ssl_mode"` // SSL —Ä–µ–∂–∏–º
	
	// üìù –ù–ê–°–¢–†–û–ô–ö–ò –ü–£–õ–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô:
	MaxOpenConns    int           `json:"max_open_conns"`    // –ú–∞–∫—Å –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	MaxIdleConns    int           `json:"max_idle_conns"`    // –ú–∞–∫—Å –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	ConnMaxLifetime time.Duration `json:"conn_max_lifetime"` // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	ConnMaxIdleTime time.Duration `json:"conn_max_idle_time"` // –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	
	// üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:
	MigrationsPath string `json:"migrations_path"` // –ü—É—Ç—å –∫ –º–∏–≥—Ä–∞—Ü–∏—è–º
	AutoMigrate    bool   `json:"auto_migrate"`    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
}

// üîê –°–ï–ö–¶–ò–Ø: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
// ‚úÖ –í–°–ï–ì–î–ê –Ω—É–∂–Ω–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
type AuthConfig struct {
	// JWT –ù–ê–°–¢–†–û–ô–ö–ò:
	JWTSecret     string        `json:"jwt_secret"`      // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á JWT
	JWTExpiry     time.Duration `json:"jwt_expiry"`      // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
	JWTIssuer     string        `json:"jwt_issuer"`      // –ò–∑–¥–∞—Ç–µ–ª—å —Ç–æ–∫–µ–Ω–∞
	RefreshExpiry time.Duration `json:"refresh_expiry"`  // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ refresh —Ç–æ–∫–µ–Ω–∞
	
	// üìù –ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–†–û–õ–ï–ô:
	BcryptCost       int `json:"bcrypt_cost"`        // –°—Ç–æ–∏–º–æ—Å—Ç—å bcrypt —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
	MinPasswordLen   int `json:"min_password_len"`   // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
	RequireUppercase bool `json:"require_uppercase"` // –¢—Ä–µ–±–æ–≤–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
	RequireNumbers   bool `json:"require_numbers"`   // –¢—Ä–µ–±–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã
	RequireSymbols   bool `json:"require_symbols"`   // –¢—Ä–µ–±–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã
	
	// üìù OAUTH –ù–ê–°–¢–†–û–ô–ö–ò (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è):
	GoogleClientID     string `json:"google_client_id"`     // Google OAuth
	GoogleClientSecret string `json:"google_client_secret"`
	FacebookAppID      string `json:"facebook_app_id"`      // Facebook OAuth
	FacebookAppSecret  string `json:"facebook_app_secret"`
}

// üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ï–ö–¶–ò–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à –ø—Ä–æ–µ–∫—Ç:

// // üóÑÔ∏è REDIS –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// type RedisConfig struct {
//     Host     string `json:"host"`     // –•–æ—Å—Ç Redis
//     Port     int    `json:"port"`     // –ü–æ—Ä—Ç Redis
//     Password string `json:"password"` // –ü–∞—Ä–æ–ª—å Redis
//     DB       int    `json:"db"`       // –ù–æ–º–µ—Ä –ë–î Redis
//     
//     // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞:
//     PoolSize     int           `json:"pool_size"`     // –†–∞–∑–º–µ—Ä –ø—É–ª–∞
//     MinIdleConns int           `json:"min_idle_conns"` // –ú–∏–Ω –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
//     DialTimeout  time.Duration `json:"dial_timeout"`  // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
//     ReadTimeout  time.Duration `json:"read_timeout"`  // –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
//     WriteTimeout time.Duration `json:"write_timeout"` // –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏
// }

// // üìß EMAIL –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// type EmailConfig struct {
//     Provider string `json:"provider"` // smtp, sendgrid, ses, mailgun
//     
//     // SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
//     SMTPHost     string `json:"smtp_host"`     // SMTP —Ö–æ—Å—Ç
//     SMTPPort     int    `json:"smtp_port"`     // SMTP –ø–æ—Ä—Ç
//     SMTPUser     string `json:"smtp_user"`     // SMTP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
//     SMTPPassword string `json:"smtp_password"` // SMTP –ø–∞—Ä–æ–ª—å
//     SMTPFrom     string `json:"smtp_from"`     // Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
//     
//     // API –∫–ª—é—á–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤:
//     SendGridAPIKey string `json:"sendgrid_api_key"` // SendGrid
//     MailgunAPIKey  string `json:"mailgun_api_key"`  // Mailgun
//     MailgunDomain  string `json:"mailgun_domain"`   // Mailgun –¥–æ–º–µ–Ω
// }

// // ‚òÅÔ∏è AWS –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// type AWSConfig struct {
//     Region          string `json:"region"`           // AWS —Ä–µ–≥–∏–æ–Ω
//     AccessKeyID     string `json:"access_key_id"`    // AWS Access Key
//     SecretAccessKey string `json:"secret_access_key"` // AWS Secret Key
//     
//     // S3 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
//     S3Bucket string `json:"s3_bucket"` // S3 –±–∞–∫–µ—Ç
//     S3Region string `json:"s3_region"` // S3 —Ä–µ–≥–∏–æ–Ω
//     
//     // SQS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
//     SQSQueueURL string `json:"sqs_queue_url"` // SQS –æ—á–µ—Ä–µ–¥—å
// }

// // üìä KAFKA –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// type KafkaConfig struct {
//     Brokers []string `json:"brokers"` // –°–ø–∏—Å–æ–∫ –±—Ä–æ–∫–µ—Ä–æ–≤
//     
//     // Producer –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
//     ProducerRetries int           `json:"producer_retries"` // –ü–æ–≤—Ç–æ—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
//     ProducerTimeout time.Duration `json:"producer_timeout"` // –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
//     
//     // Consumer –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
//     ConsumerGroup   string        `json:"consumer_group"`   // –ì—Ä—É–ø–ø–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
//     ConsumerTimeout time.Duration `json:"consumer_timeout"` // –¢–∞–π–º–∞—É—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
//     
//     // –¢–æ–ø–∏–∫–∏:
//     Topics map[string]string `json:"topics"` // –ö–∞—Ä—Ç–∞ —Ç–æ–ø–∏–∫–æ–≤
// }

// // üîó gRPC –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// type GRPCConfig struct {
//     Port    string        `json:"port"`    // –ü–æ—Ä—Ç gRPC —Å–µ—Ä–≤–µ—Ä–∞
//     Timeout time.Duration `json:"timeout"` // –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
//     
//     // TLS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
//     EnableTLS bool   `json:"enable_tls"` // –í–∫–ª—é—á–∏—Ç—å TLS
//     CertFile  string `json:"cert_file"`  // –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
//     KeyFile   string `json:"key_file"`   // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
// }

// // üìà –ú–ï–¢–†–ò–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// type MetricsConfig struct {
//     Enabled bool   `json:"enabled"` // –í–∫–ª—é—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
//     Port    string `json:"port"`    // –ü–æ—Ä—Ç metrics —Å–µ—Ä–≤–µ—Ä–∞
//     Path    string `json:"path"`    // –ü—É—Ç—å –∫ –º–µ—Ç—Ä–∏–∫–∞–º
//     
//     // Prometheus –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
//     PrometheusEnabled bool `json:"prometheus_enabled"` // –í–∫–ª—é—á–∏—Ç—å Prometheus
// }

// // üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// type LoggingConfig struct {
//     Level  string `json:"level"`  // debug, info, warn, error
//     Format string `json:"format"` // json, text
//     Output string `json:"output"` // stdout, file
//     
//     // –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
//     FilePath   string `json:"file_path"`   // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
//     MaxSize    int    `json:"max_size"`    // –ú–∞–∫—Å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (MB)
//     MaxBackups int    `json:"max_backups"` // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ backup —Ñ–∞–π–ª–æ–≤
//     MaxAge     int    `json:"max_age"`     // –í—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–Ω–∏)
// }

// // üîç –¢–†–ï–ô–°–ò–ù–ì –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// type TracingConfig struct {
//     Enabled     bool    `json:"enabled"`      // –í–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–π—Å–∏–Ω–≥
//     ServiceName string  `json:"service_name"` // –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
//     JaegerURL   string  `json:"jaeger_url"`   // URL Jaeger
//     SampleRate  float64 `json:"sample_rate"`  // –ß–∞—Å—Ç–æ—Ç–∞ —Å—ç–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏—è
// }

// üîß –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
// ‚úÖ –í–°–ï–ì–î–ê –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –Ω–æ ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
func LoadConfig() (*Config, error) {
	config := &Config{
		// üîÄ –ó–ù–ê–ß–ï–ù–ò–Ø –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à –ø—Ä–æ–µ–∫—Ç):
		
		App: AppConfig{
			Name:        getEnv("APP_NAME", "Your Application"),        // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï
			Version:     getEnv("APP_VERSION", "1.0.0"),              // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï
			Environment: getEnv("APP_ENV", "development"),
			Debug:       getEnvBool("APP_DEBUG", true),
		},
		
		Server: ServerConfig{
			Port:            getEnv("SERVER_PORT", "8080"),
			Host:            getEnv("SERVER_HOST", "localhost"),
			ReadTimeout:     getEnvDuration("SERVER_READ_TIMEOUT", 30*time.Second),
			WriteTimeout:    getEnvDuration("SERVER_WRITE_TIMEOUT", 30*time.Second),
			ShutdownTimeout: getEnvDuration("SERVER_SHUTDOWN_TIMEOUT", 30*time.Second),
			MaxHeaderBytes:  getEnvInt("SERVER_MAX_HEADER_BYTES", 1048576), // 1MB
			EnableCORS:      getEnvBool("SERVER_ENABLE_CORS", true),
			EnableHTTPS:     getEnvBool("SERVER_ENABLE_HTTPS", false),
			CertFile:        getEnv("SERVER_CERT_FILE", ""),
			KeyFile:         getEnv("SERVER_KEY_FILE", ""),
		},
		
		Database: DatabaseConfig{
			Driver:          getEnv("DB_DRIVER", "postgres"),
			Host:            getEnv("DB_HOST", "localhost"),
			Port:            getEnvInt("DB_PORT", 5432),
			User:            getEnv("DB_USER", "postgres"),
			Password:        getEnv("DB_PASSWORD", "postgres"),
			Name:            getEnv("DB_NAME", "your_app_db"),            // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï
			SSLMode:         getEnv("DB_SSL_MODE", "disable"),
			MaxOpenConns:    getEnvInt("DB_MAX_OPEN_CONNS", 25),
			MaxIdleConns:    getEnvInt("DB_MAX_IDLE_CONNS", 5),
			ConnMaxLifetime: getEnvDuration("DB_CONN_MAX_LIFETIME", 5*time.Minute),
			ConnMaxIdleTime: getEnvDuration("DB_CONN_MAX_IDLE_TIME", 5*time.Minute),
			MigrationsPath:  getEnv("DB_MIGRATIONS_PATH", "migrations"),
			AutoMigrate:     getEnvBool("DB_AUTO_MIGRATE", false),
		},
		
		Auth: AuthConfig{
			JWTSecret:        getEnv("JWT_SECRET", "your-super-secret-jwt-key"),  // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï –≤ production!
			JWTExpiry:        getEnvDuration("JWT_EXPIRY", 24*time.Hour),
			JWTIssuer:        getEnv("JWT_ISSUER", "your-app"),                  // üîÄ –ò–ó–ú–ï–ù–ò–¢–ï
			RefreshExpiry:    getEnvDuration("JWT_REFRESH_EXPIRY", 7*24*time.Hour),
			BcryptCost:       getEnvInt("BCRYPT_COST", 12),
			MinPasswordLen:   getEnvInt("MIN_PASSWORD_LEN", 8),
			RequireUppercase: getEnvBool("REQUIRE_UPPERCASE", true),
			RequireNumbers:   getEnvBool("REQUIRE_NUMBERS", true),
			RequireSymbols:   getEnvBool("REQUIRE_SYMBOLS", false),
			
			// OAuth (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è):
			GoogleClientID:     getEnv("GOOGLE_CLIENT_ID", ""),
			GoogleClientSecret: getEnv("GOOGLE_CLIENT_SECRET", ""),
			FacebookAppID:      getEnv("FACEBOOK_APP_ID", ""),
			FacebookAppSecret:  getEnv("FACEBOOK_APP_SECRET", ""),
		},
		
		// üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ï–ö–¶–ò–ò (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):
		
		// Redis: RedisConfig{
		//     Host:         getEnv("REDIS_HOST", "localhost"),
		//     Port:         getEnvInt("REDIS_PORT", 6379),
		//     Password:     getEnv("REDIS_PASSWORD", ""),
		//     DB:           getEnvInt("REDIS_DB", 0),
		//     PoolSize:     getEnvInt("REDIS_POOL_SIZE", 10),
		//     MinIdleConns: getEnvInt("REDIS_MIN_IDLE_CONNS", 2),
		//     DialTimeout:  getEnvDuration("REDIS_DIAL_TIMEOUT", 5*time.Second),
		//     ReadTimeout:  getEnvDuration("REDIS_READ_TIMEOUT", 3*time.Second),
		//     WriteTimeout: getEnvDuration("REDIS_WRITE_TIMEOUT", 3*time.Second),
		// },
	}
	
	return config, nil
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø –í–ê–õ–ò–î–ê–¶–ò–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
// –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
func (c *Config) Validate() error {
	// üîÄ –î–û–ë–ê–í–¨–¢–ï –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–¥ –≤–∞—à –ø—Ä–æ–µ–∫—Ç:
	
	if c.App.Name == "" {
		return fmt.Errorf("app name is required")
	}
	
	if c.Server.Port == "" {
		return fmt.Errorf("server port is required")
	}
	
	if c.Database.Host == "" {
		return fmt.Errorf("database host is required")
	}
	
	if c.Auth.JWTSecret == "" || c.Auth.JWTSecret == "your-super-secret-jwt-key" {
		return fmt.Errorf("JWT secret must be set and not use default value")
	}
	
	// üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –í–ê–õ–ò–î–ê–¶–ò–ò:
	// if c.Redis.Host == "" {
	//     return fmt.Errorf("redis host is required")
	// }
	
	return nil
}

// üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ‚úÖ –í–°–ï–ì–î–ê –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ –µ—Å—Ç—å

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func getEnvInt(key string, defaultValue int) int {
	if value := os.Getenv(key); value != "" {
		if intValue, err := strconv.Atoi(value); err == nil {
			return intValue
		}
	}
	return defaultValue
}

func getEnvBool(key string, defaultValue bool) bool {
	if value := os.Getenv(key); value != "" {
		if boolValue, err := strconv.ParseBool(value); err == nil {
			return boolValue
		}
	}
	return defaultValue
}

func getEnvDuration(key string, defaultValue time.Duration) time.Duration {
	if value := os.Getenv(key); value != "" {
		if duration, err := time.ParseDuration(value); err == nil {
			return duration
		}
	}
	return defaultValue
}

// üìö –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ê–î–ê–ü–¢–ê–¶–ò–ò:
//
// 1. üîÄ –ò–ó–ú–ï–ù–ò–¢–ï –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
//    - APP_NAME, APP_VERSION
//    - DB_NAME, JWT_ISSUER
//    - JWT_SECRET (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ production!)
//
// 2. üìù –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô–¢–ï –Ω—É–∂–Ω—ã–µ —Å–µ–∫—Ü–∏–∏:
//    - Redis, Email, AWS, Kafka, etc.
//    - –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
//
// 3. ‚úÖ –î–û–ë–ê–í–¨–¢–ï –≤–∞–ª–∏–¥–∞—Ü–∏—é:
//    - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ Validate()
//    - –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
//
// 4. üîÄ –ê–î–ê–ü–¢–ò–†–£–ô–¢–ï ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
//    - –î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
//    - –ò–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
//
// 5. üìù –°–û–ó–î–ê–ô–¢–ï .env —Ñ–∞–π–ª:
//    - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Å–µ ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
//    - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è