package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"
	
	"clean-url-shortener/configs"
	"clean-url-shortener/pkg/di"
)

// main - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
// –≠–¢–û –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø, –ö–û–¢–û–†–ê–Ø –ó–ê–ü–£–°–ö–ê–ï–¢ –í–°–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
func main() {
	// –®–ê–ì 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	fmt.Println("üöÄ Starting URL Shortener Service...")
	
	config, err := configs.LoadConfig()
	if err != nil {
		log.Fatalf("‚ùå Failed to load configuration: %v", err)
	}
	
	fmt.Printf("üìã Configuration loaded for environment: %s\n", config.App.Environment)
	
	// –®–ê–ì 2: –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	fmt.Println("üîß Initializing dependencies...")
	
	container, err := di.NewContainer(config)
	if err != nil {
		log.Fatalf("‚ùå Failed to initialize dependencies: %v", err)
	}
	
	// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
	defer func() {
		fmt.Println("üßπ Cleaning up resources...")
		if err := container.Cleanup(); err != nil {
			log.Printf("‚ö†Ô∏è Error during cleanup: %v", err)
		}
	}()
	
	fmt.Println("‚úÖ Dependencies initialized successfully")
	
	// –®–ê–ì 3: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º graceful shutdown
	_, cancel := context.WithCancel(context.Background())
	defer cancel()
	
	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –û–°
	signalChan := make(chan os.Signal, 1)
	signal.Notify(signalChan, os.Interrupt, syscall.SIGTERM)
	
	// –®–ê–ì 4: –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	serverErrors := make(chan error, 1)
	
	go func() {
		fmt.Printf("üåê HTTP server starting on %s:%d\n", 
			config.Server.Host, config.Server.Port)
		
		if err := container.Server.Start(); err != nil {
			serverErrors <- fmt.Errorf("server failed to start: %w", err)
		}
	}()
	
	// –®–ê–ì 5: –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏
	select {
	case err := <-serverErrors:
		log.Fatalf("‚ùå Server error: %v", err)
		
	case sig := <-signalChan:
		fmt.Printf("\nüõë Received signal: %s\n", sig)
		fmt.Println("üîÑ Initiating graceful shutdown...")
		
		// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è graceful shutdown
		shutdownCtx, shutdownCancel := context.WithTimeout(
			context.Background(), 
			30*time.Second,
		)
		defer shutdownCancel()
		
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
		if err := container.Server.Shutdown(shutdownCtx); err != nil {
			log.Printf("‚ö†Ô∏è Error during server shutdown: %v", err)
		} else {
			fmt.Println("‚úÖ HTTP server stopped gracefully")
		}
		
		// –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
		cancel()
	}
	
	fmt.Println("üëã Application terminated")
}

// –ü–†–ò–ù–¶–ò–ü–´ –ì–õ–ê–í–ù–û–ô –§–£–ù–ö–¶–ò–ò:
// 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
// 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ DI container
// 3. Graceful shutdown –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –û–°
// 4. Proper error handling –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
// 5. Cleanup —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
// 6. –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –ß–¢–û –ü–†–û–ò–°–•–û–î–ò–¢ –ü–†–ò –ó–ê–ü–£–°–ö–ï:
// 1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
// 2. –°–æ–∑–¥–∞–µ—Ç—Å—è DI container, –∫–æ—Ç–æ—Ä—ã–π:
//    - –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
//    - –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
//    - –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
//    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Use Cases
//    - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ middleware
//    - –°–æ–∑–¥–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä
// 3. –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è HTTP —Å–µ—Ä–≤–µ—Ä
// 4. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∂–¥–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
// 5. –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è graceful shutdown

// –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
// 1. –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —è–≤–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω—ã
// 2. –õ–µ–≥–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ª—é–±–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)
// 3. –°–æ–±–ª—é–¥–µ–Ω—ã –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID
// 4. –ò–Ω–≤–µ—Ä—Å–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö
// 5. –ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–µ–≤ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏