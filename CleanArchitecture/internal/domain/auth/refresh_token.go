package auth

import (
	"crypto/rand"
	"encoding/hex"
	"errors"
	"time"
)

// üìö –ò–ó–£–ß–ò–¢–¨: JWT Refresh Tokens
// https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/
// https://datatracker.ietf.org/doc/html/rfc6749#section-1.5
// https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13
//
// –ó–ê–ß–ï–ú –ù–£–ñ–ù–´ REFRESH TOKENS:
// 1. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ - Access tokens –∏–º–µ—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏
// 2. –û–¢–ó–´–í - –ú–æ–∂–Ω–æ –æ—Ç–æ–∑–≤–∞—Ç—å refresh token –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ—á–µ–Ω–∏—è access token
// 3. –ê–£–î–ò–¢ - –ú–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// 4. –†–û–¢–ê–¶–ò–Ø - –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω—ã –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
//
// –ü–†–ò–ù–¶–ò–ü–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:
// 1. Refresh tokens –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º–∏ –∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏
// 2. Refresh tokens –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ (–ë–î, –Ω–µ –≤ localStorage!)
// 3. Refresh tokens –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏
// 4. Refresh tokens –¥–æ–ª–∂–Ω—ã —Ä–æ—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
// 5. Refresh tokens –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É

// RefreshToken –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–º–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å refresh token
// –≠–¢–û –ß–ò–°–¢–ê–Ø –î–û–ú–ï–ù–ù–ê–Ø –°–£–©–ù–û–°–¢–¨ - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
type RefreshToken struct {
	// ID —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–∞
	ID uint
	
	// Token —Å–∞–º —Ç–æ–∫–µ–Ω (–¥–ª–∏–Ω–Ω–∞—è —Å–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
	Token string
	
	// UserID ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–∫–µ–Ω
	UserID uint
	
	// DeviceInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	DeviceInfo string
	
	// ExpiresAt –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
	ExpiresAt time.Time
	
	// CreatedAt –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
	CreatedAt time.Time
	
	// LastUsedAt –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	LastUsedAt *time.Time
	
	// IsRevoked —Ñ–ª–∞–≥ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–∞
	IsRevoked bool
	
	// RevokedAt –≤—Ä–µ–º—è –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–∞
	RevokedAt *time.Time
	
	// RevokedReason –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–∞
	RevokedReason string
}

// –î–æ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è refresh tokens
var (
	ErrRefreshTokenExpired    = errors.New("refresh token has expired")
	ErrRefreshTokenRevoked    = errors.New("refresh token has been revoked")
	ErrRefreshTokenInvalid    = errors.New("refresh token is invalid")
	ErrRefreshTokenNotFound   = errors.New("refresh token not found")
	ErrInvalidDeviceInfo      = errors.New("invalid device information")
	ErrTokenGenerationFailed  = errors.New("failed to generate secure token")
)

// NewRefreshToken —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π refresh token
// üìö –ò–ó–£–ß–ò–¢–¨: Cryptographically secure random generation
// https://pkg.go.dev/crypto/rand
func NewRefreshToken(userID uint, deviceInfo string, expiryDuration time.Duration) (*RefreshToken, error) {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	if userID == 0 {
		return nil, errors.New("user ID cannot be zero")
	}
	
	if deviceInfo == "" {
		return nil, ErrInvalidDeviceInfo
	}
	
	if expiryDuration <= 0 {
		return nil, errors.New("expiry duration must be positive")
	}
	
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π —Ç–æ–∫–µ–Ω
	token, err := generateSecureToken(32) // 32 –±–∞–π—Ç–∞ = 256 –±–∏—Ç
	if err != nil {
		return nil, ErrTokenGenerationFailed
	}
	
	now := time.Now()
	
	return &RefreshToken{
		Token:      token,
		UserID:     userID,
		DeviceInfo: deviceInfo,
		ExpiresAt:  now.Add(expiryDuration),
		CreatedAt:  now,
		IsRevoked:  false,
	}, nil
}

// IsValid –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å refresh token
func (rt *RefreshToken) IsValid() error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–æ–∑–≤–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω
	if rt.IsRevoked {
		return ErrRefreshTokenRevoked
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
	if time.Now().After(rt.ExpiresAt) {
		return ErrRefreshTokenExpired
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
	if rt.Token == "" || rt.UserID == 0 {
		return ErrRefreshTokenInvalid
	}
	
	return nil
}

// Use –æ—Ç–º–µ—á–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
func (rt *RefreshToken) Use() error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
	if err := rt.IsValid(); err != nil {
		return err
	}
	
	now := time.Now()
	rt.LastUsedAt = &now
	
	return nil
}

// Revoke –æ—Ç–∑—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã
func (rt *RefreshToken) Revoke(reason string) {
	if rt.IsRevoked {
		return // –£–∂–µ –æ—Ç–æ–∑–≤–∞–Ω
	}
	
	now := time.Now()
	rt.IsRevoked = true
	rt.RevokedAt = &now
	rt.RevokedReason = reason
}

// IsExpiringSoon –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–∞–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
func (rt *RefreshToken) IsExpiringSoon(threshold time.Duration) bool {
	return time.Until(rt.ExpiresAt) < threshold
}

// DaysUntilExpiry –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
func (rt *RefreshToken) DaysUntilExpiry() int {
	duration := time.Until(rt.ExpiresAt)
	return int(duration.Hours() / 24)
}

// REPOSITORY INTERFACE –¥–ª—è refresh tokens

// RefreshTokenRepository –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å refresh tokens
// –ò–ù–¢–ï–†–§–ï–ô–° –í –î–û–ú–ï–ù–ù–û–ú –°–õ–û–ï - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ß–¢–û –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å, –Ω–æ –ù–ï –ö–ê–ö
type RefreshTokenRepository interface {
	// Save —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç refresh token
	Save(token *RefreshToken) error
	
	// FindByToken –Ω–∞—Ö–æ–¥–∏—Ç —Ç–æ–∫–µ–Ω –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
	FindByToken(tokenValue string) (*RefreshToken, error)
	
	// FindByUserID –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	FindByUserID(userID uint) ([]*RefreshToken, error)
	
	// Delete —É–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω
	Delete(tokenID uint) error
	
	// DeleteByUserID —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	DeleteByUserID(userID uint) error
	
	// DeleteExpired —É–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã
	DeleteExpired() (int, error)
	
	// RevokeAllByUserID –æ—Ç–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	RevokeAllByUserID(userID uint, reason string) error
	
	// RevokeByDevice –æ—Ç–∑—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	RevokeByDevice(userID uint, deviceInfo string, reason string) error
}

// UTILITY FUNCTIONS

// generateSecureToken –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π —Ç–æ–∫–µ–Ω
func generateSecureToken(length int) (string, error) {
	bytes := make([]byte, length)
	
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º crypto/rand –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∞–π—Ç–æ–≤
	_, err := rand.Read(bytes)
	if err != nil {
		return "", err
	}
	
	// –ö–æ–¥–∏—Ä—É–µ–º –≤ hex –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞—á–∏
	return hex.EncodeToString(bytes), nil
}

// –î–û–ú–ï–ù–ù–´–ï –°–ï–†–í–ò–°–´ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å refresh tokens

// RefreshTokenService –¥–æ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å refresh tokens
// üìö –ò–ó–£–ß–ò–¢–¨: Domain Services –≤ DDD
// https://martinfowler.com/bliki/EvansClassification.html
type RefreshTokenService struct {
	repository RefreshTokenRepository
}

// NewRefreshTokenService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
func NewRefreshTokenService(repository RefreshTokenRepository) *RefreshTokenService {
	return &RefreshTokenService{
		repository: repository,
	}
}

// CreateToken —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π refresh token –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *RefreshTokenService) CreateToken(userID uint, deviceInfo string, expiryDuration time.Duration) (*RefreshToken, error) {
	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
	token, err := NewRefreshToken(userID, deviceInfo, expiryDuration)
	if err != nil {
		return nil, err
	}
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
	if err := s.repository.Save(token); err != nil {
		return nil, err
	}
	
	return token, nil
}

// RotateToken —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏ –æ—Ç–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–π (Token Rotation)
// üìö –ò–ó–£–ß–ò–¢–¨: Refresh Token Rotation
// https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation
func (s *RefreshTokenService) RotateToken(oldTokenValue string, deviceInfo string, expiryDuration time.Duration) (*RefreshToken, error) {
	// –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω
	oldToken, err := s.repository.FindByToken(oldTokenValue)
	if err != nil {
		return nil, err
	}
	
	if oldToken == nil {
		return nil, ErrRefreshTokenNotFound
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
	if err := oldToken.IsValid(); err != nil {
		return nil, err
	}
	
	// –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
	if err := oldToken.Use(); err != nil {
		return nil, err
	}
	
	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
	newToken, err := NewRefreshToken(oldToken.UserID, deviceInfo, expiryDuration)
	if err != nil {
		return nil, err
	}
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
	if err := s.repository.Save(newToken); err != nil {
		return nil, err
	}
	
	// –û—Ç–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω
	oldToken.Revoke("rotated")
	if err := s.repository.Save(oldToken); err != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
		// –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω
	}
	
	return newToken, nil
}

// ValidateToken –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
func (s *RefreshTokenService) ValidateToken(tokenValue string) (*RefreshToken, error) {
	token, err := s.repository.FindByToken(tokenValue)
	if err != nil {
		return nil, err
	}
	
	if token == nil {
		return nil, ErrRefreshTokenNotFound
	}
	
	if err := token.IsValid(); err != nil {
		return nil, err
	}
	
	return token, nil
}

// RevokeUserTokens –æ—Ç–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *RefreshTokenService) RevokeUserTokens(userID uint, reason string) error {
	return s.repository.RevokeAllByUserID(userID, reason)
}

// RevokeDeviceTokens –æ—Ç–∑—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
func (s *RefreshTokenService) RevokeDeviceTokens(userID uint, deviceInfo string, reason string) error {
	return s.repository.RevokeByDevice(userID, deviceInfo, reason)
}

// CleanupExpiredTokens —É–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã
func (s *RefreshTokenService) CleanupExpiredTokens() (int, error) {
	return s.repository.DeleteExpired()
}

// GetUserTokens –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *RefreshTokenService) GetUserTokens(userID uint) ([]*RefreshToken, error) {
	allTokens, err := s.repository.FindByUserID(userID)
	if err != nil {
		return nil, err
	}
	
	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
	var activeTokens []*RefreshToken
	for _, token := range allTokens {
		if token.IsValid() == nil {
			activeTokens = append(activeTokens, token)
		}
	}
	
	return activeTokens, nil
}

// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¥–ª—è refresh tokens

// RefreshTokenConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è refresh tokens
type RefreshTokenConfig struct {
	// –°—Ä–æ–∫ –∂–∏–∑–Ω–∏ refresh token (–æ–±—ã—á–Ω–æ 7-30 –¥–Ω–µ–π)
	ExpiryDuration time.Duration `yaml:"expiry_duration" env:"REFRESH_TOKEN_EXPIRY" default:"168h"` // 7 –¥–Ω–µ–π
	
	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	MaxTokensPerUser int `yaml:"max_tokens_per_user" env:"REFRESH_TOKEN_MAX_PER_USER" default:"5"`
	
	// –í–∫–ª—é—á–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤
	EnableRotation bool `yaml:"enable_rotation" env:"REFRESH_TOKEN_ENABLE_ROTATION" default:"true"`
	
	// –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
	CleanupInterval time.Duration `yaml:"cleanup_interval" env:"REFRESH_TOKEN_CLEANUP_INTERVAL" default:"24h"`
	
	// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∑–∞ N –¥–Ω–µ–π
	ExpiryWarningDays int `yaml:"expiry_warning_days" env:"REFRESH_TOKEN_EXPIRY_WARNING_DAYS" default:"3"`
}

// –°–û–ë–´–¢–ò–Ø –î–û–ú–ï–ù–ê –¥–ª—è refresh tokens
// üìö –ò–ó–£–ß–ò–¢–¨: Domain Events
// https://martinfowler.com/eaaDev/DomainEvent.html

// RefreshTokenCreated —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
type RefreshTokenCreated struct {
	TokenID    uint      `json:"token_id"`
	UserID     uint      `json:"user_id"`
	DeviceInfo string    `json:"device_info"`
	CreatedAt  time.Time `json:"created_at"`
}

// RefreshTokenUsed —Å–æ–±—ã—Ç–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
type RefreshTokenUsed struct {
	TokenID  uint      `json:"token_id"`
	UserID   uint      `json:"user_id"`
	UsedAt   time.Time `json:"used_at"`
}

// RefreshTokenRevoked —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–∞
type RefreshTokenRevoked struct {
	TokenID       uint      `json:"token_id"`
	UserID        uint      `json:"user_id"`
	RevokedAt     time.Time `json:"revoked_at"`
	RevokedReason string    `json:"revoked_reason"`
}

// RefreshTokenRotated —Å–æ–±—ã—Ç–∏–µ —Ä–æ—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
type RefreshTokenRotated struct {
	OldTokenID uint      `json:"old_token_id"`
	NewTokenID uint      `json:"new_token_id"`
	UserID     uint      `json:"user_id"`
	RotatedAt  time.Time `json:"rotated_at"`
}

// –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:

/*
// –í Use Case:
type RefreshTokenUseCase struct {
    tokenService *auth.RefreshTokenService
    jwtGenerator JWTGenerator
}

func (uc *RefreshTokenUseCase) RefreshAccessToken(refreshTokenValue string, deviceInfo string) (*TokenPair, error) {
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º refresh token
    refreshToken, err := uc.tokenService.ValidateToken(refreshTokenValue)
    if err != nil {
        return nil, err
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π access token
    accessToken, err := uc.jwtGenerator.Generate(refreshToken.UserID)
    if err != nil {
        return nil, err
    }
    
    // –†–æ—Ç–∏—Ä—É–µ–º refresh token (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    newRefreshToken, err := uc.tokenService.RotateToken(refreshTokenValue, deviceInfo, 7*24*time.Hour)
    if err != nil {
        return nil, err
    }
    
    return &TokenPair{
        AccessToken:  accessToken,
        RefreshToken: newRefreshToken.Token,
    }, nil
}

// –í Controller:
func (c *AuthController) RefreshToken(w http.ResponseWriter, r *http.Request) {
    var req RefreshTokenRequest
    if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
        http.Error(w, "Invalid request", http.StatusBadRequest)
        return
    }
    
    deviceInfo := extractDeviceInfo(r) // User-Agent, IP, etc.
    
    tokens, err := c.refreshTokenUC.RefreshAccessToken(req.RefreshToken, deviceInfo)
    if err != nil {
        if errors.Is(err, auth.ErrRefreshTokenExpired) {
            http.Error(w, "Token expired", http.StatusUnauthorized)
            return
        }
        http.Error(w, "Invalid token", http.StatusUnauthorized)
        return
    }
    
    json.NewEncoder(w).Encode(tokens)
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞:
func (s *RefreshTokenService) StartCleanupWorker(ctx context.Context, interval time.Duration) {
    ticker := time.NewTicker(interval)
    defer ticker.Stop()
    
    for {
        select {
        case <-ticker.C:
            deleted, err := s.CleanupExpiredTokens()
            if err != nil {
                log.Printf("Failed to cleanup expired tokens: %v", err)
            } else if deleted > 0 {
                log.Printf("Cleaned up %d expired refresh tokens", deleted)
            }
        case <-ctx.Done():
            return
        }
    }
}
*/

// –í–ê–ñ–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:
// 1. Refresh tokens –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –ë–î, –ù–ï –≤ localStorage –±—Ä–∞—É–∑–µ—Ä–∞
// 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏
// 3. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
// 4. –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// 5. –õ–æ–≥–∏—Ä—É–π—Ç–µ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è –∞—É–¥–∏—Ç–∞
// 6. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–æ–∑–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã
// 7. –û—á–∏—â–∞–π—Ç–µ –∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ