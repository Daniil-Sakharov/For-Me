package mocks

import (
	"context"
	"clean-url-shortener/internal/domain/user"
)

// MockUserRepository - –º–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// üìö –ò–ó–£–ß–ò–¢–¨: Mocking patterns in Go
// https://blog.codecentric.de/en/2017/08/gomock-tutorial/
// https://github.com/golang/mock
//
// –ó–ê–ß–ï–ú –ù–£–ñ–ù–´ –ú–û–ö–ò:
// 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –ë–ï–ó —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
// 2. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
// 3. –¢–µ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±—ã—Å—Ç—Ä–æ –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
// 4. –ú–æ–∂–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ edge cases
type MockUserRepository struct {
	// –ü–æ–ª—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –º–æ–∫–∞
	SaveFunc       func(ctx context.Context, user *user.User) error
	FindByIDFunc   func(ctx context.Context, id uint) (*user.User, error)
	FindByEmailFunc func(ctx context.Context, email string) (*user.User, error)
	DeleteFunc     func(ctx context.Context, id uint) error
	ExistsFunc     func(ctx context.Context, email string) (bool, error)
	
	// –°—á–µ—Ç—á–∏–∫–∏ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
	SaveCallCount       int
	FindByIDCallCount   int
	FindByEmailCallCount int
	DeleteCallCount     int
	ExistsCallCount     int
	
	// –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	LastSavedUser    *user.User
	LastFindByIDParam uint
	LastFindByEmailParam string
	LastDeleteParam  uint
	LastExistsParam  string
}

// Save —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å user.Repository
func (m *MockUserRepository) Save(ctx context.Context, u *user.User) error {
	m.SaveCallCount++
	m.LastSavedUser = u
	
	if m.SaveFunc != nil {
		return m.SaveFunc(ctx, u)
	}
	
	// –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
	if u.ID == 0 {
		u.ID = 1 // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
	}
	return nil
}

// FindByID —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å user.Repository
func (m *MockUserRepository) FindByID(ctx context.Context, id uint) (*user.User, error) {
	m.FindByIDCallCount++
	m.LastFindByIDParam = id
	
	if m.FindByIDFunc != nil {
		return m.FindByIDFunc(ctx, id)
	}
	
	// –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
	return nil, nil
}

// FindByEmail —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å user.Repository
func (m *MockUserRepository) FindByEmail(ctx context.Context, email string) (*user.User, error) {
	m.FindByEmailCallCount++
	m.LastFindByEmailParam = email
	
	if m.FindByEmailFunc != nil {
		return m.FindByEmailFunc(ctx, email)
	}
	
	// –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
	return nil, nil
}

// Delete —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å user.Repository
func (m *MockUserRepository) Delete(ctx context.Context, id uint) error {
	m.DeleteCallCount++
	m.LastDeleteParam = id
	
	if m.DeleteFunc != nil {
		return m.DeleteFunc(ctx, id)
	}
	
	// –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
	return nil
}

// Exists —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å user.Repository
func (m *MockUserRepository) Exists(ctx context.Context, email string) (bool, error) {
	m.ExistsCallCount++
	m.LastExistsParam = email
	
	if m.ExistsFunc != nil {
		return m.ExistsFunc(ctx, email)
	}
	
	// –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	return false, nil
}

// Reset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∫–∞ (–ø–æ–ª–µ–∑–Ω–æ –≤ —Ç–µ—Å—Ç–∞—Ö)
func (m *MockUserRepository) Reset() {
	m.SaveCallCount = 0
	m.FindByIDCallCount = 0
	m.FindByEmailCallCount = 0
	m.DeleteCallCount = 0
	m.ExistsCallCount = 0
	
	m.LastSavedUser = nil
	m.LastFindByIDParam = 0
	m.LastFindByEmailParam = ""
	m.LastDeleteParam = 0
	m.LastExistsParam = ""
	
	m.SaveFunc = nil
	m.FindByIDFunc = nil
	m.FindByEmailFunc = nil
	m.DeleteFunc = nil
	m.ExistsFunc = nil
}

// –ü–ê–¢–¢–ï–†–ù: Test Builder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// üìö –ò–ó–£–ß–ò–¢–¨: Test Data Builders
// https://martinfowler.com/bliki/ObjectMother.html

// UserTestBuilder –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤
type UserTestBuilder struct {
	user *user.User
}

// NewUserTestBuilder —Å–æ–∑–¥–∞–µ—Ç –±–∏–ª–¥–µ—Ä —Å –±–∞–∑–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
func NewUserTestBuilder() *UserTestBuilder {
	u, _ := user.NewUser("test@example.com", "Test User")
	u.ID = 1
	
	return &UserTestBuilder{user: u}
}

// WithID —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *UserTestBuilder) WithID(id uint) *UserTestBuilder {
	b.user.ID = id
	return b
}

// WithEmail —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *UserTestBuilder) WithEmail(email string) *UserTestBuilder {
	b.user.Email = email
	return b
}

// WithName —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *UserTestBuilder) WithName(name string) *UserTestBuilder {
	b.user.Name = name
	return b
}

// WithHashedPassword —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
func (b *UserTestBuilder) WithHashedPassword(hash string) *UserTestBuilder {
	b.user.HashedPassword = hash
	return b
}

// Build –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *UserTestBuilder) Build() *user.User {
	return b.user
}