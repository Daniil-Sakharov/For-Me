package user

import (
	"errors"
	"fmt"
	"regexp"
	"strings"
	"time"
	"unicode"
)

// User –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–º–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –≠–¢–û –ß–ò–°–¢–ê–Ø –î–û–ú–ï–ù–ù–ê–Ø –°–£–©–ù–û–°–¢–¨ - –ù–ï–¢ –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –û–¢ –í–ù–ï–®–ù–ò–• –ë–ò–ë–õ–ò–û–¢–ï–ö!
// –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∏ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–º–µ–Ω–∞
type User struct {
	// ID - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	ID uint

	// Email - —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π)
	Email string

	// HashedPassword - –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å (–Ω–µ —Ö—Ä–∞–Ω–∏–º –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ)
	HashedPassword string

	// Name - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	Name string

	// CreatedAt - –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
	CreatedAt time.Time

	// UpdatedAt - –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	UpdatedAt time.Time
}

// üìö –ò–ó–£–ß–ò–¢–¨: Domain-Driven Design Validation
// https://martinfowler.com/articles/replaceThrowWithNotification.html
// https://enterprisecraftsmanship.com/posts/validation-in-domain-driven-design/
// https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-model-layer-validations
//
// –ü–†–ò–ù–¶–ò–ü–´ –î–û–ú–ï–ù–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò:
// 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –¥–æ–º–µ–Ω–µ –∑–∞—â–∏—â–∞–µ—Ç –ò–ù–í–ê–†–ò–ê–ù–¢–´
// 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ø–í–ù–û–ô –∏ –ü–û–ù–Ø–¢–ù–û–ô
// 3. –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - —ç—Ç–æ –î–û–ú–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò
// 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –î–ï–¢–ï–†–ú–ò–ù–ò–†–û–í–ê–ù–ù–û–ô
// 5. –í–∞–ª–∏–¥–∞—Ü–∏—è –ù–ï –ó–ê–í–ò–°–ò–¢ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

// ValidationError –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
type ValidationError struct {
	Field   string `json:"field"`
	Message string `json:"message"`
	Code    string `json:"code"`
}

func (e ValidationError) Error() string {
	return fmt.Sprintf("validation failed for field '%s': %s", e.Field, e.Message)
}

// ValidationErrors –∫–æ–ª–ª–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
type ValidationErrors []ValidationError

func (errs ValidationErrors) Error() string {
	if len(errs) == 0 {
		return "no validation errors"
	}
	
	if len(errs) == 1 {
		return errs[0].Error()
	}
	
	var messages []string
	for _, err := range errs {
		messages = append(messages, err.Error())
	}
	
	return fmt.Sprintf("multiple validation errors: %s", strings.Join(messages, "; "))
}

// HasField –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
func (errs ValidationErrors) HasField(field string) bool {
	for _, err := range errs {
		if err.Field == field {
			return true
		}
	}
	return false
}

// GetField –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
func (errs ValidationErrors) GetField(field string) *ValidationError {
	for _, err := range errs {
		if err.Field == field {
			return &err
		}
	}
	return nil
}

// –î–æ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö –≤ –¥–æ–º–µ–Ω–Ω–æ–º —Å–ª–æ–µ
var (
	// –ë–∞–∑–æ–≤—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	ErrInvalidEmail    = ValidationError{Field: "email", Message: "invalid email format", Code: "INVALID_EMAIL"}
	ErrEmptyName       = ValidationError{Field: "name", Message: "name cannot be empty", Code: "EMPTY_NAME"}
	ErrEmptyPassword   = ValidationError{Field: "password", Message: "password cannot be empty", Code: "EMPTY_PASSWORD"}
	ErrPasswordTooWeak = ValidationError{Field: "password", Message: "password must be at least 8 characters long", Code: "WEAK_PASSWORD"}
	
	// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	ErrNameTooShort     = ValidationError{Field: "name", Message: "name must be at least 2 characters long", Code: "NAME_TOO_SHORT"}
	ErrNameTooLong      = ValidationError{Field: "name", Message: "name cannot exceed 100 characters", Code: "NAME_TOO_LONG"}
	ErrInvalidNameChars = ValidationError{Field: "name", Message: "name contains invalid characters", Code: "INVALID_NAME_CHARS"}
	
	// –û—à–∏–±–∫–∏ email –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	ErrEmailTooLong     = ValidationError{Field: "email", Message: "email cannot exceed 255 characters", Code: "EMAIL_TOO_LONG"}
	ErrEmailInvalidTLD  = ValidationError{Field: "email", Message: "email has invalid top-level domain", Code: "INVALID_TLD"}
	ErrEmailDisposable  = ValidationError{Field: "email", Message: "disposable email addresses are not allowed", Code: "DISPOSABLE_EMAIL"}
	
	// –û—à–∏–±–∫–∏ –ø–∞—Ä–æ–ª—è
	ErrPasswordTooLong        = ValidationError{Field: "password", Message: "password cannot exceed 128 characters", Code: "PASSWORD_TOO_LONG"}
	ErrPasswordNoUppercase    = ValidationError{Field: "password", Message: "password must contain at least one uppercase letter", Code: "NO_UPPERCASE"}
	ErrPasswordNoLowercase    = ValidationError{Field: "password", Message: "password must contain at least one lowercase letter", Code: "NO_LOWERCASE"}
	ErrPasswordNoDigit        = ValidationError{Field: "password", Message: "password must contain at least one digit", Code: "NO_DIGIT"}
	ErrPasswordNoSpecialChar  = ValidationError{Field: "password", Message: "password must contain at least one special character", Code: "NO_SPECIAL_CHAR"}
	ErrPasswordCommonPassword = ValidationError{Field: "password", Message: "password is too common", Code: "COMMON_PASSWORD"}
	ErrPasswordContainsName   = ValidationError{Field: "password", Message: "password cannot contain user's name", Code: "PASSWORD_CONTAINS_NAME"}
	ErrPasswordContainsEmail  = ValidationError{Field: "password", Message: "password cannot contain user's email", Code: "PASSWORD_CONTAINS_EMAIL"}
)

// NewUser - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –°–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–æ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
// üìö –ò–ó–£–ß–ò–¢–¨: Notification Pattern –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
// https://martinfowler.com/articles/replaceThrowWithNotification.html
func NewUser(email, name string) (*User, error) {
	var validationErrors ValidationErrors
	
	// –í–∞–ª–∏–¥–∞—Ü–∏—è email —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–º–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
	if emailErrors := validateEmail(email); len(emailErrors) > 0 {
		validationErrors = append(validationErrors, emailErrors...)
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–º–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
	if nameErrors := validateName(name); len(nameErrors) > 0 {
		validationErrors = append(validationErrors, nameErrors...)
	}
	
	// –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –≤—Å–µ
	if len(validationErrors) > 0 {
		return nil, validationErrors
	}

	now := time.Now()

	return &User{
		Email:     email,
		Name:      name,
		CreatedAt: now,
		UpdatedAt: now,
	}, nil
}

// SetPassword —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —É–∂–µ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å (—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–∞–ª—å,
// –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ infrastructure —Å–ª–æ–µ)
func (u *User) SetPassword(hashedPassword string) error {
	if hashedPassword == "" {
		return ErrEmptyPassword
	}

	u.HashedPassword = hashedPassword
	u.UpdatedAt = time.Now()
	return nil
}

// UpdateName –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (u *User) UpdateName(name string) error {
	if name == "" {
		return ErrEmptyName
	}

	u.Name = name
	u.UpdatedAt = time.Now()
	return nil
}

// UpdateEmail –æ–±–Ω–æ–≤–ª—è–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
func (u *User) UpdateEmail(email string) error {
	if emailErrors := validateEmail(email); len(emailErrors) > 0 {
		return emailErrors
	}

	u.Email = email
	u.UpdatedAt = time.Now()
	return nil
}

// UpdateName –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
func (u *User) UpdateName(name string) error {
	if nameErrors := validateName(name); len(nameErrors) > 0 {
		return nameErrors
	}

	u.Name = name
	u.UpdatedAt = time.Now()
	return nil
}

// ValidatePassword –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–º–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å, —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç
func (u *User) ValidatePassword(password string) error {
	return validatePassword(password, u.Name, u.Email)
}

// Touch –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
func (u *User) Touch() {
	u.UpdatedAt = time.Now()
}

// IsValid –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Å–µ–π —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (u *User) IsValid() error {
	var validationErrors ValidationErrors
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º email
	if emailErrors := validateEmail(u.Email); len(emailErrors) > 0 {
		validationErrors = append(validationErrors, emailErrors...)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è
	if nameErrors := validateName(u.Name); len(nameErrors) > 0 {
		validationErrors = append(validationErrors, nameErrors...)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
	if u.ID == 0 && !u.CreatedAt.IsZero() {
		// –ï—Å–ª–∏ ID = 0, —Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, CreatedAt –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
	}
	
	if u.HashedPassword == "" {
		validationErrors = append(validationErrors, ErrEmptyPassword)
	}
	
	if len(validationErrors) > 0 {
		return validationErrors
	}
	
	return nil
}

// –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –í–ê–õ–ò–î–ê–¶–ò–ò

// validateEmail –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é email
func validateEmail(email string) ValidationErrors {
	var errors ValidationErrors
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
	if email == "" {
		errors = append(errors, ValidationError{
			Field:   "email",
			Message: "email cannot be empty",
			Code:    "EMPTY_EMAIL",
		})
		return errors
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
	if len(email) > 255 {
		errors = append(errors, ErrEmailTooLong)
	}
	
	// –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
	if !isValidEmailFormat(email) {
		errors = append(errors, ErrInvalidEmail)
		return errors // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
	if !isValidEmailDomain(email) {
		errors = append(errors, ErrEmailInvalidTLD)
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ email (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
	if isDisposableEmail(email) {
		errors = append(errors, ErrEmailDisposable)
	}
	
	return errors
}

// validateName –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–º–µ–Ω–∏
func validateName(name string) ValidationErrors {
	var errors ValidationErrors
	
	// –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
	name = strings.TrimSpace(name)
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
	if name == "" {
		errors = append(errors, ErrEmptyName)
		return errors
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
	if len(name) < 2 {
		errors = append(errors, ErrNameTooShort)
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
	if len(name) > 100 {
		errors = append(errors, ErrNameTooLong)
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
	if !isValidNameCharacters(name) {
		errors = append(errors, ErrInvalidNameChars)
	}
	
	return errors
}

// validatePassword –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–æ–ª—è
func validatePassword(password, userName, userEmail string) error {
	var errors ValidationErrors
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
	if password == "" {
		return ErrEmptyPassword
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
	if len(password) < 8 {
		errors = append(errors, ErrPasswordTooWeak)
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
	if len(password) > 128 {
		errors = append(errors, ErrPasswordTooLong)
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
	if !hasUppercase(password) {
		errors = append(errors, ErrPasswordNoUppercase)
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤
	if !hasLowercase(password) {
		errors = append(errors, ErrPasswordNoLowercase)
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä
	if !hasDigit(password) {
		errors = append(errors, ErrPasswordNoDigit)
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
	if !hasSpecialChar(password) {
		errors = append(errors, ErrPasswordNoSpecialChar)
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—â–∏–µ –ø–∞—Ä–æ–ª–∏
	if isCommonPassword(password) {
		errors = append(errors, ErrPasswordCommonPassword)
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if userName != "" && containsIgnoreCase(password, userName) {
		errors = append(errors, ErrPasswordContainsName)
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç email
	if userEmail != "" && containsIgnoreCase(password, strings.Split(userEmail, "@")[0]) {
		errors = append(errors, ErrPasswordContainsEmail)
	}
	
	if len(errors) > 0 {
		return errors
	}
	
	return nil
}

// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò

// isValidEmailFormat –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç email
func isValidEmailFormat(email string) bool {
	// RFC 5322 compliant regex (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	emailRegex := regexp.MustCompile(`^[a-zA-Z0-9.!#$%&'*+/=?^_` + "`" + `{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$`)
	return emailRegex.MatchString(email)
}

// isValidEmailDomain –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–º–µ–Ω email
func isValidEmailDomain(email string) bool {
	parts := strings.Split(email, "@")
	if len(parts) != 2 {
		return false
	}
	
	domain := parts[1]
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ TLD (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
	validTLDs := []string{".com", ".org", ".net", ".edu", ".gov", ".mil", ".int", ".ru", ".—Ä—Ñ"}
	
	for _, tld := range validTLDs {
		if strings.HasSuffix(strings.ToLower(domain), tld) {
			return true
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–µ TLD (—Å—Ç—Ä–∞–Ω—ã)
	if len(domain) >= 3 && domain[len(domain)-3] == '.' {
		return true
	}
	
	return false
}

// isDisposableEmail –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ email –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º
func isDisposableEmail(email string) bool {
	// –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –¥–æ–º–µ–Ω–æ–≤
	disposableDomains := []string{
		"10minutemail.com", "guerrillamail.com", "mailinator.com",
		"tempmail.org", "yopmail.com", "throwaway.email",
	}
	
	domain := strings.ToLower(strings.Split(email, "@")[1])
	
	for _, disposable := range disposableDomains {
		if domain == disposable {
			return true
		}
	}
	
	return false
}

// isValidNameCharacters –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏
func isValidNameCharacters(name string) bool {
	for _, r := range name {
		if !unicode.IsLetter(r) && !unicode.IsSpace(r) && r != '-' && r != '\'' && r != '.' {
			return false
		}
	}
	return true
}

// hasUppercase –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
func hasUppercase(s string) bool {
	for _, r := range s {
		if unicode.IsUpper(r) {
			return true
		}
	}
	return false
}

// hasLowercase –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤
func hasLowercase(s string) bool {
	for _, r := range s {
		if unicode.IsLower(r) {
			return true
		}
	}
	return false
}

// hasDigit –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä
func hasDigit(s string) bool {
	for _, r := range s {
		if unicode.IsDigit(r) {
			return true
		}
	}
	return false
}

// hasSpecialChar –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
func hasSpecialChar(s string) bool {
	specialChars := "!@#$%^&*()_+-=[]{}|;:,.<>?"
	for _, r := range s {
		if strings.ContainsRune(specialChars, r) {
			return true
		}
	}
	return false
}

// isCommonPassword –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç—ã–º
func isCommonPassword(password string) bool {
	// –°–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
	commonPasswords := []string{
		"password", "123456", "password123", "admin", "qwerty",
		"letmein", "welcome", "monkey", "1234567890", "abc123",
		"Password1", "password1", "123456789", "welcome123",
	}
	
	passwordLower := strings.ToLower(password)
	
	for _, common := range commonPasswords {
		if passwordLower == strings.ToLower(common) {
			return true
		}
	}
	
	return false
}

// containsIgnoreCase –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫—É (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
func containsIgnoreCase(s, substr string) bool {
	return strings.Contains(strings.ToLower(s), strings.ToLower(substr))
}

// isValidEmail –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–º–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º (legacy)
// –û—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ validateEmail
func isValidEmail(email string) bool {
	return len(validateEmail(email)) == 0
}