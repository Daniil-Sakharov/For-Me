package user

import (
	"context"
	"time"
)

// üìö –ò–ó–£–ß–ò–¢–¨: Repository Pattern —Å Pagination –∏ Filtering
// https://martinfowler.com/eaaCatalog/repository.html
// https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design
// https://www.postgresql.org/docs/current/queries-limit.html
//
// –ü–†–ò–ù–¶–ò–ü–´ PAGINATION –ò FILTERING:
// 1. Pagination –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≠–§–§–ï–ö–¢–ò–í–ù–û–ô (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ OFFSET/LIMIT –∏–ª–∏ cursor-based)
// 2. –§–∏–ª—å—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ú–ò
// 3. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ü–†–ï–î–°–ö–ê–ó–£–ï–ú–û–ô
// 4. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –¥–ª—è UI
// 5. –í–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã pagination

// PaginationParams –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
type PaginationParams struct {
	// Page –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
	Page int `json:"page" validate:"min=1"`
	
	// Limit –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
	Limit int `json:"limit" validate:"min=1,max=100"`
	
	// Offset —Å–º–µ—â–µ–Ω–∏–µ (–≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
	Offset int `json:"offset"`
}

// NewPaginationParams —Å–æ–∑–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
func NewPaginationParams(page, limit int) PaginationParams {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if page < 1 {
		page = 1
	}
	if limit < 1 {
		limit = 10
	}
	if limit > 100 {
		limit = 100 // –ú–∞–∫—Å–∏–º—É–º 100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
	}
	
	offset := (page - 1) * limit
	
	return PaginationParams{
		Page:   page,
		Limit:  limit,
		Offset: offset,
	}
}

// SortOrder –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

// SortParams –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
type SortParams struct {
	// Field –ø–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
	Field string `json:"field"`
	
	// Order –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
	Order SortOrder `json:"order"`
}

// NewSortParams —Å–æ–∑–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
func NewSortParams(field string, order SortOrder) SortParams {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
	validFields := []string{"id", "email", "name", "created_at", "updated_at"}
	isValidField := false
	for _, validField := range validFields {
		if field == validField {
			isValidField = true
			break
		}
	}
	
	if !isValidField {
		field = "created_at" // –ü–æ–ª–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}
	
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
	if order != SortOrderAsc && order != SortOrderDesc {
		order = SortOrderDesc // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}
	
	return SortParams{
		Field: field,
		Order: order,
	}
}

// FilterParams –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type FilterParams struct {
	// Email —Ñ–∏–ª—å—Ç—Ä –ø–æ email (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
	Email string `json:"email,omitempty"`
	
	// Name —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
	Name string `json:"name,omitempty"`
	
	// CreatedAfter –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
	CreatedAfter *time.Time `json:"created_after,omitempty"`
	
	// CreatedBefore –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
	CreatedBefore *time.Time `json:"created_before,omitempty"`
	
	// UpdatedAfter –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
	UpdatedAfter *time.Time `json:"updated_after,omitempty"`
	
	// UpdatedBefore –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
	UpdatedBefore *time.Time `json:"updated_before,omitempty"`
	
	// IDs —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–ø–∏—Å–∫—É ID
	IDs []uint `json:"ids,omitempty"`
	
	// ExcludeIDs –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ ID
	ExcludeIDs []uint `json:"exclude_ids,omitempty"`
}

// IsEmpty –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç—ã–µ –ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã
func (f FilterParams) IsEmpty() bool {
	return f.Email == "" && 
		   f.Name == "" && 
		   f.CreatedAfter == nil && 
		   f.CreatedBefore == nil &&
		   f.UpdatedAfter == nil &&
		   f.UpdatedBefore == nil &&
		   len(f.IDs) == 0 &&
		   len(f.ExcludeIDs) == 0
}

// FindUsersQuery –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
type FindUsersQuery struct {
	// Pagination –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	Pagination PaginationParams `json:"pagination"`
	
	// Sort –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
	Sort SortParams `json:"sort"`
	
	// Filter –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
	Filter FilterParams `json:"filter"`
}

// NewFindUsersQuery —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func NewFindUsersQuery() FindUsersQuery {
	return FindUsersQuery{
		Pagination: NewPaginationParams(1, 10),
		Sort:       NewSortParams("created_at", SortOrderDesc),
		Filter:     FilterParams{},
	}
}

// PaginatedResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
type PaginatedResult struct {
	// Items –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
	Items []*User `json:"items"`
	
	// Total –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ —É—á–µ—Ç–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
	Total int64 `json:"total"`
	
	// Page —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
	Page int `json:"page"`
	
	// Limit –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
	Limit int `json:"limit"`
	
	// TotalPages –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
	TotalPages int `json:"total_pages"`
	
	// HasNext –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
	HasNext bool `json:"has_next"`
	
	// HasPrev –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
	HasPrev bool `json:"has_prev"`
}

// NewPaginatedResult —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
func NewPaginatedResult(items []*User, total int64, pagination PaginationParams) *PaginatedResult {
	totalPages := int((total + int64(pagination.Limit) - 1) / int64(pagination.Limit))
	if totalPages == 0 {
		totalPages = 1
	}
	
	return &PaginatedResult{
		Items:      items,
		Total:      total,
		Page:       pagination.Page,
		Limit:      pagination.Limit,
		TotalPages: totalPages,
		HasNext:    pagination.Page < totalPages,
		HasPrev:    pagination.Page > 1,
	}
}

// Repository –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
// –≠–¢–û –ò–ù–¢–ï–†–§–ï–ô–° –í –î–û–ú–ï–ù–ù–û–ú –°–õ–û–ï - –æ–Ω –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ß–¢–û –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å, –Ω–æ –ù–ï –ö–ê–ö
// –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ infrastructure —Å–ª–æ–µ
type Repository interface {
	// Save —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	// –ï—Å–ª–∏ ID = 0, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID
	// –ï—Å–ª–∏ ID != 0, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	Save(ctx context.Context, user *User) error

	// FindByID –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
	// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
	FindByID(ctx context.Context, id uint) (*User, error)

	// FindByEmail –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
	// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
	FindByEmail(ctx context.Context, email string) (*User, error)
	
	// FindUsers –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
	FindUsers(ctx context.Context, query FindUsersQuery) (*PaginatedResult, error)
	
	// CountUsers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
	CountUsers(ctx context.Context, filter FilterParams) (int64, error)

	// Delete —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
	Delete(ctx context.Context, id uint) error
	
	// DeleteByIDs —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–ø–∏—Å–∫—É ID (batch delete)
	DeleteByIDs(ctx context.Context, ids []uint) error

	// Exists –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
	// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
	Exists(ctx context.Context, email string) (bool, error)
	
	// ExistsByIDs –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–ø–∏—Å–∫—É ID
	ExistsByIDs(ctx context.Context, ids []uint) (map[uint]bool, error)
}

// –í–ê–ñ–ù–û: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Repository –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ domain —Å–ª–æ–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ:
// 1. –î–æ–º–µ–Ω–Ω—ã–π —Å–ª–æ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ü–†–ê–í–ò–õ–ê —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
// 2. Use Case —Å–ª–æ–π –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
// 3. Infrastructure —Å–ª–æ–π –±—É–¥–µ—Ç –†–ï–ê–õ–ò–ó–û–í–´–í–ê–¢–¨ —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
// 4. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ò–ù–í–ï–†–°–ò–Æ –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ–∏ –Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö