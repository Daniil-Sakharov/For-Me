package user

import (
	"testing"
	"time"
)

// üìö –ò–ó–£–ß–ò–¢–¨: Table-driven tests –≤ Go
// https://github.com/golang/go/wiki/TableDrivenTests
// https://dave.cheney.net/2019/05/07/prefer-table-driven-tests

// TestNewUser_Success —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func TestNewUser_Success(t *testing.T) {
	// ARRANGE (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
	email := "test@example.com"
	name := "Test User"
	
	// ACT (–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è)
	user, err := NewUser(email, name)
	
	// ASSERT (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
	if err != nil {
		t.Errorf("Expected no error, got %v", err)
	}
	
	if user == nil {
		t.Fatal("Expected user to be created, got nil")
	}
	
	if user.Email != email {
		t.Errorf("Expected email %s, got %s", email, user.Email)
	}
	
	if user.Name != name {
		t.Errorf("Expected name %s, got %s", name, user.Name)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
	if user.CreatedAt.IsZero() {
		t.Error("Expected CreatedAt to be set")
	}
	
	if user.UpdatedAt.IsZero() {
		t.Error("Expected UpdatedAt to be set")
	}
	
	// ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0 –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if user.ID != 0 {
		t.Errorf("Expected ID to be 0 for new user, got %d", user.ID)
	}
}

// TestNewUser_ValidationErrors —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –ü–ê–¢–¢–ï–†–ù: Table-driven tests –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
func TestNewUser_ValidationErrors(t *testing.T) {
	// –¢–∞–±–ª–∏—Ü–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
	testCases := []struct {
		name          string  // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
		email         string  // –í—Ö–æ–¥–Ω–æ–π email
		userName      string  // –í—Ö–æ–¥–Ω–æ–µ –∏–º—è
		expectedError error   // –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞
		description   string  // –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
	}{
		{
			name:          "invalid_email_empty",
			email:         "",
			userName:      "Valid Name",
			expectedError: ErrInvalidEmail,
			description:   "–ü—É—Å—Ç–æ–π email –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É",
		},
		{
			name:          "invalid_email_format",
			email:         "not-an-email",
			userName:      "Valid Name",
			expectedError: ErrInvalidEmail,
			description:   "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É",
		},
		{
			name:          "invalid_email_no_domain",
			email:         "test@",
			userName:      "Valid Name",
			expectedError: ErrInvalidEmail,
			description:   "Email –±–µ–∑ –¥–æ–º–µ–Ω–∞ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É",
		},
		{
			name:          "empty_name",
			email:         "test@example.com",
			userName:      "",
			expectedError: ErrEmptyName,
			description:   "–ü—É—Å—Ç–æ–µ –∏–º—è –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É",
		},
		{
			name:          "whitespace_only_name",
			email:         "test@example.com",
			userName:      "   ",
			expectedError: ErrEmptyName,
			description:   "–ò–º—è –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É",
		},
	}
	
	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// ACT
			user, err := NewUser(tc.email, tc.userName)
			
			// ASSERT
			if err != tc.expectedError {
				t.Errorf("Expected error %v, got %v. %s", tc.expectedError, err, tc.description)
			}
			
			if user != nil {
				t.Errorf("Expected user to be nil when error occurs, got %+v", user)
			}
		})
	}
}

// TestUser_SetPassword —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞—Ä–æ–ª—è
func TestUser_SetPassword(t *testing.T) {
	// ARRANGE
	user, err := NewUser("test@example.com", "Test User")
	if err != nil {
		t.Fatalf("Failed to create user: %v", err)
	}
	
	password := "validpassword123"
	
	// ACT
	err = user.SetPassword(password)
	
	// ASSERT
	if err != nil {
		t.Errorf("Expected no error, got %v", err)
	}
	
	if user.HashedPassword == "" {
		t.Error("Expected hashed password to be set")
	}
	
	if user.HashedPassword == password {
		t.Error("Password should be hashed, not stored in plain text")
	}
}

// TestUser_SetPassword_ValidationErrors —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–æ–ª—è
func TestUser_SetPassword_ValidationErrors(t *testing.T) {
	// ARRANGE
	user, err := NewUser("test@example.com", "Test User")
	if err != nil {
		t.Fatalf("Failed to create user: %v", err)
	}
	
	testCases := []struct {
		name          string
		password      string
		expectedError error
		description   string
	}{
		{
			name:          "empty_password",
			password:      "",
			expectedError: ErrEmptyPassword,
			description:   "–ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É",
		},
		{
			name:          "short_password",
			password:      "123",
			expectedError: ErrPasswordTooWeak,
			description:   "–ö–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É",
		},
		{
			name:          "seven_char_password",
			password:      "1234567",
			expectedError: ErrPasswordTooWeak,
			description:   "–ü–∞—Ä–æ–ª—å –∏–∑ 7 —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É",
		},
	}
	
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// ACT
			err := user.SetPassword(tc.password)
			
			// ASSERT
			if err != tc.expectedError {
				t.Errorf("Expected error %v, got %v. %s", tc.expectedError, err, tc.description)
			}
		})
	}
}

// TestUser_CheckPassword —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è
func TestUser_CheckPassword(t *testing.T) {
	// ARRANGE
	user, err := NewUser("test@example.com", "Test User")
	if err != nil {
		t.Fatalf("Failed to create user: %v", err)
	}
	
	password := "validpassword123"
	err = user.SetPassword(password)
	if err != nil {
		t.Fatalf("Failed to set password: %v", err)
	}
	
	// ACT & ASSERT - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
	err = user.CheckPassword(password)
	if err != nil {
		t.Errorf("Expected no error for correct password, got %v", err)
	}
	
	// ACT & ASSERT - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
	err = user.CheckPassword("wrongpassword")
	if err == nil {
		t.Error("Expected error for incorrect password")
	}
}

// TestUser_UpdatedAt —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
func TestUser_UpdatedAt(t *testing.T) {
	// ARRANGE
	user, err := NewUser("test@example.com", "Test User")
	if err != nil {
		t.Fatalf("Failed to create user: %v", err)
	}
	
	originalUpdatedAt := user.UpdatedAt
	
	// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
	time.Sleep(time.Millisecond)
	
	// ACT
	user.Touch()
	
	// ASSERT
	if !user.UpdatedAt.After(originalUpdatedAt) {
		t.Error("Expected UpdatedAt to be updated after Touch()")
	}
}

// –ë–ï–ù–ß–ú–ê–†–ö–ò –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
// üìö –ò–ó–£–ß–ò–¢–¨: Benchmarking –≤ Go
// https://golang.org/pkg/testing/#hdr-Benchmarks
// https://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go

// BenchmarkNewUser –∏–∑–º–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func BenchmarkNewUser(b *testing.B) {
	email := "test@example.com"
	name := "Test User"
	
	// b.N –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
	for i := 0; i < b.N; i++ {
		_, err := NewUser(email, name)
		if err != nil {
			b.Fatalf("Unexpected error: %v", err)
		}
	}
}

// BenchmarkSetPassword –∏–∑–º–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
func BenchmarkSetPassword(b *testing.B) {
	user, err := NewUser("test@example.com", "Test User")
	if err != nil {
		b.Fatalf("Failed to create user: %v", err)
	}
	
	password := "validpassword123"
	
	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
	b.ResetTimer()
	
	for i := 0; i < b.N; i++ {
		err := user.SetPassword(password)
		if err != nil {
			b.Fatalf("Unexpected error: %v", err)
		}
	}
}

// –ü–†–ò–ú–ï–†–´ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
// üìö –ò–ó–£–ß–ò–¢–¨: Example tests –≤ Go
// https://golang.org/pkg/testing/#hdr-Examples

// ExampleNewUser –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func ExampleNewUser() {
	user, err := NewUser("john@example.com", "John Doe")
	if err != nil {
		panic(err)
	}
	
	println("User created:", user.Email, user.Name)
	// Output: User created: john@example.com John Doe
}

// ExampleUser_SetPassword –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞—Ä–æ–ª—è
func ExampleUser_SetPassword() {
	user, _ := NewUser("john@example.com", "John Doe")
	
	err := user.SetPassword("securepassword123")
	if err != nil {
		panic(err)
	}
	
	println("Password set successfully")
	// Output: Password set successfully
}