package auth

import (
	"context"
	"errors"
	"testing"
	"time"
	
	"clean-url-shortener/internal/domain/user"
	"clean-url-shortener/internal/domain/user/mocks"
	authMocks "clean-url-shortener/internal/usecase/auth/mocks"
)

// üìö –ò–ó–£–ß–ò–¢–¨: Testing Use Cases –≤ Clean Architecture
// https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html
// https://martinfowler.com/articles/practical-test-pyramid.html
//
// –ü–†–ò–ù–¶–ò–ü–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø USE CASES:
// 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–£, –∞ –Ω–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
// 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ú–û–ö–ò –¥–ª—è –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
// 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –í–°–ï —Å—Ü–µ–Ω–∞—Ä–∏–∏: —É—Å–ø–µ—à–Ω—ã–µ –∏ –æ—à–∏–±–æ—á–Ω—ã–µ
// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏

// TestRegisterUseCase_Success —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func TestRegisterUseCase_Success(t *testing.T) {
	// ARRANGE - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
	mockRepo := &mocks.MockUserRepository{}
	mockHasher := &authMocks.MockPasswordHasher{}
	mockTokenGen := &authMocks.MockTokenGenerator{}
	
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∫–æ–≤
	mockRepo.ExistsFunc = func(ctx context.Context, email string) (bool, error) {
		return false, nil // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	}
	
	mockHasher.HashFunc = func(password string) (string, error) {
		return "hashed_" + password, nil
	}
	
	mockTokenGen.GenerateFunc = func(userID uint, email string) (string, error) {
		return "generated_token", nil
	}
	
	// –°–æ–∑–¥–∞–µ–º Use Case —Å –º–æ–∫–∞–º–∏
	uc := NewRegisterUseCase(mockRepo, mockHasher, mockTokenGen)
	
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
	req := RegisterRequest{
		Email:    "test@example.com",
		Password: "validpassword123",
		Name:     "Test User",
	}
	
	// ACT - –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
	ctx := context.Background()
	response, err := uc.Execute(ctx, req)
	
	// ASSERT - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	if err != nil {
		t.Errorf("Expected no error, got %v", err)
	}
	
	if response == nil {
		t.Fatal("Expected response, got nil")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
	if response.Email != req.Email {
		t.Errorf("Expected email %s, got %s", req.Email, response.Email)
	}
	
	if response.Name != req.Name {
		t.Errorf("Expected name %s, got %s", req.Name, response.Name)
	}
	
	if response.Token != "generated_token" {
		t.Errorf("Expected token 'generated_token', got %s", response.Token)
	}
	
	if response.UserID == 0 {
		t.Error("Expected UserID to be set")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫–∏ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
	if mockRepo.ExistsCallCount != 1 {
		t.Errorf("Expected Exists to be called once, called %d times", mockRepo.ExistsCallCount)
	}
	
	if mockHasher.HashCallCount != 1 {
		t.Errorf("Expected Hash to be called once, called %d times", mockHasher.HashCallCount)
	}
	
	if mockRepo.SaveCallCount != 1 {
		t.Errorf("Expected Save to be called once, called %d times", mockRepo.SaveCallCount)
	}
	
	if mockTokenGen.GenerateCallCount != 1 {
		t.Errorf("Expected Generate to be called once, called %d times", mockTokenGen.GenerateCallCount)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ –º–æ–∫–∏
	if mockRepo.LastExistsParam != req.Email {
		t.Errorf("Expected Exists to be called with %s, called with %s", req.Email, mockRepo.LastExistsParam)
	}
	
	if mockHasher.LastPlainPassword != req.Password {
		t.Errorf("Expected Hash to be called with %s, called with %s", req.Password, mockHasher.LastPlainPassword)
	}
}

// TestRegisterUseCase_UserAlreadyExists —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func TestRegisterUseCase_UserAlreadyExists(t *testing.T) {
	// ARRANGE
	mockRepo := &mocks.MockUserRepository{}
	mockHasher := &authMocks.MockPasswordHasher{}
	mockTokenGen := &authMocks.MockTokenGenerator{}
	
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	mockRepo.ExistsFunc = func(ctx context.Context, email string) (bool, error) {
		return true, nil // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!
	}
	
	uc := NewRegisterUseCase(mockRepo, mockHasher, mockTokenGen)
	
	req := RegisterRequest{
		Email:    "existing@example.com",
		Password: "validpassword123",
		Name:     "Test User",
	}
	
	// ACT
	ctx := context.Background()
	response, err := uc.Execute(ctx, req)
	
	// ASSERT
	if err != ErrUserAlreadyExists {
		t.Errorf("Expected ErrUserAlreadyExists, got %v", err)
	}
	
	if response != nil {
		t.Errorf("Expected nil response when user exists, got %+v", response)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –ù–ï –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
	if mockHasher.HashCallCount > 0 {
		t.Error("Hash should not be called when user already exists")
	}
	
	if mockRepo.SaveCallCount > 0 {
		t.Error("Save should not be called when user already exists")
	}
	
	if mockTokenGen.GenerateCallCount > 0 {
		t.Error("Generate should not be called when user already exists")
	}
}

// TestRegisterUseCase_DatabaseErrors —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func TestRegisterUseCase_DatabaseErrors(t *testing.T) {
	testCases := []struct {
		name           string
		setupMocks     func(*mocks.MockUserRepository, *authMocks.MockPasswordHasher, *authMocks.MockTokenGenerator)
		expectedError  error
		description    string
	}{
		{
			name: "exists_check_error",
			setupMocks: func(repo *mocks.MockUserRepository, hasher *authMocks.MockPasswordHasher, tokenGen *authMocks.MockTokenGenerator) {
				// –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				repo.ExistsFunc = func(ctx context.Context, email string) (bool, error) {
					return false, errors.New("database connection error")
				}
			},
			expectedError: errors.New("database connection error"),
			description:   "–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
		},
		{
			name: "save_error",
			setupMocks: func(repo *mocks.MockUserRepository, hasher *authMocks.MockPasswordHasher, tokenGen *authMocks.MockTokenGenerator) {
				repo.ExistsFunc = func(ctx context.Context, email string) (bool, error) {
					return false, nil
				}
				hasher.HashFunc = func(password string) (string, error) {
					return "hashed_password", nil
				}
				// –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				repo.SaveFunc = func(ctx context.Context, user *user.User) error {
					return errors.New("save error")
				}
			},
			expectedError: errors.New("save error"),
			description:   "–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
		},
	}
	
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// ARRANGE
			mockRepo := &mocks.MockUserRepository{}
			mockHasher := &authMocks.MockPasswordHasher{}
			mockTokenGen := &authMocks.MockTokenGenerator{}
			
			tc.setupMocks(mockRepo, mockHasher, mockTokenGen)
			
			uc := NewRegisterUseCase(mockRepo, mockHasher, mockTokenGen)
			
			req := RegisterRequest{
				Email:    "test@example.com",
				Password: "validpassword123",
				Name:     "Test User",
			}
			
			// ACT
			ctx := context.Background()
			response, err := uc.Execute(ctx, req)
			
			// ASSERT
			if err == nil {
				t.Errorf("Expected error, got nil. %s", tc.description)
			}
			
			if response != nil {
				t.Errorf("Expected nil response on error, got %+v", response)
			}
		})
	}
}

// TestRegisterUseCase_PasswordHashingError —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
func TestRegisterUseCase_PasswordHashingError(t *testing.T) {
	// ARRANGE
	mockRepo := &mocks.MockUserRepository{}
	mockHasher := &authMocks.MockPasswordHasher{}
	mockTokenGen := &authMocks.MockTokenGenerator{}
	
	mockRepo.ExistsFunc = func(ctx context.Context, email string) (bool, error) {
		return false, nil
	}
	
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—à–∏–±–∫—É —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
	hashError := errors.New("hashing failed")
	mockHasher.HashFunc = func(password string) (string, error) {
		return "", hashError
	}
	
	uc := NewRegisterUseCase(mockRepo, mockHasher, mockTokenGen)
	
	req := RegisterRequest{
		Email:    "test@example.com",
		Password: "validpassword123",
		Name:     "Test User",
	}
	
	// ACT
	ctx := context.Background()
	response, err := uc.Execute(ctx, req)
	
	// ASSERT
	if err != hashError {
		t.Errorf("Expected hash error, got %v", err)
	}
	
	if response != nil {
		t.Errorf("Expected nil response on hash error, got %+v", response)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Save –ù–ï –±—ã–ª –≤—ã–∑–≤–∞–Ω
	if mockRepo.SaveCallCount > 0 {
		t.Error("Save should not be called when hashing fails")
	}
}

// TestRegisterUseCase_TokenGenerationError —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
func TestRegisterUseCase_TokenGenerationError(t *testing.T) {
	// ARRANGE
	mockRepo := &mocks.MockUserRepository{}
	mockHasher := &authMocks.MockPasswordHasher{}
	mockTokenGen := &authMocks.MockTokenGenerator{}
	
	mockRepo.ExistsFunc = func(ctx context.Context, email string) (bool, error) {
		return false, nil
	}
	
	mockHasher.HashFunc = func(password string) (string, error) {
		return "hashed_password", nil
	}
	
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
	tokenError := errors.New("token generation failed")
	mockTokenGen.GenerateFunc = func(userID uint, email string) (string, error) {
		return "", tokenError
	}
	
	uc := NewRegisterUseCase(mockRepo, mockHasher, mockTokenGen)
	
	req := RegisterRequest{
		Email:    "test@example.com",
		Password: "validpassword123",
		Name:     "Test User",
	}
	
	// ACT
	ctx := context.Background()
	response, err := uc.Execute(ctx, req)
	
	// ASSERT
	if err != tokenError {
		t.Errorf("Expected token error, got %v", err)
	}
	
	if response != nil {
		t.Errorf("Expected nil response on token error, got %+v", response)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –í–°–ï –ï–©–ï –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
	// (—ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö)
	if mockRepo.SaveCallCount != 1 {
		t.Errorf("Save should be called even if token generation fails, called %d times", mockRepo.SaveCallCount)
	}
}

// TestRegisterUseCase_InvalidDomainData —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–æ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
func TestRegisterUseCase_InvalidDomainData(t *testing.T) {
	// ARRANGE
	mockRepo := &mocks.MockUserRepository{}
	mockHasher := &authMocks.MockPasswordHasher{}
	mockTokenGen := &authMocks.MockTokenGenerator{}
	
	mockRepo.ExistsFunc = func(ctx context.Context, email string) (bool, error) {
		return false, nil
	}
	
	uc := NewRegisterUseCase(mockRepo, mockHasher, mockTokenGen)
	
	testCases := []struct {
		name        string
		request     RegisterRequest
		description string
	}{
		{
			name: "invalid_email",
			request: RegisterRequest{
				Email:    "invalid-email",
				Password: "validpassword123",
				Name:     "Test User",
			},
			description: "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –¥–æ–º–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É",
		},
		{
			name: "empty_name",
			request: RegisterRequest{
				Email:    "test@example.com",
				Password: "validpassword123",
				Name:     "",
			},
			description: "–ü—É—Å—Ç–æ–µ –∏–º—è –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –¥–æ–º–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É",
		},
	}
	
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// ACT
			ctx := context.Background()
			response, err := uc.Execute(ctx, tc.request)
			
			// ASSERT
			if err == nil {
				t.Errorf("Expected domain validation error, got nil. %s", tc.description)
			}
			
			if response != nil {
				t.Errorf("Expected nil response on validation error, got %+v", response)
			}
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏–∫–∞–∫–∏–µ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –ù–ï –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
			if mockHasher.HashCallCount > 0 {
				t.Error("Hash should not be called on validation error")
			}
			
			if mockRepo.SaveCallCount > 0 {
				t.Error("Save should not be called on validation error")
			}
		})
	}
}

// –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
// üìö –ò–ó–£–ß–ò–¢–¨: Integration vs Unit tests
// https://martinfowler.com/bliki/IntegrationTest.html

// TestRegisterUseCase_Integration —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
// –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ bcrypt –∏ JWT - –æ–Ω –º–µ–¥–ª–µ–Ω–Ω–µ–µ!
func TestRegisterUseCase_Integration(t *testing.T) {
	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –∑–∞–ø—É—Å–∫–µ
	if testing.Short() {
		t.Skip("Skipping integration test in short mode")
	}
	
	// ARRANGE - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
	mockRepo := &mocks.MockUserRepository{}
	
	// TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
	// realHasher := &external.BcryptPasswordHasher{}
	// realTokenGen := &external.JWTTokenGenerator{Secret: "test-secret"}
	
	// –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–∏
	mockHasher := &authMocks.MockPasswordHasher{}
	mockTokenGen := &authMocks.MockTokenGenerator{}
	
	mockRepo.ExistsFunc = func(ctx context.Context, email string) (bool, error) {
		return false, nil
	}
	
	uc := NewRegisterUseCase(mockRepo, mockHasher, mockTokenGen)
	
	req := RegisterRequest{
		Email:    "integration@example.com",
		Password: "integrationtest123",
		Name:     "Integration Test User",
	}
	
	// ACT
	start := time.Now()
	ctx := context.Background()
	response, err := uc.Execute(ctx, req)
	duration := time.Since(start)
	
	// ASSERT
	if err != nil {
		t.Errorf("Integration test failed: %v", err)
	}
	
	if response == nil {
		t.Fatal("Expected response in integration test")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	if duration > time.Second {
		t.Errorf("Registration took too long: %v", duration)
	}
	
	t.Logf("Integration test completed in %v", duration)
}

// –ë–ï–ù–ß–ú–ê–†–ö –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Use Case
func BenchmarkRegisterUseCase_Execute(b *testing.B) {
	// ARRANGE
	mockRepo := &mocks.MockUserRepository{}
	mockHasher := &authMocks.MockPasswordHasher{}
	mockTokenGen := &authMocks.MockTokenGenerator{}
	
	mockRepo.ExistsFunc = func(ctx context.Context, email string) (bool, error) {
		return false, nil
	}
	
	uc := NewRegisterUseCase(mockRepo, mockHasher, mockTokenGen)
	
	req := RegisterRequest{
		Email:    "benchmark@example.com",
		Password: "benchmarkpassword123",
		Name:     "Benchmark User",
	}
	
	ctx := context.Background()
	
	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
	b.ResetTimer()
	
	// –í—ã–ø–æ–ª–Ω—è–µ–º –±–µ–Ω—á–º–∞—Ä–∫
	for i := 0; i < b.N; i++ {
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
		mockRepo.Reset()
		mockHasher.Reset()
		mockTokenGen.Reset()
		
		mockRepo.ExistsFunc = func(ctx context.Context, email string) (bool, error) {
			return false, nil
		}
		
		_, err := uc.Execute(ctx, req)
		if err != nil {
			b.Fatalf("Benchmark failed: %v", err)
		}
	}
}