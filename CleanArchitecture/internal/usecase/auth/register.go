package auth

import (
	"context"
	"errors"
	"time"
	"clean-url-shortener/internal/domain/user"
	"clean-url-shortener/pkg/logger"
)

// –°–¢–†–£–ö–¢–£–†–´ –î–õ–Ø –ó–ê–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í

// RegisterRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
type RegisterRequest struct {
	Email    string `json:"email" validate:"required,email"`
	Password string `json:"password" validate:"required,min=8"`
	Name     string `json:"name" validate:"required,min=2"`
}

// RegisterResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
type RegisterResponse struct {
	Token  string `json:"token"`
	UserID uint   `json:"user_id"`
	Email  string `json:"email"`
	Name   string `json:"name"`
}

// –î–û–ú–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò –î–õ–Ø USE CASE

var (
	ErrUserAlreadyExists = errors.New("user with this email already exists")
	ErrWeakPassword      = errors.New("password is too weak")
)

// RegisterUseCase —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –≠–¢–û –û–°–ù–û–í–ù–û–ô –°–¶–ï–ù–ê–†–ò–ô –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø (USE CASE)
// üìö –ò–ó–£–ß–ò–¢–¨: Logging –≤ Clean Architecture
// https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html
type RegisterUseCase struct {
	// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–Ω–∂–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
	userRepo       user.Repository  // –ò–∑ domain —Å–ª–æ—è
	passwordHasher PasswordHasher   // –ò–∑ usecase —Å–ª–æ—è
	tokenGenerator TokenGenerator   // –ò–∑ usecase —Å–ª–æ—è
	logger         logger.Logger    // ‚Üê –î–û–ë–ê–í–ò–õ–ò –ª–æ–≥–≥–µ—Ä
}

// NewRegisterUseCase —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Use Case –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
// –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (Dependency Injection)
func NewRegisterUseCase(
	userRepo user.Repository,
	passwordHasher PasswordHasher,
	tokenGenerator TokenGenerator,
	logger logger.Logger,  // ‚Üê –î–û–ë–ê–í–ò–õ–ò –ø–∞—Ä–∞–º–µ—Ç—Ä –ª–æ–≥–≥–µ—Ä–∞
) *RegisterUseCase {
	return &RegisterUseCase{
		userRepo:       userRepo,
		passwordHasher: passwordHasher,
		tokenGenerator: tokenGenerator,
		logger:         logger.UseCaseLogger(), // ‚Üê –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è Use Case —Å–ª–æ—è
	}
}

// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –≠—Ç–æ –û–†–ö–ï–°–¢–†–ê–¢–û–† - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ–∂–¥—É –¥–æ–º–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
func (uc *RegisterUseCase) Execute(ctx context.Context, req RegisterRequest) (*RegisterResponse, error) {
	// –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	operationLogger := uc.logger.WithContext(ctx).With(
		"operation", "user_registration",
		"email", logger.SafeEmail(req.Email),
		"name", req.Name,
		// –í–ê–ñ–ù–û: –ù–ï –ª–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å!
	)
	
	// –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	startTime := time.Now()
	defer func() {
		duration := time.Since(startTime)
		operationLogger.Debug("Registration operation completed", 
			"duration_ms", duration.Milliseconds())
	}()
	
	operationLogger.Info("User registration started")

	// –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	operationLogger.Debug("Checking if user already exists")
	exists, err := uc.userRepo.Exists(ctx, req.Email)
	if err != nil {
		operationLogger.Error("Failed to check user existence", 
			"error", err,
			"step", "user_existence_check")
		return nil, err
	}
	
	if exists {
		operationLogger.Warn("Registration attempt for existing user",
			"step", "user_existence_check")
		return nil, ErrUserAlreadyExists
	}
	
	operationLogger.Debug("User does not exist, proceeding with registration")

	// –®–ê–ì 2: –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–∏–ª—É –ø–∞—Ä–æ–ª—è (–¥–æ–º–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ)
	operationLogger.Debug("Validating password strength")
	if len(req.Password) < 8 {
		operationLogger.Warn("Weak password provided",
			"password_length", len(req.Password),
			"step", "password_validation")
		return nil, ErrWeakPassword
	}

	// –®–ê–ì 3: –°–æ–∑–¥–∞–µ–º –¥–æ–º–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	operationLogger.Debug("Creating domain user entity")
	newUser, err := user.NewUser(req.Email, req.Name)
	if err != nil {
		operationLogger.Error("Failed to create domain user entity", 
			"error", err,
			"step", "domain_entity_creation")
		return nil, err
	}
	
	operationLogger.Debug("Domain user entity created successfully")

	// –®–ê–ì 4: –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
	operationLogger.Debug("Hashing user password")
	hashedPassword, err := uc.passwordHasher.Hash(req.Password)
	if err != nil {
		operationLogger.Error("Failed to hash password", 
			"error", err,
			"step", "password_hashing")
		return nil, err
	}
	
	operationLogger.Debug("Password hashed successfully")

	// –®–ê–ì 5: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
	operationLogger.Debug("Setting hashed password to user entity")
	err = newUser.SetPassword(hashedPassword)
	if err != nil {
		operationLogger.Error("Failed to set hashed password", 
			"error", err,
			"step", "password_setting")
		return nil, err
	}

	// –®–ê–ì 6: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	operationLogger.Debug("Saving user to database")
	err = uc.userRepo.Save(ctx, newUser)
	if err != nil {
		operationLogger.Error("Failed to save user to database", 
			"error", err,
			"step", "user_persistence")
		return nil, err
	}
	
	operationLogger.Info("User saved to database successfully", 
		"user_id", newUser.ID)

	// –®–ê–ì 7: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
	operationLogger.Debug("Generating authentication token")
	token, err := uc.tokenGenerator.Generate(newUser.ID, newUser.Email)
	if err != nil {
		operationLogger.Error("Failed to generate authentication token", 
			"error", err,
			"user_id", newUser.ID,
			"step", "token_generation")
		return nil, err
	}
	
	// –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ù–ï –ª–æ–≥–∏—Ä—É–µ–º —Å–∞–º —Ç–æ–∫–µ–Ω!
	operationLogger.Debug("Authentication token generated successfully")

	// –®–ê–ì 8: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
	operationLogger.Info("User registration completed successfully",
		"user_id", newUser.ID,
		"user_name", newUser.Name)
	
	return &RegisterResponse{
		Token:  token,
		UserID: newUser.ID,
		Email:  newUser.Email,
		Name:   newUser.Name,
	}, nil
}

// –ü–†–ò–ù–¶–ò–ü–´, –ö–û–¢–û–†–´–ï –ú–´ –°–û–ë–õ–Æ–î–ê–ï–ú:
// 1. SINGLE RESPONSIBILITY - Use Case –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π
// 2. DEPENDENCY INVERSION - –∑–∞–≤–∏—Å–∏–º –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –∞ –Ω–µ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
// 3. OPEN/CLOSED - –º–æ–∂–µ–º —Ä–∞—Å—à–∏—Ä—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –Ω–µ –∏–∑–º–µ–Ω—è—è –∫–æ–¥
// 4. SEPARATION OF CONCERNS - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–ª–æ—è–º–∏