package mocks

import (
	"clean-url-shortener/internal/usecase/auth"
)

// MockPasswordHasher - –º–æ–∫ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
// üìö –ò–ó–£–ß–ò–¢–¨: Password hashing best practices
// https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
// https://pkg.go.dev/golang.org/x/crypto/bcrypt
type MockPasswordHasher struct {
	HashFunc    func(password string) (string, error)
	CompareFunc func(hashedPassword, password string) error
	
	// –°—á–µ—Ç—á–∏–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
	HashCallCount    int
	CompareCallCount int
	LastHashedPassword string
	LastPlainPassword  string
}

// Hash —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å auth.PasswordHasher
func (m *MockPasswordHasher) Hash(password string) (string, error) {
	m.HashCallCount++
	m.LastPlainPassword = password
	
	if m.HashFunc != nil {
		return m.HashFunc(password)
	}
	
	// –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø—Ä–æ—Å—Ç–æ–µ "—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ" –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	return "hashed_" + password, nil
}

// Compare —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å auth.PasswordHasher
func (m *MockPasswordHasher) Compare(hashedPassword, password string) error {
	m.CompareCallCount++
	m.LastHashedPassword = hashedPassword
	m.LastPlainPassword = password
	
	if m.CompareFunc != nil {
		return m.CompareFunc(hashedPassword, password)
	}
	
	// –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–∞—Ä–æ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –µ—Å–ª–∏ —Ö–µ—à –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "hashed_"
	expectedHash := "hashed_" + password
	if hashedPassword != expectedHash {
		return auth.ErrInvalidCredentials
	}
	
	return nil
}

// Reset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∫–∞
func (m *MockPasswordHasher) Reset() {
	m.HashCallCount = 0
	m.CompareCallCount = 0
	m.LastHashedPassword = ""
	m.LastPlainPassword = ""
	m.HashFunc = nil
	m.CompareFunc = nil
}

// MockTokenGenerator - –º–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤
// üìö –ò–ó–£–ß–ò–¢–¨: JWT —Ç–æ–∫–µ–Ω—ã –∏ –∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
// https://jwt.io/introduction/
// https://auth0.com/blog/a-look-at-the-latest-draft-for-jwt-bcp/
// https://tools.ietf.org/html/rfc7519
type MockTokenGenerator struct {
	GenerateFunc func(userID uint, email string) (string, error)
	ValidateFunc func(token string) (*auth.TokenData, error)
	
	// –°—á–µ—Ç—á–∏–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
	GenerateCallCount int
	ValidateCallCount int
	LastGeneratedUserID uint
	LastGeneratedEmail  string
	LastValidatedToken  string
}

// Generate —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å auth.TokenGenerator
func (m *MockTokenGenerator) Generate(userID uint, email string) (string, error) {
	m.GenerateCallCount++
	m.LastGeneratedUserID = userID
	m.LastGeneratedEmail = email
	
	if m.GenerateFunc != nil {
		return m.GenerateFunc(userID, email)
	}
	
	// –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	return "mock_token_" + email, nil
}

// Validate —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å auth.TokenGenerator
func (m *MockTokenGenerator) Validate(token string) (*auth.TokenData, error) {
	m.ValidateCallCount++
	m.LastValidatedToken = token
	
	if m.ValidateFunc != nil {
		return m.ValidateFunc(token)
	}
	
	// –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	if token == "invalid_token" {
		return nil, auth.ErrInvalidCredentials
	}
	
	return &auth.TokenData{
		UserID: 1,
		Email:  "test@example.com",
	}, nil
}

// Reset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∫–∞
func (m *MockTokenGenerator) Reset() {
	m.GenerateCallCount = 0
	m.ValidateCallCount = 0
	m.LastGeneratedUserID = 0
	m.LastGeneratedEmail = ""
	m.LastValidatedToken = ""
	m.GenerateFunc = nil
	m.ValidateFunc = nil
}

// HELPER FUNCTIONS –¥–ª—è —Ç–µ—Å—Ç–æ–≤

// NewMockPasswordHasherWithError —Å–æ–∑–¥–∞–µ—Ç –º–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É
func NewMockPasswordHasherWithError(err error) *MockPasswordHasher {
	return &MockPasswordHasher{
		HashFunc: func(password string) (string, error) {
			return "", err
		},
		CompareFunc: func(hashedPassword, password string) error {
			return err
		},
	}
}

// NewMockTokenGeneratorWithError —Å–æ–∑–¥–∞–µ—Ç –º–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É
func NewMockTokenGeneratorWithError(err error) *MockTokenGenerator {
	return &MockTokenGenerator{
		GenerateFunc: func(userID uint, email string) (string, error) {
			return "", err
		},
		ValidateFunc: func(token string) (*auth.TokenData, error) {
			return nil, err
		},
	}
}