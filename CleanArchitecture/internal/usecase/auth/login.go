package auth

import (
	"context"
	"errors"
	"time"
	"clean-url-shortener/internal/domain/user"
	"clean-url-shortener/pkg/logger"
)

// LoginRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
type LoginRequest struct {
	Email    string `json:"email" validate:"required,email"`
	Password string `json:"password" validate:"required"`
}

// LoginResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
type LoginResponse struct {
	Token  string `json:"token"`
	UserID uint   `json:"user_id"`
	Email  string `json:"email"`
	Name   string `json:"name"`
}

// –û—à–∏–±–∫–∏ –¥–ª—è –ª–æ–≥–∏–Ω–∞
var (
	ErrInvalidCredentials = errors.New("invalid email or password")
	ErrUserNotFound      = errors.New("user not found")
)

// LoginUseCase —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// üìö –ò–ó–£–ß–ò–¢–¨: Logging –≤ Use Cases
// https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html
// 
// –ü–†–ò–ù–¶–ò–ü–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –í USE CASES:
// 1. –õ–æ–≥–∏—Ä—É–µ–º –ë–ò–ó–ù–ï–°-–°–û–ë–´–¢–ò–Ø, –∞ –Ω–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
// 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
// 3. –ù–ï –ª–æ–≥–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–∞—Ä–æ–ª–∏, —Ç–æ–∫–µ–Ω—ã)
// 4. –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –æ–ø–µ—Ä–∞—Ü–∏–π
// 5. –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
type LoginUseCase struct {
	userRepo       user.Repository
	passwordHasher PasswordHasher
	tokenGenerator TokenGenerator
	logger         logger.Logger  // ‚Üê –î–û–ë–ê–í–ò–õ–ò –ª–æ–≥–≥–µ—Ä
}

// NewLoginUseCase —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Use Case –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
func NewLoginUseCase(
	userRepo user.Repository,
	passwordHasher PasswordHasher,
	tokenGenerator TokenGenerator,
	logger logger.Logger,  // ‚Üê –î–û–ë–ê–í–ò–õ–ò –ø–∞—Ä–∞–º–µ—Ç—Ä –ª–æ–≥–≥–µ—Ä–∞
) *LoginUseCase {
	return &LoginUseCase{
		userRepo:       userRepo,
		passwordHasher: passwordHasher,
		tokenGenerator: tokenGenerator,
		logger:         logger.UseCaseLogger(), // ‚Üê –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è Use Case —Å–ª–æ—è
	}
}

// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (uc *LoginUseCase) Execute(ctx context.Context, req LoginRequest) (*LoginResponse, error) {
	// –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
	// üìö –ò–ó–£–ß–ò–¢–¨: Structured logging best practices
	// https://betterstack.com/community/guides/logging/logging-in-go/
	operationLogger := uc.logger.WithContext(ctx).With(
		"operation", "user_login",
		"email", logger.SafeEmail(req.Email), // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º email
		// –í–ê–ñ–ù–û: –ù–ï –ª–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å! –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	)
	
	// –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
	startTime := time.Now()
	defer func() {
		duration := time.Since(startTime)
		operationLogger.Debug("Login operation completed", 
			"duration_ms", duration.Milliseconds())
	}()
	
	operationLogger.Info("Login attempt started")
	
	// –®–ê–ì 1: –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
	operationLogger.Debug("Looking up user by email")
	existingUser, err := uc.userRepo.FindByEmail(ctx, req.Email)
	if err != nil {
		operationLogger.Error("Failed to find user by email", 
			"error", err,
			"step", "user_lookup")
		return nil, err
	}
	
	if existingUser == nil {
		// –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		// –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
		operationLogger.Warn("Login attempt for non-existent user",
			"step", "user_lookup")
		return nil, ErrUserNotFound
	}
	
	operationLogger.Debug("User found", "user_id", existingUser.ID)

	// –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
	operationLogger.Debug("Verifying password")
	err = uc.passwordHasher.Compare(existingUser.HashedPassword, req.Password)
	if err != nil {
		// –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞
		// –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π
		operationLogger.Warn("Invalid password provided",
			"user_id", existingUser.ID,
			"step", "password_verification")
		
		// –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ (email –∏–ª–∏ –ø–∞—Ä–æ–ª—å)
		// –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		return nil, ErrInvalidCredentials
	}
	
	operationLogger.Debug("Password verified successfully")

	// –®–ê–ì 3: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
	operationLogger.Debug("Generating authentication token")
	token, err := uc.tokenGenerator.Generate(existingUser.ID, existingUser.Email)
	if err != nil {
		operationLogger.Error("Failed to generate authentication token",
			"error", err,
			"user_id", existingUser.ID,
			"step", "token_generation")
		return nil, err
	}
	
	// –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ù–ï –ª–æ–≥–∏—Ä—É–µ–º —Å–∞–º —Ç–æ–∫–µ–Ω!
	operationLogger.Debug("Authentication token generated successfully")

	// –®–ê–ì 4: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	operationLogger.Info("Login successful",
		"user_id", existingUser.ID,
		"user_name", existingUser.Name)
	
	return &LoginResponse{
		Token:  token,
		UserID: existingUser.ID,
		Email:  existingUser.Email,
		Name:   existingUser.Name,
	}, nil
}

// –ü–†–ò–ù–¶–ò–ü–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:
// 1. –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
// 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
// 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ JWT —Ç–æ–∫–µ–Ω—ã
// 4. –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ