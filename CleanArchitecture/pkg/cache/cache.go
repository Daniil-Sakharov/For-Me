package cache

import (
	"context"
	"encoding/json"
	"errors"
	"time"
)

// üìö –ò–ó–£–ß–ò–¢–¨: Caching patterns –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
// https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Strategies.html
// https://redis.io/docs/manual/patterns/
// https://martinfowler.com/bliki/TwoHardThings.html
//
// –û–°–ù–û–í–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø:
// 1. CACHE-ASIDE (Lazy Loading) - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫—ç—à–µ–º
// 2. WRITE-THROUGH - –∑–∞–ø–∏—Å—å –≤ –∫—ç—à –∏ –ë–î –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ  
// 3. WRITE-BEHIND (Write Back) - –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î
// 4. REFRESH-AHEAD - –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
//
// –ü–†–ò–ù–¶–ò–ü–´ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø –í CLEAN ARCHITECTURE:
// 1. –ö—ç—à - —ç—Ç–æ –î–ï–¢–ê–õ–¨ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò (infrastructure)
// 2. –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –ù–ï –î–û–õ–ñ–ù–ê –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∫—ç—à–∞
// 3. –ö—ç—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–†–û–ó–†–ê–ß–ù–´–ú –¥–ª—è Use Cases
// 4. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏

// Cache –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Clean Architecture
// –í–ê–ñ–ù–û: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ pkg/, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–∑–Ω—ã–º–∏ —Å–ª–æ—è–º–∏
type Cache interface {
	// Get –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
	Get(ctx context.Context, key string) ([]byte, error)
	
	// Set —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å TTL (Time To Live)
	Set(ctx context.Context, key string, value []byte, ttl time.Duration) error
	
	// Delete —É–¥–∞–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
	Delete(ctx context.Context, key string) error
	
	// Exists –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
	Exists(ctx context.Context, key string) (bool, error)
	
	// SetNX —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)
	SetNX(ctx context.Context, key string, value []byte, ttl time.Duration) (bool, error)
	
	// Expire —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç TTL –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
	Expire(ctx context.Context, key string, ttl time.Duration) error
	
	// Keys –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –≤ production!)
	Keys(ctx context.Context, pattern string) ([]string, error)
	
	// FlushAll –æ—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤!)
	FlushAll(ctx context.Context) error
}

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –∫—ç—à–∞
var (
	ErrCacheKeyNotFound = errors.New("cache key not found")
	ErrCacheUnavailable = errors.New("cache service unavailable")
	ErrInvalidTTL       = errors.New("invalid TTL value")
)

// –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ö–≠–®–ò–†–£–Æ–©–ò–ô –°–õ–û–ô
// üìö –ò–ó–£–ß–ò–¢–¨: Generic programming –≤ Go
// https://go.dev/doc/tutorial/generics

// TypedCache –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
type TypedCache[T any] struct {
	cache  Cache
	prefix string // –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫–ª—é—á–µ–π (namespace)
}

// NewTypedCache —Å–æ–∑–¥–∞–µ—Ç —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à
func NewTypedCache[T any](cache Cache, prefix string) *TypedCache[T] {
	return &TypedCache[T]{
		cache:  cache,
		prefix: prefix,
	}
}

// Get –ø–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func (tc *TypedCache[T]) Get(ctx context.Context, key string) (*T, error) {
	fullKey := tc.prefix + ":" + key
	
	data, err := tc.cache.Get(ctx, fullKey)
	if err != nil {
		if errors.Is(err, ErrCacheKeyNotFound) {
			return nil, nil // –í–æ–∑–≤—Ä–∞—â–∞–µ–º nil, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
		}
		return nil, err
	}
	
	var value T
	if err := json.Unmarshal(data, &value); err != nil {
		return nil, err
	}
	
	return &value, nil
}

// Set —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func (tc *TypedCache[T]) Set(ctx context.Context, key string, value *T, ttl time.Duration) error {
	fullKey := tc.prefix + ":" + key
	
	data, err := json.Marshal(value)
	if err != nil {
		return err
	}
	
	return tc.cache.Set(ctx, fullKey, data, ttl)
}

// Delete —É–¥–∞–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
func (tc *TypedCache[T]) Delete(ctx context.Context, key string) error {
	fullKey := tc.prefix + ":" + key
	return tc.cache.Delete(ctx, fullKey)
}

// –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ö–≠–®–ò –î–õ–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í –î–ê–ù–ù–´–•

// UserCache –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type UserCache struct {
	*TypedCache[CachedUser]
}

// CachedUser —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
type CachedUser struct {
	ID             uint      `json:"id"`
	Email          string    `json:"email"`
	HashedPassword string    `json:"hashed_password"`
	Name           string    `json:"name"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

// NewUserCache —Å–æ–∑–¥–∞–µ—Ç –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func NewUserCache(cache Cache) *UserCache {
	return &UserCache{
		TypedCache: NewTypedCache[CachedUser](cache, "user"),
	}
}

// GetByEmail –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
func (uc *UserCache) GetByEmail(ctx context.Context, email string) (*CachedUser, error) {
	return uc.Get(ctx, "email:"+email)
}

// SetByEmail —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
func (uc *UserCache) SetByEmail(ctx context.Context, email string, user *CachedUser, ttl time.Duration) error {
	return uc.Set(ctx, "email:"+email, user, ttl)
}

// GetByID –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
func (uc *UserCache) GetByID(ctx context.Context, userID uint) (*CachedUser, error) {
	return uc.Get(ctx, "id:"+string(rune(userID)))
}

// SetByID —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
func (uc *UserCache) SetByID(ctx context.Context, userID uint, user *CachedUser, ttl time.Duration) error {
	return uc.Set(ctx, "id:"+string(rune(userID)), user, ttl)
}

// SessionCache –∫—ç—à –¥–ª—è —Å–µ—Å—Å–∏–π
type SessionCache struct {
	*TypedCache[CachedSession]
}

// CachedSession —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
type CachedSession struct {
	UserID    uint      `json:"user_id"`
	Email     string    `json:"email"`
	ExpiresAt time.Time `json:"expires_at"`
	CreatedAt time.Time `json:"created_at"`
}

// NewSessionCache —Å–æ–∑–¥–∞–µ—Ç –∫—ç—à –¥–ª—è —Å–µ—Å—Å–∏–π
func NewSessionCache(cache Cache) *SessionCache {
	return &SessionCache{
		TypedCache: NewTypedCache[CachedSession](cache, "session"),
	}
}

// GetByToken –ø–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ —Ç–æ–∫–µ–Ω—É
func (sc *SessionCache) GetByToken(ctx context.Context, token string) (*CachedSession, error) {
	// –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –•–µ—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞
	// –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —É—Ç–µ—á–∫—É —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –ª–æ–≥–∏ –∫—ç—à–∞
	hashedToken := hashToken(token)
	return sc.Get(ctx, hashedToken)
}

// SetByToken —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ —Ç–æ–∫–µ–Ω—É
func (sc *SessionCache) SetByToken(ctx context.Context, token string, session *CachedSession, ttl time.Duration) error {
	hashedToken := hashToken(token)
	return sc.Set(ctx, hashedToken, session, ttl)
}

// DeleteByToken —É–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ —Ç–æ–∫–µ–Ω—É
func (sc *SessionCache) DeleteByToken(ctx context.Context, token string) error {
	hashedToken := hashToken(token)
	return sc.Delete(ctx, hashedToken)
}

// UTILITY FUNCTIONS

// hashToken —Ö–µ—à–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –∫—ç—à–∞
func hashToken(token string) string {
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ö–µ—à (SHA256)
	// –ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	hash := 0
	for _, char := range token {
		hash = hash*31 + int(char)
	}
	return string(rune(hash))
}

// –ü–ê–¢–¢–ï–†–ù–´ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø USE CASES

// CachingUserRepository –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
// üìö –ò–ó–£–ß–ò–¢–¨: Decorator Pattern
// https://refactoring.guru/design-patterns/decorator
type CachingUserRepository struct {
	repository UserRepository // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	cache      *UserCache     // –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	ttl        time.Duration  // TTL –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
}

// UserRepository –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
type UserRepository interface {
	FindByEmail(ctx context.Context, email string) (*CachedUser, error)
	FindByID(ctx context.Context, id uint) (*CachedUser, error)
	Save(ctx context.Context, user *CachedUser) error
}

// NewCachingUserRepository —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func NewCachingUserRepository(repo UserRepository, cache *UserCache, ttl time.Duration) *CachingUserRepository {
	return &CachingUserRepository{
		repository: repo,
		cache:      cache,
		ttl:        ttl,
	}
}

// FindByEmail —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Cache-Aside
func (r *CachingUserRepository) FindByEmail(ctx context.Context, email string) (*CachedUser, error) {
	// –®–ê–ì 1: –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –∫—ç—à–µ
	cachedUser, err := r.cache.GetByEmail(ctx, email)
	if err != nil && !errors.Is(err, ErrCacheKeyNotFound) {
		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫—ç—à–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ë–î
		// –í production –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	}
	
	if cachedUser != nil {
		// Cache HIT - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞
		return cachedUser, nil
	}
	
	// Cache MISS - –∏—â–µ–º –≤ –ë–î
	user, err := r.repository.FindByEmail(ctx, email)
	if err != nil {
		return nil, err
	}
	
	if user != nil {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
		if cacheErr := r.cache.SetByEmail(ctx, email, user, r.ttl); cacheErr != nil {
			// –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
			// –í production –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
		}
	}
	
	return user, nil
}

// FindByID —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Cache-Aside
func (r *CachingUserRepository) FindByID(ctx context.Context, id uint) (*CachedUser, error) {
	// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ FindByEmail
	cachedUser, err := r.cache.GetByID(ctx, id)
	if err != nil && !errors.Is(err, ErrCacheKeyNotFound) {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫—ç—à–∞
	}
	
	if cachedUser != nil {
		return cachedUser, nil
	}
	
	user, err := r.repository.FindByID(ctx, id)
	if err != nil {
		return nil, err
	}
	
	if user != nil {
		if cacheErr := r.cache.SetByID(ctx, id, user, r.ttl); cacheErr != nil {
			// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
		}
	}
	
	return user, nil
}

// Save —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Write-Through
func (r *CachingUserRepository) Save(ctx context.Context, user *CachedUser) error {
	// –®–ê–ì 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	err := r.repository.Save(ctx, user)
	if err != nil {
		return err
	}
	
	// –®–ê–ì 2: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ ID –∏ email –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
	if cacheErr := r.cache.SetByID(ctx, user.ID, user, r.ttl); cacheErr != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
	}
	
	if cacheErr := r.cache.SetByEmail(ctx, user.Email, user, r.ttl); cacheErr != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
	}
	
	return nil
}

// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–≠–®–ê

// CacheConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∞
type CacheConfig struct {
	// –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	Enabled bool          `yaml:"enabled" env:"CACHE_ENABLED" default:"true"`
	TTL     time.Duration `yaml:"ttl" env:"CACHE_TTL" default:"5m"`
	
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
	UserTTL    time.Duration `yaml:"user_ttl" env:"CACHE_USER_TTL" default:"10m"`
	SessionTTL time.Duration `yaml:"session_ttl" env:"CACHE_SESSION_TTL" default:"1h"`
	
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
	RedisURL      string `yaml:"redis_url" env:"REDIS_URL"`
	RedisPassword string `yaml:"redis_password" env:"REDIS_PASSWORD"`
	RedisDB       int    `yaml:"redis_db" env:"REDIS_DB" default:"0"`
	
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	MaxRetries    int           `yaml:"max_retries" env:"CACHE_MAX_RETRIES" default:"3"`
	RetryDelay    time.Duration `yaml:"retry_delay" env:"CACHE_RETRY_DELAY" default:"100ms"`
	DialTimeout   time.Duration `yaml:"dial_timeout" env:"CACHE_DIAL_TIMEOUT" default:"5s"`
	ReadTimeout   time.Duration `yaml:"read_timeout" env:"CACHE_READ_TIMEOUT" default:"3s"`
	WriteTimeout  time.Duration `yaml:"write_timeout" env:"CACHE_WRITE_TIMEOUT" default:"3s"`
}

// –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–≠–®–ê

// CacheMetrics –º–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
type CacheMetrics struct {
	Hits   int64 `json:"hits"`   // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à
	Misses int64 `json:"misses"` // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–∞—Ö–æ–≤
	Errors int64 `json:"errors"` // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
}

// HitRatio –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à
func (m *CacheMetrics) HitRatio() float64 {
	total := m.Hits + m.Misses
	if total == 0 {
		return 0
	}
	return float64(m.Hits) / float64(total)
}

// –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–•:

/*
–ü–†–ê–í–ò–õ–¨–ù–û–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞ –≤ Use Cases:

// –í Use Case –ù–ï –î–û–õ–ñ–ù–û –±—ã—Ç—å –ø—Ä—è–º–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—ç—à–∞!
// –ö—ç—à –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω –≤ Repository

type LoginUseCase struct {
    userRepo user.Repository // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å CachingUserRepository
    // ... –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
}

func (uc *LoginUseCase) Execute(ctx context.Context, req LoginRequest) (*LoginResponse, error) {
    // Use Case –Ω–µ –∑–Ω–∞–µ—Ç –æ –∫—ç—à–µ!
    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ –≤ Repository
    user, err := uc.userRepo.FindByEmail(ctx, req.Email)
    if err != nil {
        return nil, err
    }
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
}

// –í DI Container:
func (c *Container) initRepositories() error {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    baseUserRepo := database.NewUserRepository(c.DB)
    
    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –∫—ç—à–∏—Ä—É—é—â–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
    userCache := cache.NewUserCache(c.Cache)
    c.UserRepo = cache.NewCachingUserRepository(baseUserRepo, userCache, 10*time.Minute)
    
    return nil
}

// –î–ª—è —Å–µ—Å—Å–∏–π:
type AuthMiddleware struct {
    sessionCache *cache.SessionCache
    tokenValidator TokenValidator
}

func (m *AuthMiddleware) ValidateToken(ctx context.Context, token string) (*Session, error) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫—ç—à–µ —Å–µ—Å—Å–∏–π
    session, err := m.sessionCache.GetByToken(ctx, token)
    if err == nil && session != nil {
        return session, nil
    }
    
    // –ï—Å–ª–∏ –Ω–µ –≤ –∫—ç—à–µ, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    validatedSession, err := m.tokenValidator.Validate(token)
    if err != nil {
        return nil, err
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    m.sessionCache.SetByToken(ctx, token, validatedSession, time.Hour)
    
    return validatedSession, nil
}
*/

// –í–ê–ñ–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
// 1. –ö—ç—à –ù–ï –î–û–õ–ñ–ï–ù –≤–ª–∏—è—Ç—å –Ω–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
// 2. –û—à–∏–±–∫–∏ –∫—ç—à–∞ –ù–ï –î–û–õ–ñ–ù–´ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
// 3. –ö—ç—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º –¥–ª—è Use Cases
// 4. –í—Å–µ–≥–¥–∞ –∏–º–µ–π—Ç–µ fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
// 5. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ hit ratio –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞