package ratelimit

import (
	"context"
	"errors"
	"fmt"
	"time"
)

// üìö –ò–ó–£–ß–ò–¢–¨: Rate Limiting –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
// https://en.wikipedia.org/wiki/Rate_limiting
// https://blog.cloudflare.com/counting-things-a-lot-of-different-things/
// https://stripe.com/blog/rate-limiters
// https://konghq.com/blog/how-to-design-a-scalable-rate-limiting-algorithm
//
// –û–°–ù–û–í–ù–´–ï –ê–õ–ì–û–†–ò–¢–ú–´ RATE LIMITING:
// 1. TOKEN BUCKET - —Ç–æ–∫–µ–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
// 2. LEAKY BUCKET - –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
// 3. FIXED WINDOW - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
// 4. SLIDING WINDOW - —Å–∫–æ–ª—å–∑—è—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
// 5. SLIDING WINDOW LOG - —Ç–æ—á–Ω–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ —Å –ª–æ–≥–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤
//
// –ó–ê–ß–ï–ú –ù–£–ñ–ï–ù RATE LIMITING:
// 1. –ó–ê–©–ò–¢–ê –û–¢ DDoS –∞—Ç–∞–∫
// 2. –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–ï –ó–õ–û–£–ü–û–¢–†–ï–ë–õ–ï–ù–ò–ô API
// 3. –û–ë–ï–°–ü–ï–ß–ï–ù–ò–ï –°–ü–†–ê–í–ï–î–õ–ò–í–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –†–ï–°–£–†–°–û–í
// 4. –ó–ê–©–ò–¢–ê –û–¢ BRUTE FORCE –∞—Ç–∞–∫
// 5. –ö–û–ù–¢–†–û–õ–¨ –ù–ê–ì–†–£–ó–ö–ò –ù–ê –°–ò–°–¢–ï–ú–£

// RateLimiter –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è rate limiting
type RateLimiter interface {
	// Allow –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
	Allow(ctx context.Context, key string) (*Result, error)
	
	// Reset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –∫–ª—é—á–∞
	Reset(ctx context.Context, key string) error
	
	// GetInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
	GetInfo(ctx context.Context, key string) (*Info, error)
}

// Result —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limit
type Result struct {
	// Allowed —É–∫–∞–∑—ã–≤–∞–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
	Allowed bool
	
	// Limit –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
	Limit int64
	
	// Remaining –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
	Remaining int64
	
	// ResetTime –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞
	ResetTime time.Time
	
	// RetryAfter —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ Allowed = false)
	RetryAfter time.Duration
}

// Info –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ rate limiter
type Info struct {
	// Key –∫–ª—é—á –ª–∏–º–∏—Ç–∞
	Key string
	
	// Limit –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
	Limit int64
	
	// Used –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	Used int64
	
	// Remaining –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
	Remaining int64
	
	// ResetTime –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞
	ResetTime time.Time
	
	// WindowSize —Ä–∞–∑–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
	WindowSize time.Duration
}

// Config –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è rate limiter
type Config struct {
	// Limit –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
	Limit int64
	
	// Window –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
	Window time.Duration
	
	// KeyPrefix –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫–ª—é—á–µ–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	KeyPrefix string
}

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
var (
	ErrRateLimitExceeded = errors.New("rate limit exceeded")
	ErrInvalidConfig     = errors.New("invalid rate limiter configuration")
	ErrStorageUnavailable = errors.New("rate limiter storage unavailable")
)

// –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø FIXED WINDOW RATE LIMITER
// üìö –ò–ó–£–ß–ò–¢–¨: Fixed Window Counter
// https://en.wikipedia.org/wiki/Rate_limiting#Fixed_window_counter

// FixedWindowLimiter —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Fixed Window –∞–ª–≥–æ—Ä–∏—Ç–º–∞
type FixedWindowLimiter struct {
	storage Storage
	config  Config
}

// Storage –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
type Storage interface {
	// Increment —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	Increment(ctx context.Context, key string, expiry time.Duration) (int64, error)
	
	// Get –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
	Get(ctx context.Context, key string) (int64, error)
	
	// Set —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
	Set(ctx context.Context, key string, value int64, expiry time.Duration) error
	
	// Delete —É–¥–∞–ª—è–µ—Ç –∫–ª—é—á
	Delete(ctx context.Context, key string) error
	
	// TTL –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞
	TTL(ctx context.Context, key string) (time.Duration, error)
}

// NewFixedWindowLimiter —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Fixed Window rate limiter
func NewFixedWindowLimiter(storage Storage, config Config) (*FixedWindowLimiter, error) {
	if err := validateConfig(config); err != nil {
		return nil, err
	}
	
	return &FixedWindowLimiter{
		storage: storage,
		config:  config,
	}, nil
}

// Allow –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
func (rl *FixedWindowLimiter) Allow(ctx context.Context, key string) (*Result, error) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª—é—á —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫–Ω–æ–º
	windowKey := rl.createWindowKey(key, time.Now())
	
	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
	count, err := rl.storage.Increment(ctx, windowKey, rl.config.Window)
	if err != nil {
		return nil, fmt.Errorf("failed to increment counter: %w", err)
	}
	
	// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ (–Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–∫–Ω–∞)
	resetTime := rl.getNextWindowStart(time.Now())
	
	result := &Result{
		Allowed:   count <= rl.config.Limit,
		Limit:     rl.config.Limit,
		Remaining: max(0, rl.config.Limit-count),
		ResetTime: resetTime,
	}
	
	if !result.Allowed {
		result.RetryAfter = time.Until(resetTime)
	}
	
	return result, nil
}

// Reset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –∫–ª—é—á–∞
func (rl *FixedWindowLimiter) Reset(ctx context.Context, key string) error {
	windowKey := rl.createWindowKey(key, time.Now())
	return rl.storage.Delete(ctx, windowKey)
}

// GetInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ
func (rl *FixedWindowLimiter) GetInfo(ctx context.Context, key string) (*Info, error) {
	windowKey := rl.createWindowKey(key, time.Now())
	
	used, err := rl.storage.Get(ctx, windowKey)
	if err != nil {
		return nil, err
	}
	
	return &Info{
		Key:        key,
		Limit:      rl.config.Limit,
		Used:       used,
		Remaining:  max(0, rl.config.Limit-used),
		ResetTime:  rl.getNextWindowStart(time.Now()),
		WindowSize: rl.config.Window,
	}, nil
}

// createWindowKey —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
func (rl *FixedWindowLimiter) createWindowKey(key string, now time.Time) string {
	windowStart := rl.getWindowStart(now)
	return fmt.Sprintf("%s:%s:%d", rl.config.KeyPrefix, key, windowStart.Unix())
}

// getWindowStart –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
func (rl *FixedWindowLimiter) getWindowStart(now time.Time) time.Time {
	windowSeconds := int64(rl.config.Window.Seconds())
	return time.Unix((now.Unix()/windowSeconds)*windowSeconds, 0)
}

// getNextWindowStart –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
func (rl *FixedWindowLimiter) getNextWindowStart(now time.Time) time.Time {
	return rl.getWindowStart(now).Add(rl.config.Window)
}

// –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø SLIDING WINDOW RATE LIMITER
// üìö –ò–ó–£–ß–ò–¢–¨: Sliding Window Log
// https://konghq.com/blog/how-to-design-a-scalable-rate-limiting-algorithm

// SlidingWindowLimiter —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Sliding Window –∞–ª–≥–æ—Ä–∏—Ç–º–∞
type SlidingWindowLimiter struct {
	storage Storage
	config  Config
}

// NewSlidingWindowLimiter —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Sliding Window rate limiter
func NewSlidingWindowLimiter(storage Storage, config Config) (*SlidingWindowLimiter, error) {
	if err := validateConfig(config); err != nil {
		return nil, err
	}
	
	return &SlidingWindowLimiter{
		storage: storage,
		config:  config,
	}, nil
}

// Allow –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
func (rl *SlidingWindowLimiter) Allow(ctx context.Context, key string) (*Result, error) {
	now := time.Now()
	
	// –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ –æ–∫–Ω–∞: —Ç–µ–∫—É—â–µ–µ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
	currentWindowKey := rl.createWindowKey(key, now)
	previousWindowKey := rl.createWindowKey(key, now.Add(-rl.config.Window))
	
	// –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–æ–∏—Ö –æ–∫–æ–Ω
	currentCount, err := rl.storage.Get(ctx, currentWindowKey)
	if err != nil {
		return nil, err
	}
	
	previousCount, err := rl.storage.Get(ctx, previousWindowKey)
	if err != nil {
		return nil, err
	}
	
	// –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–∫–Ω–∞
	windowStart := rl.getWindowStart(now)
	elapsedInWindow := now.Sub(windowStart)
	weightOfPreviousWindow := float64(rl.config.Window-elapsedInWindow) / float64(rl.config.Window)
	
	// –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–∫–æ–ª—å–∑—è—â–µ–º –æ–∫–Ω–µ
	estimatedCount := int64(float64(previousCount)*weightOfPreviousWindow) + currentCount
	
	allowed := estimatedCount < rl.config.Limit
	
	if allowed {
		// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
		currentCount, err = rl.storage.Increment(ctx, currentWindowKey, rl.config.Window)
		if err != nil {
			return nil, err
		}
		
		// –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
		estimatedCount = int64(float64(previousCount)*weightOfPreviousWindow) + currentCount
	}
	
	resetTime := rl.getNextWindowStart(now)
	
	result := &Result{
		Allowed:   allowed,
		Limit:     rl.config.Limit,
		Remaining: max(0, rl.config.Limit-estimatedCount),
		ResetTime: resetTime,
	}
	
	if !result.Allowed {
		result.RetryAfter = time.Until(resetTime)
	}
	
	return result, nil
}

// Reset –∏ GetInfo –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã FixedWindowLimiter
func (rl *SlidingWindowLimiter) Reset(ctx context.Context, key string) error {
	currentWindowKey := rl.createWindowKey(key, time.Now())
	previousWindowKey := rl.createWindowKey(key, time.Now().Add(-rl.config.Window))
	
	_ = rl.storage.Delete(ctx, currentWindowKey)
	_ = rl.storage.Delete(ctx, previousWindowKey)
	
	return nil
}

func (rl *SlidingWindowLimiter) GetInfo(ctx context.Context, key string) (*Info, error) {
	// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ Allow, –Ω–æ –±–µ–∑ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
	now := time.Now()
	currentWindowKey := rl.createWindowKey(key, now)
	previousWindowKey := rl.createWindowKey(key, now.Add(-rl.config.Window))
	
	currentCount, _ := rl.storage.Get(ctx, currentWindowKey)
	previousCount, _ := rl.storage.Get(ctx, previousWindowKey)
	
	windowStart := rl.getWindowStart(now)
	elapsedInWindow := now.Sub(windowStart)
	weightOfPreviousWindow := float64(rl.config.Window-elapsedInWindow) / float64(rl.config.Window)
	
	estimatedCount := int64(float64(previousCount)*weightOfPreviousWindow) + currentCount
	
	return &Info{
		Key:        key,
		Limit:      rl.config.Limit,
		Used:       estimatedCount,
		Remaining:  max(0, rl.config.Limit-estimatedCount),
		ResetTime:  rl.getNextWindowStart(now),
		WindowSize: rl.config.Window,
	}, nil
}

func (rl *SlidingWindowLimiter) createWindowKey(key string, now time.Time) string {
	windowStart := rl.getWindowStart(now)
	return fmt.Sprintf("%s:%s:%d", rl.config.KeyPrefix, key, windowStart.Unix())
}

func (rl *SlidingWindowLimiter) getWindowStart(now time.Time) time.Time {
	windowSeconds := int64(rl.config.Window.Seconds())
	return time.Unix((now.Unix()/windowSeconds)*windowSeconds, 0)
}

func (rl *SlidingWindowLimiter) getNextWindowStart(now time.Time) time.Time {
	return rl.getWindowStart(now).Add(rl.config.Window)
}

// –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–´–ô RATE LIMITER
// üìö –ò–ó–£–ß–ò–¢–¨: Hierarchical Rate Limiting
// https://stripe.com/blog/rate-limiters

// MultiLevelLimiter –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π rate limiter
type MultiLevelLimiter struct {
	limiters []RateLimiter
}

// NewMultiLevelLimiter —Å–æ–∑–¥–∞–µ—Ç –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π rate limiter
func NewMultiLevelLimiter(limiters ...RateLimiter) *MultiLevelLimiter {
	return &MultiLevelLimiter{
		limiters: limiters,
	}
}

// Allow –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –ª–∏–º–∏—Ç–æ–≤
func (ml *MultiLevelLimiter) Allow(ctx context.Context, key string) (*Result, error) {
	var strictestResult *Result
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏–º–∏—Ç—ã
	for _, limiter := range ml.limiters {
		result, err := limiter.Allow(ctx, key)
		if err != nil {
			return nil, err
		}
		
		// –ï—Å–ª–∏ –ª—é–±–æ–π –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω, –∑–∞–ø—Ä–æ—Å –∑–∞–ø—Ä–µ—â–µ–Ω
		if !result.Allowed {
			return result, nil
		}
		
		// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–∞–º—ã–π —Å—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç
		if strictestResult == nil || result.Remaining < strictestResult.Remaining {
			strictestResult = result
		}
	}
	
	return strictestResult, nil
}

// Reset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –ª–∏–º–∏—Ç—ã
func (ml *MultiLevelLimiter) Reset(ctx context.Context, key string) error {
	for _, limiter := range ml.limiters {
		if err := limiter.Reset(ctx, key); err != nil {
			return err
		}
	}
	return nil
}

// GetInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–º —Å—Ç—Ä–æ–≥–æ–º –ª–∏–º–∏—Ç–µ
func (ml *MultiLevelLimiter) GetInfo(ctx context.Context, key string) (*Info, error) {
	var strictestInfo *Info
	
	for _, limiter := range ml.limiters {
		info, err := limiter.GetInfo(ctx, key)
		if err != nil {
			return nil, err
		}
		
		if strictestInfo == nil || info.Remaining < strictestInfo.Remaining {
			strictestInfo = info
		}
	}
	
	return strictestInfo, nil
}

// –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï RATE LIMITERS

// LoginRateLimiter —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç–µ—Ä –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
type LoginRateLimiter struct {
	ipLimiter    RateLimiter // –õ–∏–º–∏—Ç –ø–æ IP
	userLimiter  RateLimiter // –õ–∏–º–∏—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	globalLimiter RateLimiter // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
}

// NewLoginRateLimiter —Å–æ–∑–¥–∞–µ—Ç –ª–∏–º–∏—Ç–µ—Ä –¥–ª—è –ª–æ–≥–∏–Ω–∞
func NewLoginRateLimiter(storage Storage) *LoginRateLimiter {
	return &LoginRateLimiter{
		ipLimiter: &FixedWindowLimiter{
			storage: storage,
			config: Config{
				Limit:     10,           // 10 –ø–æ–ø—ã—Ç–æ–∫
				Window:    time.Minute,  // –∑–∞ –º–∏–Ω—É—Ç—É
				KeyPrefix: "login_ip",
			},
		},
		userLimiter: &FixedWindowLimiter{
			storage: storage,
			config: Config{
				Limit:     5,            // 5 –ø–æ–ø—ã—Ç–æ–∫
				Window:    time.Minute,  // –∑–∞ –º–∏–Ω—É—Ç—É
				KeyPrefix: "login_user",
			},
		},
		globalLimiter: &FixedWindowLimiter{
			storage: storage,
			config: Config{
				Limit:     1000,         // 1000 –ø–æ–ø—ã—Ç–æ–∫
				Window:    time.Minute,  // –∑–∞ –º–∏–Ω—É—Ç—É
				KeyPrefix: "login_global",
			},
		},
	}
}

// CheckLogin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞
func (lr *LoginRateLimiter) CheckLogin(ctx context.Context, ip, userID string) (*Result, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ IP
	ipResult, err := lr.ipLimiter.Allow(ctx, ip)
	if err != nil {
		return nil, err
	}
	if !ipResult.Allowed {
		return ipResult, nil
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if userID != "" {
		userResult, err := lr.userLimiter.Allow(ctx, userID)
		if err != nil {
			return nil, err
		}
		if !userResult.Allowed {
			return userResult, nil
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
	globalResult, err := lr.globalLimiter.Allow(ctx, "global")
	if err != nil {
		return nil, err
	}
	
	return globalResult, nil
}

// UTILITY FUNCTIONS

// validateConfig –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func validateConfig(config Config) error {
	if config.Limit <= 0 {
		return ErrInvalidConfig
	}
	if config.Window <= 0 {
		return ErrInvalidConfig
	}
	return nil
}

// max –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func max(a, b int64) int64 {
	if a > b {
		return a
	}
	return b
}

// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –î–õ–Ø –†–ê–ó–ù–´–• –°–õ–£–ß–ê–ï–í –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø

// GetAPIRateLimitConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è API endpoints
func GetAPIRateLimitConfig() Config {
	return Config{
		Limit:     100,          // 100 –∑–∞–ø—Ä–æ—Å–æ–≤
		Window:    time.Minute,  // –∑–∞ –º–∏–Ω—É—Ç—É
		KeyPrefix: "api",
	}
}

// GetAuthRateLimitConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
func GetAuthRateLimitConfig() Config {
	return Config{
		Limit:     5,            // 5 –ø–æ–ø—ã—Ç–æ–∫
		Window:    time.Minute,  // –∑–∞ –º–∏–Ω—É—Ç—É
		KeyPrefix: "auth",
	}
}

// GetRegistrationRateLimitConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func GetRegistrationRateLimitConfig() Config {
	return Config{
		Limit:     3,             // 3 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		Window:    time.Hour,     // –∑–∞ —á–∞—Å
		KeyPrefix: "registration",
	}
}

// –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:

/*
// –í middleware:
func RateLimitMiddleware(limiter ratelimit.RateLimiter) func(http.Handler) http.Handler {
    return func(next http.Handler) http.Handler {
        return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
            key := getClientKey(r) // IP –∏–ª–∏ user ID
            
            result, err := limiter.Allow(r.Context(), key)
            if err != nil {
                http.Error(w, "Rate limiter error", http.StatusInternalServerError)
                return
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–∞—Ö
            w.Header().Set("X-RateLimit-Limit", strconv.FormatInt(result.Limit, 10))
            w.Header().Set("X-RateLimit-Remaining", strconv.FormatInt(result.Remaining, 10))
            w.Header().Set("X-RateLimit-Reset", strconv.FormatInt(result.ResetTime.Unix(), 10))
            
            if !result.Allowed {
                w.Header().Set("Retry-After", strconv.FormatInt(int64(result.RetryAfter.Seconds()), 10))
                http.Error(w, "Rate limit exceeded", http.StatusTooManyRequests)
                return
            }
            
            next.ServeHTTP(w, r)
        })
    }
}

// –í Use Case:
type LoginUseCase struct {
    rateLimiter *ratelimit.LoginRateLimiter
    // ... –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
}

func (uc *LoginUseCase) Execute(ctx context.Context, req LoginRequest, clientIP string) (*LoginResponse, error) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –≤—Ö–æ–¥–∞
    result, err := uc.rateLimiter.CheckLogin(ctx, clientIP, req.Email)
    if err != nil {
        return nil, err
    }
    
    if !result.Allowed {
        return nil, ratelimit.ErrRateLimitExceeded
    }
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–≥–∏–∫–æ–π –≤—Ö–æ–¥–∞...
}

// –í DI Container:
func (c *Container) initRateLimiters() error {
    storage := redis.NewRedisStorage(c.Redis) // –∏–ª–∏ memory storage
    
    // API rate limiter
    c.APIRateLimiter = ratelimit.NewFixedWindowLimiter(storage, ratelimit.GetAPIRateLimitConfig())
    
    // Login rate limiter
    c.LoginRateLimiter = ratelimit.NewLoginRateLimiter(storage)
    
    return nil
}
*/

// –í–ê–ñ–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
// 1. –í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –≤–∞—à–µ–≥–æ —Å–ª—É—á–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
// 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
// 3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö —á–µ—Ä–µ–∑ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏
// 4. –õ–æ–≥–∏—Ä—É–π—Ç–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
// 5. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ whitelist –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
// 6. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ rate limiting –≤ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
// 7. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å rate limiter'–∞