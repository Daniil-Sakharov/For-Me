package health

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"net/http"
	"sync"
	"time"
)

// üìö –ò–ó–£–ß–ò–¢–¨: Health Check patterns
// https://microservices.io/patterns/observability/health-check-api.html
// https://tools.ietf.org/id/draft-inadarei-api-health-check-06.html
// https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
//
// –¢–ò–ü–´ HEALTH CHECKS:
// 1. LIVENESS - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
// 2. READINESS - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç—Ä–∞—Ñ–∏–∫
// 3. STARTUP - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
//
// –ö–û–ú–ü–û–ù–ï–ù–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
// 1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
// 2. –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã (Redis, –æ—á–µ—Ä–µ–¥–∏)
// 3. –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
// 4. –°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
// 5. –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

// Status —Å—Ç–∞—Ç—É—Å health check
type Status string

const (
	StatusPass Status = "pass" // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
	StatusFail Status = "fail" // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
	StatusWarn Status = "warn" // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
)

// CheckResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
type CheckResult struct {
	// Status —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
	Status Status `json:"status"`
	
	// ComponentName –∏–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
	ComponentName string `json:"componentName,omitempty"`
	
	// ComponentType —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (database, cache, external-service)
	ComponentType string `json:"componentType,omitempty"`
	
	// Time –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	Time time.Time `json:"time"`
	
	// Duration –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	Duration time.Duration `json:"duration,omitempty"`
	
	// Output –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	Output string `json:"output,omitempty"`
	
	// Error —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
	Error string `json:"error,omitempty"`
	
	// Links –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏
	Links map[string]string `json:"links,omitempty"`
	
	// Metrics –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
	Metrics map[string]interface{} `json:"metrics,omitempty"`
}

// HealthResponse –æ—Ç–≤–µ—Ç health check API
type HealthResponse struct {
	// Status –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	Status Status `json:"status"`
	
	// Version –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	Version string `json:"version,omitempty"`
	
	// ReleaseID ID —Ä–µ–ª–∏–∑–∞
	ReleaseID string `json:"releaseId,omitempty"`
	
	// Notes –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
	Notes []string `json:"notes,omitempty"`
	
	// Output –æ–±—â–∏–π –≤—ã–≤–æ–¥
	Output string `json:"output,omitempty"`
	
	// ServiceID –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞
	ServiceID string `json:"serviceId,omitempty"`
	
	// Description –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
	Description string `json:"description,omitempty"`
	
	// Checks —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	Checks map[string]CheckResult `json:"checks,omitempty"`
	
	// Links –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏
	Links map[string]string `json:"links,omitempty"`
	
	// Time –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	Time time.Time `json:"time"`
	
	// Duration –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	Duration time.Duration `json:"duration,omitempty"`
}

// Checker –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
type Checker interface {
	// Check –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
	Check(ctx context.Context) CheckResult
	
	// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	Name() string
	
	// Type –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
	Type() string
}

// CheckerFunc —Ñ—É–Ω–∫—Ü–∏—è-–∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
type CheckerFunc func(ctx context.Context) CheckResult

// Check —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Checker
func (f CheckerFunc) Check(ctx context.Context) CheckResult {
	return f(ctx)
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func (f CheckerFunc) Name() string {
	return "anonymous"
}

// Type –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func (f CheckerFunc) Type() string {
	return "component"
}

// HealthChecker –æ—Å–Ω–æ–≤–Ω–æ–π health checker
type HealthChecker struct {
	checkers    map[string]Checker
	mu          sync.RWMutex
	config      Config
	version     string
	releaseID   string
	serviceID   string
	description string
}

// Config –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è health checker
type Config struct {
	// Timeout –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
	Timeout time.Duration `yaml:"timeout" env:"HEALTH_CHECK_TIMEOUT" default:"30s"`
	
	// CheckTimeout –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
	CheckTimeout time.Duration `yaml:"check_timeout" env:"HEALTH_CHECK_ITEM_TIMEOUT" default:"5s"`
	
	// FailFast –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
	FailFast bool `yaml:"fail_fast" env:"HEALTH_CHECK_FAIL_FAST" default:"false"`
	
	// Parallel –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	Parallel bool `yaml:"parallel" env:"HEALTH_CHECK_PARALLEL" default:"true"`
}

// NewHealthChecker —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π health checker
func NewHealthChecker(config Config) *HealthChecker {
	return &HealthChecker{
		checkers: make(map[string]Checker),
		config:   config,
	}
}

// SetInfo —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
func (hc *HealthChecker) SetInfo(version, releaseID, serviceID, description string) {
	hc.version = version
	hc.releaseID = releaseID
	hc.serviceID = serviceID
	hc.description = description
}

// Register —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
func (hc *HealthChecker) Register(name string, checker Checker) {
	hc.mu.Lock()
	defer hc.mu.Unlock()
	hc.checkers[name] = checker
}

// RegisterFunc —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫—É
func (hc *HealthChecker) RegisterFunc(name, componentType string, checkFunc func(ctx context.Context) CheckResult) {
	checker := &namedChecker{
		name:         name,
		componentType: componentType,
		checkFunc:    checkFunc,
	}
	hc.Register(name, checker)
}

// Unregister —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É
func (hc *HealthChecker) Unregister(name string) {
	hc.mu.Lock()
	defer hc.mu.Unlock()
	delete(hc.checkers, name)
}

// Check –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
func (hc *HealthChecker) Check(ctx context.Context) HealthResponse {
	start := time.Now()
	
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	checkCtx, cancel := context.WithTimeout(ctx, hc.config.Timeout)
	defer cancel()
	
	hc.mu.RLock()
	checkers := make(map[string]Checker, len(hc.checkers))
	for name, checker := range hc.checkers {
		checkers[name] = checker
	}
	hc.mu.RUnlock()
	
	var checks map[string]CheckResult
	
	if hc.config.Parallel {
		checks = hc.runChecksParallel(checkCtx, checkers)
	} else {
		checks = hc.runChecksSequential(checkCtx, checkers)
	}
	
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
	overallStatus := hc.calculateOverallStatus(checks)
	
	response := HealthResponse{
		Status:      overallStatus,
		Version:     hc.version,
		ReleaseID:   hc.releaseID,
		ServiceID:   hc.serviceID,
		Description: hc.description,
		Checks:      checks,
		Time:        start,
		Duration:    time.Since(start),
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏
	response.Links = map[string]string{
		"self": "/health",
	}
	
	return response
}

// runChecksParallel –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
func (hc *HealthChecker) runChecksParallel(ctx context.Context, checkers map[string]Checker) map[string]CheckResult {
	results := make(map[string]CheckResult)
	resultsMu := sync.Mutex{}
	
	var wg sync.WaitGroup
	
	for name, checker := range checkers {
		wg.Add(1)
		go func(name string, checker Checker) {
			defer wg.Done()
			
			// –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
			checkCtx, cancel := context.WithTimeout(ctx, hc.config.CheckTimeout)
			defer cancel()
			
			result := hc.runSingleCheck(checkCtx, checker)
			
			resultsMu.Lock()
			results[name] = result
			resultsMu.Unlock()
			
			// –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω FailFast –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å
			if hc.config.FailFast && result.Status == StatusFail {
				// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
			}
		}(name, checker)
	}
	
	wg.Wait()
	return results
}

// runChecksSequential –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
func (hc *HealthChecker) runChecksSequential(ctx context.Context, checkers map[string]Checker) map[string]CheckResult {
	results := make(map[string]CheckResult)
	
	for name, checker := range checkers {
		// –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
		checkCtx, cancel := context.WithTimeout(ctx, hc.config.CheckTimeout)
		
		result := hc.runSingleCheck(checkCtx, checker)
		results[name] = result
		
		cancel()
		
		// –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω FailFast –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å
		if hc.config.FailFast && result.Status == StatusFail {
			break
		}
	}
	
	return results
}

// runSingleCheck –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–∞–Ω–∏–∫–∏
func (hc *HealthChecker) runSingleCheck(ctx context.Context, checker Checker) CheckResult {
	start := time.Now()
	
	defer func() {
		if r := recover(); r != nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–Ω–∏–∫–∏ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ
		}
	}()
	
	result := checker.Check(ctx)
	result.Duration = time.Since(start)
	result.Time = start
	
	if result.ComponentName == "" {
		result.ComponentName = checker.Name()
	}
	if result.ComponentType == "" {
		result.ComponentType = checker.Type()
	}
	
	return result
}

// calculateOverallStatus –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
func (hc *HealthChecker) calculateOverallStatus(checks map[string]CheckResult) Status {
	if len(checks) == 0 {
		return StatusPass
	}
	
	hasWarnings := false
	
	for _, check := range checks {
		switch check.Status {
		case StatusFail:
			return StatusFail // –õ—é–±–∞—è –Ω–µ—É–¥–∞—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ = –æ–±—â–∏–π fail
		case StatusWarn:
			hasWarnings = true
		}
	}
	
	if hasWarnings {
		return StatusWarn
	}
	
	return StatusPass
}

// –ü–†–ï–î–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –ü–†–û–í–ï–†–ö–ò

// DatabaseChecker –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
type DatabaseChecker struct {
	db   *sql.DB
	name string
}

// NewDatabaseChecker —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ë–î
func NewDatabaseChecker(db *sql.DB, name string) *DatabaseChecker {
	return &DatabaseChecker{
		db:   db,
		name: name,
	}
}

// Check –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ë–î
func (dc *DatabaseChecker) Check(ctx context.Context) CheckResult {
	start := time.Now()
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	err := dc.db.PingContext(ctx)
	if err != nil {
		return CheckResult{
			Status:        StatusFail,
			ComponentName: dc.name,
			ComponentType: "database",
			Time:          start,
			Duration:      time.Since(start),
			Error:         err.Error(),
			Output:        "Database connection failed",
		}
	}
	
	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
	stats := dc.db.Stats()
	metrics := map[string]interface{}{
		"open_connections":     stats.OpenConnections,
		"in_use":              stats.InUse,
		"idle":                stats.Idle,
		"wait_count":          stats.WaitCount,
		"wait_duration_ms":    stats.WaitDuration.Milliseconds(),
		"max_idle_closed":     stats.MaxIdleClosed,
		"max_lifetime_closed": stats.MaxLifetimeClosed,
	}
	
	status := StatusPass
	output := "Database connection successful"
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
	if stats.OpenConnections > 80 { // –ï—Å–ª–∏ –±–æ–ª—å—à–µ 80% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
		status = StatusWarn
		output = "High number of database connections"
	}
	
	return CheckResult{
		Status:        status,
		ComponentName: dc.name,
		ComponentType: "database",
		Time:          start,
		Duration:      time.Since(start),
		Output:        output,
		Metrics:       metrics,
	}
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
func (dc *DatabaseChecker) Name() string {
	return dc.name
}

// Type –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
func (dc *DatabaseChecker) Type() string {
	return "database"
}

// HTTPChecker –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ HTTP —Å–µ—Ä–≤–∏—Å–∞
type HTTPChecker struct {
	url        string
	name       string
	client     *http.Client
	expectedStatus int
}

// NewHTTPChecker —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É HTTP —Å–µ—Ä–≤–∏—Å–∞
func NewHTTPChecker(url, name string, timeout time.Duration) *HTTPChecker {
	return &HTTPChecker{
		url:  url,
		name: name,
		client: &http.Client{
			Timeout: timeout,
		},
		expectedStatus: http.StatusOK,
	}
}

// WithExpectedStatus —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥
func (hc *HTTPChecker) WithExpectedStatus(status int) *HTTPChecker {
	hc.expectedStatus = status
	return hc
}

// Check –≤—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –ø—Ä–æ–≤–µ—Ä–∫—É
func (hc *HTTPChecker) Check(ctx context.Context) CheckResult {
	start := time.Now()
	
	req, err := http.NewRequestWithContext(ctx, "GET", hc.url, nil)
	if err != nil {
		return CheckResult{
			Status:        StatusFail,
			ComponentName: hc.name,
			ComponentType: "http",
			Time:          start,
			Duration:      time.Since(start),
			Error:         err.Error(),
			Output:        "Failed to create HTTP request",
		}
	}
	
	resp, err := hc.client.Do(req)
	if err != nil {
		return CheckResult{
			Status:        StatusFail,
			ComponentName: hc.name,
			ComponentType: "http",
			Time:          start,
			Duration:      time.Since(start),
			Error:         err.Error(),
			Output:        "HTTP request failed",
		}
	}
	defer resp.Body.Close()
	
	status := StatusPass
	output := fmt.Sprintf("HTTP check successful (status: %d)", resp.StatusCode)
	
	if resp.StatusCode != hc.expectedStatus {
		status = StatusFail
		output = fmt.Sprintf("Unexpected status code: %d (expected: %d)", resp.StatusCode, hc.expectedStatus)
	}
	
	metrics := map[string]interface{}{
		"status_code":   resp.StatusCode,
		"response_time": time.Since(start).Milliseconds(),
	}
	
	return CheckResult{
		Status:        status,
		ComponentName: hc.name,
		ComponentType: "http",
		Time:          start,
		Duration:      time.Since(start),
		Output:        output,
		Metrics:       metrics,
		Links: map[string]string{
			"endpoint": hc.url,
		},
	}
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
func (hc *HTTPChecker) Name() string {
	return hc.name
}

// Type –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
func (hc *HTTPChecker) Type() string {
	return "http"
}

// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –¢–ò–ü–´

// namedChecker –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Å –∏–º–µ–Ω–µ–º –∏ —Ç–∏–ø–æ–º
type namedChecker struct {
	name          string
	componentType string
	checkFunc     func(ctx context.Context) CheckResult
}

func (nc *namedChecker) Check(ctx context.Context) CheckResult {
	return nc.checkFunc(ctx)
}

func (nc *namedChecker) Name() string {
	return nc.name
}

func (nc *namedChecker) Type() string {
	return nc.componentType
}

// HTTP HANDLER –¥–ª—è health checks

// Handler HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è health checks
func (hc *HealthChecker) Handler() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
		w.Header().Set("Content-Type", "application/json")
		w.Header().Set("Cache-Control", "no-cache, no-store, must-revalidate")
		
		// –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
		result := hc.Check(r.Context())
		
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
		switch result.Status {
		case StatusPass:
			w.WriteHeader(http.StatusOK)
		case StatusWarn:
			w.WriteHeader(http.StatusOK) // 200 –¥–ª—è warnings
		case StatusFail:
			w.WriteHeader(http.StatusServiceUnavailable)
		}
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –æ—Ç–≤–µ—Ç
		if err := json.NewEncoder(w).Encode(result); err != nil {
			http.Error(w, "Failed to encode health check response", http.StatusInternalServerError)
		}
	}
}

// LivenessHandler –ø—Ä–æ—Å—Ç–æ–π liveness check (–≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200)
func LivenessHandler() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		response := map[string]interface{}{
			"status": "pass",
			"time":   time.Now(),
		}
		json.NewEncoder(w).Encode(response)
	}
}

// ReadinessHandler readiness check —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
func (hc *HealthChecker) ReadinessHandler(criticalChecks []string) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		
		// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
		result := hc.checkCriticalComponents(r.Context(), criticalChecks)
		
		switch result.Status {
		case StatusPass:
			w.WriteHeader(http.StatusOK)
		case StatusWarn:
			w.WriteHeader(http.StatusOK)
		case StatusFail:
			w.WriteHeader(http.StatusServiceUnavailable)
		}
		
		json.NewEncoder(w).Encode(result)
	}
}

// checkCriticalComponents –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
func (hc *HealthChecker) checkCriticalComponents(ctx context.Context, criticalChecks []string) HealthResponse {
	start := time.Now()
	
	hc.mu.RLock()
	defer hc.mu.RUnlock()
	
	checks := make(map[string]CheckResult)
	
	for _, name := range criticalChecks {
		if checker, exists := hc.checkers[name]; exists {
			checkCtx, cancel := context.WithTimeout(ctx, hc.config.CheckTimeout)
			result := hc.runSingleCheck(checkCtx, checker)
			checks[name] = result
			cancel()
		}
	}
	
	return HealthResponse{
		Status:   hc.calculateOverallStatus(checks),
		Checks:   checks,
		Time:     start,
		Duration: time.Since(start),
	}
}

// –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:

/*
// –í main.go:
func main() {
    // –°–æ–∑–¥–∞–µ–º health checker
    healthChecker := health.NewHealthChecker(health.Config{
        Timeout:      30 * time.Second,
        CheckTimeout: 5 * time.Second,
        Parallel:     true,
    })
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
    healthChecker.SetInfo("1.0.0", "abc123", "url-shortener", "URL Shortening Service")
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    healthChecker.Register("database", health.NewDatabaseChecker(db, "postgres"))
    healthChecker.Register("redis", health.NewHTTPChecker("http://redis:6379/ping", "redis", 2*time.Second))
    
    // –ö–∞—Å—Ç–æ–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    healthChecker.RegisterFunc("disk_space", "filesystem", func(ctx context.Context) health.CheckResult {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        return health.CheckResult{
            Status: health.StatusPass,
            Output: "Disk space OK",
        }
    })
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP endpoints
    http.HandleFunc("/health", healthChecker.Handler())
    http.HandleFunc("/health/live", health.LivenessHandler())
    http.HandleFunc("/health/ready", healthChecker.ReadinessHandler([]string{"database"}))
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    log.Fatal(http.ListenAndServe(":8080", nil))
}

// –í Kubernetes:
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: app
    image: url-shortener:latest
    livenessProbe:
      httpGet:
        path: /health/live
        port: 8080
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /health/ready
        port: 8080
      initialDelaySeconds: 5
      periodSeconds: 5

// –í Use Case (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
type LoginUseCase struct {
    healthChecker *health.HealthChecker
    // ... –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
}

func (uc *LoginUseCase) Execute(ctx context.Context, req LoginRequest) (*LoginResponse, error) {
    // –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    if uc.healthChecker != nil {
        result := uc.healthChecker.Check(ctx)
        if result.Status == health.StatusFail {
            return nil, errors.New("system is unhealthy")
        }
    }
    
    // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞...
}
*/

// –í–ê–ñ–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
// 1. Health checks –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º–∏ (< 5 —Å–µ–∫—É–Ω–¥)
// 2. –†–∞–∑–ª–∏—á–∞–π—Ç–µ liveness, readiness –∏ startup probes
// 3. –ù–µ –≤–∫–ª—é—á–∞–π—Ç–µ –≤ readiness –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –Ω–∏—Ö
// 4. –õ–æ–≥–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã health checks –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
// 5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
// 6. –ö—ç—à–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Ä–æ–≥–∏–µ
// 7. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö