package logger

import (
	"context"
	"fmt"
	"log/slog"
	"os"
	"runtime"
	"time"
)

// üìö –ò–ó–£–ß–ò–¢–¨: Structured Logging –≤ Go
// https://pkg.go.dev/log/slog
// https://betterstack.com/community/guides/logging/logging-in-go/
// https://go.dev/blog/slog
//
// –ü–†–ò–ù–¶–ò–ü–´ –•–û–†–û–®–ï–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø:
// 1. –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–û–°–¢–¨ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–µ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é —Å—Ç—Ä–æ–∫
// 2. –ö–û–ù–¢–ï–ö–°–¢–ù–û–°–¢–¨ - –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ context –¥–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
// 3. –£–†–û–í–ù–ò - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
// 4. –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –∑–∞–º–µ–¥–ª—è—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
// 5. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ - –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ª–æ–≥–∏—Ä—É–π—Ç–µ –ø–∞—Ä–æ–ª–∏ –∏ —Ç–æ–∫–µ–Ω—ã!

// Logger –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Clean Architecture
// –í–ê–ñ–ù–û: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ pkg/, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Å–ª–æ—è—Ö
type Logger interface {
	// Debug –ª–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –≤ dev –æ–∫—Ä—É–∂–µ–Ω–∏–∏)
	Debug(msg string, args ...any)
	
	// Info –ª–æ–≥–∏—Ä—É–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	Info(msg string, args ...any)
	
	// Warn –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏)
	Warn(msg string, args ...any)
	
	// Error –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏
	Error(msg string, args ...any)
	
	// With –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è –∫ –ª–æ–≥–≥–µ—Ä—É (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞)
	With(args ...any) Logger
	
	// WithContext –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ context (trace_id, user_id –∏ —Ç.–¥.)
	WithContext(ctx context.Context) Logger
}

// SlogLogger —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Logger –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π slog
// üìö –ò–ó–£–ß–ò–¢–¨: Adapter Pattern
// https://refactoring.guru/design-patterns/adapter
type SlogLogger struct {
	logger *slog.Logger
}

// NewSlogLogger —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π structured logger
func NewSlogLogger(env string) Logger {
	var handler slog.Handler
	
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
	opts := &slog.HandlerOptions{
		Level: slog.LevelInfo,
		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		AddSource: true,
		// –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		ReplaceAttr: func(groups []string, a slog.Attr) slog.Attr {
			// –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
			if a.Key == "password" || a.Key == "token" || a.Key == "secret" {
				return slog.String(a.Key, "[REDACTED]")
			}
			
			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ ISO 8601
			if a.Key == slog.TimeKey {
				return slog.String(a.Key, a.Value.Time().Format(time.RFC3339))
			}
			
			return a
		},
	}
	
	switch env {
	case "development", "dev":
		// –í dev –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
		opts.Level = slog.LevelDebug
		handler = slog.NewTextHandler(os.Stdout, opts)
	case "production", "prod":
		// –í prod –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º JSON –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
		handler = slog.NewJSONHandler(os.Stdout, opts)
	default:
		// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é JSON —Ñ–æ—Ä–º–∞—Ç
		handler = slog.NewJSONHandler(os.Stdout, opts)
	}
	
	logger := slog.New(handler)
	
	return &SlogLogger{
		logger: logger,
	}
}

// Debug —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Logger
func (l *SlogLogger) Debug(msg string, args ...any) {
	l.logger.Debug(msg, args...)
}

// Info —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Logger
func (l *SlogLogger) Info(msg string, args ...any) {
	l.logger.Info(msg, args...)
}

// Warn —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Logger
func (l *SlogLogger) Warn(msg string, args ...any) {
	l.logger.Warn(msg, args...)
}

// Error —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Logger
func (l *SlogLogger) Error(msg string, args ...any) {
	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–µ–∫–µ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –æ—à–∏–±–æ–∫
	_, file, line, ok := runtime.Caller(1)
	if ok {
		args = append(args, "caller_file", file, "caller_line", line)
	}
	
	l.logger.Error(msg, args...)
}

// With —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Logger
func (l *SlogLogger) With(args ...any) Logger {
	return &SlogLogger{
		logger: l.logger.With(args...),
	}
}

// WithContext —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Logger
func (l *SlogLogger) WithContext(ctx context.Context) Logger {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ context
	var contextArgs []any
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ trace_id (–¥–ª—è distributed tracing)
	if traceID := getTraceIDFromContext(ctx); traceID != "" {
		contextArgs = append(contextArgs, "trace_id", traceID)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ user_id (–¥–ª—è –∞—É–¥–∏—Ç–∞)
	if userID := getUserIDFromContext(ctx); userID != 0 {
		contextArgs = append(contextArgs, "user_id", userID)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ request_id (–¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤)
	if requestID := getRequestIDFromContext(ctx); requestID != "" {
		contextArgs = append(contextArgs, "request_id", requestID)
	}
	
	if len(contextArgs) > 0 {
		return l.With(contextArgs...)
	}
	
	return l
}

// HELPER FUNCTIONS –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ context
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—à–µ–º—É middleware

// ContextKey —Ç–∏–ø –¥–ª—è –∫–ª—é—á–µ–π context (–∏–∑–±–µ–≥–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–π)
type ContextKey string

const (
	TraceIDKey   ContextKey = "trace_id"
	UserIDKey    ContextKey = "user_id"
	RequestIDKey ContextKey = "request_id"
)

// getTraceIDFromContext –∏–∑–≤–ª–µ–∫–∞–µ—Ç trace ID –∏–∑ context
func getTraceIDFromContext(ctx context.Context) string {
	if traceID, ok := ctx.Value(TraceIDKey).(string); ok {
		return traceID
	}
	return ""
}

// getUserIDFromContext –∏–∑–≤–ª–µ–∫–∞–µ—Ç user ID –∏–∑ context
func getUserIDFromContext(ctx context.Context) uint {
	if userID, ok := ctx.Value(UserIDKey).(uint); ok {
		return userID
	}
	return 0
}

// getRequestIDFromContext –∏–∑–≤–ª–µ–∫–∞–µ—Ç request ID –∏–∑ context
func getRequestIDFromContext(ctx context.Context) string {
	if requestID, ok := ctx.Value(RequestIDKey).(string); ok {
		return requestID
	}
	return ""
}

// UTILITY FUNCTIONS –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è context —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏

// WithTraceID –¥–æ–±–∞–≤–ª—è–µ—Ç trace ID –≤ context
func WithTraceID(ctx context.Context, traceID string) context.Context {
	return context.WithValue(ctx, TraceIDKey, traceID)
}

// WithUserID –¥–æ–±–∞–≤–ª—è–µ—Ç user ID –≤ context
func WithUserID(ctx context.Context, userID uint) context.Context {
	return context.WithValue(ctx, UserIDKey, userID)
}

// WithRequestID –¥–æ–±–∞–≤–ª—è–µ—Ç request ID –≤ context
func WithRequestID(ctx context.Context, requestID string) context.Context {
	return context.WithValue(ctx, RequestIDKey, requestID)
}

// –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –õ–û–ì–ì–ï–†–´ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª–æ–µ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

// DomainLogger —Å–æ–∑–¥–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –¥–æ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—è
func (l *SlogLogger) DomainLogger() Logger {
	return l.With("layer", "domain")
}

// UseCaseLogger —Å–æ–∑–¥–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è —Å–ª–æ—è Use Cases
func (l *SlogLogger) UseCaseLogger() Logger {
	return l.With("layer", "usecase")
}

// InfrastructureLogger —Å–æ–∑–¥–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ —Å–ª–æ—è
func (l *SlogLogger) InfrastructureLogger() Logger {
	return l.With("layer", "infrastructure")
}

// InterfaceLogger —Å–æ–∑–¥–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è —Å–ª–æ—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
func (l *SlogLogger) InterfaceLogger() Logger {
	return l.With("layer", "interface")
}

// –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: Lazy logging –¥–ª—è –¥–æ—Ä–æ–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
// üìö –ò–ó–£–ß–ò–¢–¨: Lazy evaluation
// https://en.wikipedia.org/wiki/Lazy_evaluation

// LazyValue –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ª–æ–∂–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
type LazyValue func() any

// LazyString —Å–æ–∑–¥–∞–µ—Ç –ª–µ–Ω–∏–≤–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func LazyString(fn func() string) LazyValue {
	return func() any { return fn() }
}

// LazyInt —Å–æ–∑–¥–∞–µ—Ç –ª–µ–Ω–∏–≤–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func LazyInt(fn func() int) LazyValue {
	return func() any { return fn() }
}

// –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–•:

/*
–ü–†–ê–í–ò–õ–¨–ù–û–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞:

// –í Use Case:
func (uc *LoginUseCase) Execute(ctx context.Context, req LoginRequest) (*LoginResponse, error) {
    logger := uc.logger.WithContext(ctx).With(
        "operation", "user_login",
        "email", req.Email, // Email –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
        // "password", req.Password, // –ù–ò–ö–û–ì–î–ê –Ω–µ –ª–æ–≥–∏—Ä—É–π—Ç–µ –ø–∞—Ä–æ–ª–∏!
    )
    
    logger.Info("Login attempt started")
    
    user, err := uc.userRepo.FindByEmail(ctx, req.Email)
    if err != nil {
        logger.Error("Failed to find user", "error", err)
        return nil, err
    }
    
    if user == nil {
        logger.Warn("Login attempt for non-existent user")
        return nil, ErrUserNotFound
    }
    
    // ... –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ ...
    
    logger.Info("Login successful", "user_id", user.ID)
    return response, nil
}

// –í Repository:
func (r *UserRepository) Save(ctx context.Context, user *user.User) error {
    logger := r.logger.WithContext(ctx).With(
        "operation", "user_save",
        "user_id", user.ID,
    )
    
    start := time.Now()
    defer func() {
        logger.Debug("Save operation completed", 
            "duration_ms", time.Since(start).Milliseconds())
    }()
    
    logger.Debug("Saving user to database")
    
    // ... SQL –æ–ø–µ—Ä–∞—Ü–∏–∏ ...
    
    return nil
}

// –í Controller:
func (c *AuthController) Login(w http.ResponseWriter, r *http.Request) {
    // –°–æ–∑–¥–∞–µ–º request ID –¥–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
    requestID := generateRequestID()
    ctx := WithRequestID(r.Context(), requestID)
    
    logger := c.logger.WithContext(ctx).With(
        "handler", "auth_login",
        "method", r.Method,
        "path", r.URL.Path,
        "user_agent", r.UserAgent(),
        "ip", getClientIP(r),
    )
    
    logger.Info("HTTP request received")
    
    // ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ...
    
    logger.Info("HTTP response sent", "status_code", http.StatusOK)
}
*/

// –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

// SafeEmail –º–∞—Å–∫–∏—Ä—É–µ—Ç —á–∞—Å—Ç—å email –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func SafeEmail(email string) string {
	if len(email) < 3 {
		return "***"
	}
	
	atIndex := -1
	for i, r := range email {
		if r == '@' {
			atIndex = i
			break
		}
	}
	
	if atIndex <= 0 {
		return "***"
	}
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª + *** + –¥–æ–º–µ–Ω
	return email[:1] + "***" + email[atIndex:]
}

// SafeUserID –±–µ–∑–æ–ø–∞—Å–Ω–æ –ª–æ–≥–∏—Ä—É–µ—Ç user ID (–≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞)
func SafeUserID(userID uint) any {
	// –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ user ID –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å
	// –ù–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤—ã—Å–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
	return userID
}

// ErrorWithStack –¥–æ–±–∞–≤–ª—è–µ—Ç stack trace –∫ –æ—à–∏–±–∫–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func ErrorWithStack(err error) slog.Attr {
	if err == nil {
		return slog.String("error", "nil")
	}
	
	// –ü–æ–ª—É—á–∞–µ–º stack trace
	stack := make([]byte, 4096)
	n := runtime.Stack(stack, false)
	
	return slog.Group("error",
		"message", err.Error(),
		"stack", string(stack[:n]),
	)
}

// –ú–ï–¢–†–ò–ö–ò: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
// üìö –ò–ó–£–ß–ò–¢–¨: Observability (Logs, Metrics, Traces)
// https://opentelemetry.io/docs/concepts/observability-primer/

// MetricLogger —Ä–∞—Å—à–∏—Ä—è–µ—Ç –æ–±—ã—á–Ω—ã–π –ª–æ–≥–≥–µ—Ä –º–µ—Ç—Ä–∏–∫–∞–º–∏
type MetricLogger struct {
	Logger
	metrics MetricsCollector
}

// MetricsCollector –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
type MetricsCollector interface {
	IncCounter(name string, tags map[string]string)
	RecordDuration(name string, duration time.Duration, tags map[string]string)
	SetGauge(name string, value float64, tags map[string]string)
}

// NewMetricLogger —Å–æ–∑–¥–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
func NewMetricLogger(logger Logger, metrics MetricsCollector) Logger {
	return &MetricLogger{
		Logger:  logger,
		metrics: metrics,
	}
}

// Error –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç Error –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –æ—à–∏–±–æ–∫
func (ml *MetricLogger) Error(msg string, args ...any) {
	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
	ml.metrics.IncCounter("errors_total", map[string]string{
		"level": "error",
	})
	
	// –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Error
	ml.Logger.Error(msg, args...)
}

// –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ MetricsCollector –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
// —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Prometheus, StatsD –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫