package metrics

import (
	"context"
	"sync"
	"time"
)

// üìö –ò–ó–£–ß–ò–¢–¨: Application Metrics –∏ Observability
// https://prometheus.io/docs/concepts/metric_types/
// https://opentelemetry.io/docs/concepts/observability-primer/
// https://sre.google/sre-book/monitoring-distributed-systems/
// https://grafana.com/blog/2018/08/02/the-red-method-how-to-instrument-your-services/
//
// –û–°–ù–û–í–ù–´–ï –¢–ò–ü–´ –ú–ï–¢–†–ò–ö:
// 1. COUNTER - –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–π —Å—á–µ—Ç—á–∏–∫ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –æ—à–∏–±–æ–∫)
// 2. GAUGE - —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–∞–º—è—Ç—å)
// 3. HISTOGRAM - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π (–≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞, —Ä–∞–∑–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤)
// 4. SUMMARY - –∫–≤–∞–Ω—Ç–∏–ª–∏ –∏ —Å—É–º–º—ã (95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞)
//
// –ú–ï–¢–û–î–û–õ–û–ì–ò–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:
// 1. RED Method (Rate, Errors, Duration) - –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
// 2. USE Method (Utilization, Saturation, Errors) - –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
// 3. Four Golden Signals (Latency, Traffic, Errors, Saturation)

// MetricsCollector –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
type MetricsCollector interface {
	// Counter methods
	IncCounter(name string, tags map[string]string)
	IncCounterBy(name string, value int64, tags map[string]string)
	
	// Gauge methods
	SetGauge(name string, value float64, tags map[string]string)
	IncGauge(name string, tags map[string]string)
	DecGauge(name string, tags map[string]string)
	
	// Histogram methods
	RecordDuration(name string, duration time.Duration, tags map[string]string)
	RecordValue(name string, value float64, tags map[string]string)
	
	// Distribution methods
	RecordDistribution(name string, value float64, tags map[string]string)
	
	// Utility methods
	WithTags(tags map[string]string) MetricsCollector
	Close() error
}

// –ü–†–û–°–¢–ê–Ø IN-MEMORY –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò

// InMemoryMetrics –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –≤ –ø–∞–º—è—Ç–∏
type InMemoryMetrics struct {
	counters    map[string]*Counter
	gauges      map[string]*Gauge
	histograms  map[string]*Histogram
	mu          sync.RWMutex
	defaultTags map[string]string
}

// Counter —Å—á–µ—Ç—á–∏–∫
type Counter struct {
	Value int64
	Tags  map[string]string
	mu    sync.RWMutex
}

// Gauge –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å
type Gauge struct {
	Value float64
	Tags  map[string]string
	mu    sync.RWMutex
}

// Histogram –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
type Histogram struct {
	Count    int64
	Sum      float64
	Min      float64
	Max      float64
	Buckets  map[float64]int64 // bucket -> count
	Tags     map[string]string
	mu       sync.RWMutex
}

// NewInMemoryMetrics —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫ –≤ –ø–∞–º—è—Ç–∏
func NewInMemoryMetrics() *InMemoryMetrics {
	return &InMemoryMetrics{
		counters:   make(map[string]*Counter),
		gauges:     make(map[string]*Gauge),
		histograms: make(map[string]*Histogram),
	}
}

// IncCounter —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –Ω–∞ 1
func (m *InMemoryMetrics) IncCounter(name string, tags map[string]string) {
	m.IncCounterBy(name, 1, tags)
}

// IncCounterBy —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func (m *InMemoryMetrics) IncCounterBy(name string, value int64, tags map[string]string) {
	key := m.createKey(name, tags)
	
	m.mu.Lock()
	defer m.mu.Unlock()
	
	counter, exists := m.counters[key]
	if !exists {
		counter = &Counter{
			Value: 0,
			Tags:  m.mergeTags(tags),
		}
		m.counters[key] = counter
	}
	
	counter.mu.Lock()
	counter.Value += value
	counter.mu.Unlock()
}

// SetGauge —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—è
func (m *InMemoryMetrics) SetGauge(name string, value float64, tags map[string]string) {
	key := m.createKey(name, tags)
	
	m.mu.Lock()
	defer m.mu.Unlock()
	
	gauge, exists := m.gauges[key]
	if !exists {
		gauge = &Gauge{
			Tags: m.mergeTags(tags),
		}
		m.gauges[key] = gauge
	}
	
	gauge.mu.Lock()
	gauge.Value = value
	gauge.mu.Unlock()
}

// IncGauge —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å –Ω–∞ 1
func (m *InMemoryMetrics) IncGauge(name string, tags map[string]string) {
	m.adjustGauge(name, 1, tags)
}

// DecGauge —É–º–µ–Ω—å—à–∞–µ—Ç –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å –Ω–∞ 1
func (m *InMemoryMetrics) DecGauge(name string, tags map[string]string) {
	m.adjustGauge(name, -1, tags)
}

// adjustGauge –∏–∑–º–µ–Ω—è–µ—Ç –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func (m *InMemoryMetrics) adjustGauge(name string, delta float64, tags map[string]string) {
	key := m.createKey(name, tags)
	
	m.mu.Lock()
	defer m.mu.Unlock()
	
	gauge, exists := m.gauges[key]
	if !exists {
		gauge = &Gauge{
			Value: 0,
			Tags:  m.mergeTags(tags),
		}
		m.gauges[key] = gauge
	}
	
	gauge.mu.Lock()
	gauge.Value += delta
	gauge.mu.Unlock()
}

// RecordDuration –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
func (m *InMemoryMetrics) RecordDuration(name string, duration time.Duration, tags map[string]string) {
	m.RecordValue(name, float64(duration.Nanoseconds())/1e6, tags) // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

// RecordValue –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
func (m *InMemoryMetrics) RecordValue(name string, value float64, tags map[string]string) {
	key := m.createKey(name, tags)
	
	m.mu.Lock()
	defer m.mu.Unlock()
	
	histogram, exists := m.histograms[key]
	if !exists {
		histogram = &Histogram{
			Min:     value,
			Max:     value,
			Buckets: make(map[float64]int64),
			Tags:    m.mergeTags(tags),
		}
		m.histograms[key] = histogram
	}
	
	histogram.mu.Lock()
	histogram.Count++
	histogram.Sum += value
	
	if value < histogram.Min {
		histogram.Min = value
	}
	if value > histogram.Max {
		histogram.Max = value
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –≤ buckets (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
	bucket := m.findBucket(value)
	histogram.Buckets[bucket]++
	histogram.mu.Unlock()
}

// RecordDistribution –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–∞–ª–∏–∞—Å –¥–ª—è RecordValue)
func (m *InMemoryMetrics) RecordDistribution(name string, value float64, tags map[string]string) {
	m.RecordValue(name, value, tags)
}

// WithTags —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–±–æ—Ä—â–∏–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
func (m *InMemoryMetrics) WithTags(tags map[string]string) MetricsCollector {
	return &InMemoryMetrics{
		counters:    m.counters,
		gauges:      m.gauges,
		histograms:  m.histograms,
		defaultTags: m.mergeTags(tags),
	}
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫
func (m *InMemoryMetrics) Close() error {
	// –î–ª—è in-memory —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
	return nil
}

// UTILITY METHODS

// createKey —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ —Å —Ç–µ–≥–∞–º–∏
func (m *InMemoryMetrics) createKey(name string, tags map[string]string) string {
	key := name
	allTags := m.mergeTags(tags)
	
	for k, v := range allTags {
		key += "," + k + "=" + v
	}
	
	return key
}

// mergeTags –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–µ–≥–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏
func (m *InMemoryMetrics) mergeTags(tags map[string]string) map[string]string {
	result := make(map[string]string)
	
	// –°–Ω–∞—á–∞–ª–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–µ–≥–∏
	for k, v := range m.defaultTags {
		result[k] = v
	}
	
	// –ó–∞—Ç–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ)
	for k, v := range tags {
		result[k] = v
	}
	
	return result
}

// findBucket –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π bucket –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è
func (m *InMemoryMetrics) findBucket(value float64) float64 {
	// –ü—Ä–æ—Å—Ç—ã–µ buckets: 1, 5, 10, 25, 50, 100, 250, 500, 1000, +Inf
	buckets := []float64{1, 5, 10, 25, 50, 100, 250, 500, 1000, float64(^uint(0) >> 1)} // +Inf
	
	for _, bucket := range buckets {
		if value <= bucket {
			return bucket
		}
	}
	
	return buckets[len(buckets)-1]
}

// –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –≠–ö–°–ü–û–†–¢ –ú–ï–¢–†–ò–ö

// GetStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
func (m *InMemoryMetrics) GetStats() map[string]interface{} {
	m.mu.RLock()
	defer m.mu.RUnlock()
	
	stats := make(map[string]interface{})
	
	// –°—á–µ—Ç—á–∏–∫–∏
	counters := make(map[string]interface{})
	for key, counter := range m.counters {
		counter.mu.RLock()
		counters[key] = map[string]interface{}{
			"value": counter.Value,
			"tags":  counter.Tags,
		}
		counter.mu.RUnlock()
	}
	stats["counters"] = counters
	
	// –ò–∑–º–µ—Ä–∏—Ç–µ–ª–∏
	gauges := make(map[string]interface{})
	for key, gauge := range m.gauges {
		gauge.mu.RLock()
		gauges[key] = map[string]interface{}{
			"value": gauge.Value,
			"tags":  gauge.Tags,
		}
		gauge.mu.RUnlock()
	}
	stats["gauges"] = gauges
	
	// –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
	histograms := make(map[string]interface{})
	for key, histogram := range m.histograms {
		histogram.mu.RLock()
		avg := float64(0)
		if histogram.Count > 0 {
			avg = histogram.Sum / float64(histogram.Count)
		}
		
		histograms[key] = map[string]interface{}{
			"count":   histogram.Count,
			"sum":     histogram.Sum,
			"min":     histogram.Min,
			"max":     histogram.Max,
			"avg":     avg,
			"buckets": histogram.Buckets,
			"tags":    histogram.Tags,
		}
		histogram.mu.RUnlock()
	}
	stats["histograms"] = histograms
	
	return stats
}

// –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–†–ò–ö–ò –î–õ–Ø CLEAN ARCHITECTURE

// ApplicationMetrics –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
type ApplicationMetrics struct {
	collector MetricsCollector
}

// NewApplicationMetrics —Å–æ–∑–¥–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func NewApplicationMetrics(collector MetricsCollector) *ApplicationMetrics {
	return &ApplicationMetrics{
		collector: collector.WithTags(map[string]string{
			"service": "url-shortener",
		}),
	}
}

// HTTP –ú–ï–¢–†–ò–ö–ò

// RecordHTTPRequest –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å
func (m *ApplicationMetrics) RecordHTTPRequest(method, path string, statusCode int, duration time.Duration) {
	tags := map[string]string{
		"method": method,
		"path":   path,
		"status": getStatusClass(statusCode),
	}
	
	// –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
	m.collector.IncCounter("http_requests_total", tags)
	
	// –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
	m.collector.RecordDuration("http_request_duration_ms", duration, tags)
	
	// –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
	if statusCode >= 400 {
		m.collector.IncCounter("http_errors_total", tags)
	}
}

// USE CASE –ú–ï–¢–†–ò–ö–ò

// RecordUseCaseExecution –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Use Case
func (m *ApplicationMetrics) RecordUseCaseExecution(useCaseName string, success bool, duration time.Duration) {
	tags := map[string]string{
		"use_case": useCaseName,
		"status":   getSuccessStatus(success),
	}
	
	// –°—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
	m.collector.IncCounter("usecase_executions_total", tags)
	
	// –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	m.collector.RecordDuration("usecase_duration_ms", duration, tags)
	
	// –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
	if !success {
		m.collector.IncCounter("usecase_errors_total", tags)
	}
}

// DATABASE –ú–ï–¢–†–ò–ö–ò

// RecordDatabaseQuery –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
func (m *ApplicationMetrics) RecordDatabaseQuery(operation string, table string, success bool, duration time.Duration) {
	tags := map[string]string{
		"operation": operation,
		"table":     table,
		"status":    getSuccessStatus(success),
	}
	
	// –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
	m.collector.IncCounter("db_queries_total", tags)
	
	// –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
	m.collector.RecordDuration("db_query_duration_ms", duration, tags)
	
	// –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
	if !success {
		m.collector.IncCounter("db_errors_total", tags)
	}
}

// CACHE –ú–ï–¢–†–ò–ö–ò

// RecordCacheOperation –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∫—ç—à–µ–º
func (m *ApplicationMetrics) RecordCacheOperation(operation string, hit bool) {
	tags := map[string]string{
		"operation": operation,
		"result":    getCacheResult(hit),
	}
	
	// –°—á–µ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
	m.collector.IncCounter("cache_operations_total", tags)
	
	// –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è hits/misses
	if operation == "get" {
		if hit {
			m.collector.IncCounter("cache_hits_total", nil)
		} else {
			m.collector.IncCounter("cache_misses_total", nil)
		}
	}
}

// BUSINESS –ú–ï–¢–†–ò–ö–ò

// RecordUserRegistration –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (m *ApplicationMetrics) RecordUserRegistration(success bool) {
	tags := map[string]string{
		"status": getSuccessStatus(success),
	}
	
	m.collector.IncCounter("user_registrations_total", tags)
}

// RecordUserLogin –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞
func (m *ApplicationMetrics) RecordUserLogin(success bool) {
	tags := map[string]string{
		"status": getSuccessStatus(success),
	}
	
	m.collector.IncCounter("user_logins_total", tags)
}

// RecordLinkCreation –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
func (m *ApplicationMetrics) RecordLinkCreation(success bool) {
	tags := map[string]string{
		"status": getSuccessStatus(success),
	}
	
	m.collector.IncCounter("links_created_total", tags)
}

// RecordLinkRedirect –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
func (m *ApplicationMetrics) RecordLinkRedirect(found bool) {
	tags := map[string]string{
		"found": getBooleanString(found),
	}
	
	m.collector.IncCounter("link_redirects_total", tags)
}

// SYSTEM –ú–ï–¢–†–ò–ö–ò

// SetActiveConnections —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
func (m *ApplicationMetrics) SetActiveConnections(count int) {
	m.collector.SetGauge("active_connections", float64(count), nil)
}

// SetActiveUsers —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (m *ApplicationMetrics) SetActiveUsers(count int) {
	m.collector.SetGauge("active_users", float64(count), nil)
}

// RecordMemoryUsage –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
func (m *ApplicationMetrics) RecordMemoryUsage(heapMB, stackMB float64) {
	m.collector.SetGauge("memory_heap_mb", heapMB, nil)
	m.collector.SetGauge("memory_stack_mb", stackMB, nil)
}

// RATE LIMITING –ú–ï–¢–†–ò–ö–ò

// RecordRateLimitCheck –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É rate limit
func (m *ApplicationMetrics) RecordRateLimitCheck(limiterName string, allowed bool) {
	tags := map[string]string{
		"limiter": limiterName,
		"result":  getRateLimitResult(allowed),
	}
	
	m.collector.IncCounter("rate_limit_checks_total", tags)
	
	if !allowed {
		m.collector.IncCounter("rate_limit_exceeded_total", tags)
	}
}

// UTILITY FUNCTIONS

func getStatusClass(statusCode int) string {
	switch {
	case statusCode < 300:
		return "2xx"
	case statusCode < 400:
		return "3xx"
	case statusCode < 500:
		return "4xx"
	default:
		return "5xx"
	}
}

func getSuccessStatus(success bool) string {
	if success {
		return "success"
	}
	return "error"
}

func getCacheResult(hit bool) string {
	if hit {
		return "hit"
	}
	return "miss"
}

func getBooleanString(value bool) string {
	if value {
		return "true"
	}
	return "false"
}

func getRateLimitResult(allowed bool) string {
	if allowed {
		return "allowed"
	}
	return "blocked"
}

// –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò USE CASES

// UseCaseTimer –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Use Cases
type UseCaseTimer struct {
	metrics     *ApplicationMetrics
	useCaseName string
	startTime   time.Time
}

// NewUseCaseTimer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è Use Case
func (m *ApplicationMetrics) NewUseCaseTimer(useCaseName string) *UseCaseTimer {
	return &UseCaseTimer{
		metrics:     m,
		useCaseName: useCaseName,
		startTime:   time.Now(),
	}
}

// Finish –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
func (t *UseCaseTimer) Finish(err error) {
	duration := time.Since(t.startTime)
	success := err == nil
	t.metrics.RecordUseCaseExecution(t.useCaseName, success, duration)
}

// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–ï–¢–†–ò–ö

// MetricsConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫
type MetricsConfig struct {
	Enabled    bool   `yaml:"enabled" env:"METRICS_ENABLED" default:"true"`
	Provider   string `yaml:"provider" env:"METRICS_PROVIDER" default:"memory"` // memory, prometheus, datadog
	Address    string `yaml:"address" env:"METRICS_ADDRESS" default:":9090"`
	Path       string `yaml:"path" env:"METRICS_PATH" default:"/metrics"`
	Namespace  string `yaml:"namespace" env:"METRICS_NAMESPACE" default:"urlshortener"`
	
	// Sampling (–¥–ª—è –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º)
	SampleRate float64 `yaml:"sample_rate" env:"METRICS_SAMPLE_RATE" default:"1.0"`
}

// –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:

/*
// –í Use Case:
type LoginUseCase struct {
    metrics *metrics.ApplicationMetrics
    // ... –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
}

func (uc *LoginUseCase) Execute(ctx context.Context, req LoginRequest) (*LoginResponse, error) {
    timer := uc.metrics.NewUseCaseTimer("user_login")
    defer timer.Finish(err)
    
    // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞...
    
    uc.metrics.RecordUserLogin(true)
    return response, nil
}

// –í HTTP middleware:
func MetricsMiddleware(metrics *metrics.ApplicationMetrics) func(http.Handler) http.Handler {
    return func(next http.Handler) http.Handler {
        return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
            start := time.Now()
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            recorder := &statusRecorder{ResponseWriter: w, statusCode: 200}
            next.ServeHTTP(recorder, r)
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            duration := time.Since(start)
            metrics.RecordHTTPRequest(r.Method, r.URL.Path, recorder.statusCode, duration)
        })
    }
}

// –í Repository:
type UserRepository struct {
    metrics *metrics.ApplicationMetrics
    // ... –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
}

func (r *UserRepository) FindByEmail(ctx context.Context, email string) (*User, error) {
    start := time.Now()
    defer func() {
        duration := time.Since(start)
        success := err == nil
        r.metrics.RecordDatabaseQuery("select", "users", success, duration)
    }()
    
    // SQL –∑–∞–ø—Ä–æ—Å...
}

// –í main.go:
func main() {
    metricsCollector := metrics.NewInMemoryMetrics()
    appMetrics := metrics.NewApplicationMetrics(metricsCollector)
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤–æ –≤—Å–µ —Å–ª–æ–∏ —á–µ—Ä–µ–∑ DI
    container := di.NewContainer(config, appMetrics)
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP endpoint –¥–ª—è –º–µ—Ç—Ä–∏–∫
    go func() {
        http.HandleFunc("/metrics", func(w http.ResponseWriter, r *http.Request) {
            stats := metricsCollector.GetStats()
            json.NewEncoder(w).Encode(stats)
        })
        log.Fatal(http.ListenAndServe(":9090", nil))
    }()
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
}
*/

// –í–ê–ñ–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
// 1. –ú–µ—Ç—Ä–∏–∫–∏ –ù–ï –î–û–õ–ñ–ù–´ –≤–ª–∏—è—Ç—å –Ω–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
// 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–µ—Ç—Ä–∏–∫
// 3. –ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Ç–µ–≥–æ–≤ (cardinality explosion)
// 4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∞–º–æ–π —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫
// 5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sampling –¥–ª—è –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
// 6. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
// 7. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏ –æ—á–∏—â–∞–π—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏